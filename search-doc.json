[{"title":"Never Gonna Give You Up","type":0,"sectionRef":"#","url":"blog/Welcome","content":"We're no strangers to love You know the rules and so do I A full commitment's what I'm thinking of You wouldn't get this from any other guy I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it And if you ask me how I'm feeling Don't tell me you're too blind to see Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you (Ooh, give you up) (Ooh, give you up) (Ooh) Never gonna give, never gonna give (Give you up) (Ooh) Never gonna give, never gonna give (Give you up) We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you","keywords":""},{"title":"Welcome","type":0,"sectionRef":"#","url":"docs/","content":"","keywords":""},{"title":"Welcome to Leaf's Documentation!","type":1,"pageTitle":"Welcome","url":"docs/#welcome-to-leafs-documentation","content":"Developers use Leaf's API to access clean, standardized, and aggregated Farm data from all major food & agriculture brands. Please see the Quickstart section to get started with sample farm data & popular use cases. We have implementation examples in cURL, NodeJS and Python! Getting Started Leaf's API abstracts and standardizes across agricultural data sources so you can focus on building value with farm data. There are just a few concepts that you need to get started and we provide sample data within new Leaf accounts to help you learn quickly.  "},{"title":"Authentication Alerts","type":0,"sectionRef":"#","url":"docs/alerts_authentication","content":"It’s very important to confirm that requests received on your webhook are sent from Leaf, to avoid IP spoofing attacks. To this end, you should verify webhook signatures. Leaf generates signatures using a hash-based message authentication code (HMAC) with SHA-256, and the secret specified when you created the alerts' configuration as the HMAC key. Be careful with deserialization of the request body when using it to verify the signature. It's recommended that you get the request body as bytes. The signed content has no line breaks, it's a string of the raw JSON with white-spaces after “:” and “,”. The digest is added to the X-Leaf-Signature header encoded in base 64. Here is an example on how to verify the request in your webhook: PythonJava Copy import hmac import base64 # Sign the request body received with your secret expected_sig = hmac.digest(msg=request_body_bytes, key=bytes('your secret', 'utf-8'), digest='sha256') # Decode the X-Leaf-Signature header that is encoded in base 64 request_sig = base64.b64decode(sig_header) # Compare both hmac.compare_digest(expected_sig, request_sig)","keywords":""},{"title":"Alerts Endpoints","type":0,"sectionRef":"#","url":"docs/alerts_endpoints","content":"","keywords":""},{"title":"Create a webhook","type":1,"pageTitle":"Alerts Endpoints","url":"docs/alerts_endpoints#create-a-webhook","content":" POST /webhooks Creates a webhook resource, specifying which events you want to be notified about and where (server URL). The webhook will begin receiving events immediately after it is created. It's not possible to create different webhooks that listen to the same events. For example, if you have already registered a webhook listening for newSatelliteImagesand try to register another one, you'll get a 400 response with error eventRegisteredTwice. Request body# Parameter\tType\tDescriptionevents\tenum name of the event type\tThey are defined in the \"Events\" section of the services chapters (e.g. newSatelliteImage) name\tstring\tThe name of your webhook secret\tstring\tThe secret used for HMAC authentication. We sign payload with this secret. See more here url\ta valid HTTP URL string\tThe address of your webhook server Example in JSON: Copy { \"events\": [ \"newSatelliteImage\" ], \"name\": \"Satellite images listener\", \"secret\": \"mRyT257XpFWX\", \"url\": \"https://yourwebhook.com/leaf/satellite\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Content-Type: application/json' \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d 'Your paylaod as specified above' 'https://api.withleaf.io/services/alerts/api/alerts/webhooks' Response# It returns a JSON containing information about the webhook created. Copy { \"id\": \"UUID\", \"events\": [ \"newSatelliteImage\" ], \"name\": \"Satellite images listener\", \"secret\": \"mRyT257XpFWX\", \"url\": \"https://agtech.com/leaf/satellite\" } If you need to test your endpoint, here is a request example so you can simulate the validation Leaf will do. cURLPythonJavaScript Copy curl -X POST \\ -H 'Content-Type: application/json' \\ -H 'accept: */*' \\ -d '{\"message\" : \"confirmation of webhook upon registration\"}' 'your-webhook-url' "},{"title":"Get a webhook","type":1,"pageTitle":"Alerts Endpoints","url":"docs/alerts_endpoints#get-a-webhook","content":" GET /webhooks/{id} Retrieve a specific webhook resource by its id. Sample code# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/alerts/api/alerts/webhooks/WEBHOOK_UUID' Response# Copy { \"id\": \"UUID\", \"events\": [ \"newSatelliteImage\" ], \"secret\": \"mRyT257XpFWX\", \"name\": \"Satellite images listener\", \"url\": \"https://agtech.com/leaf/satellite\" } "},{"title":"Get all webhooks","type":1,"pageTitle":"Alerts Endpoints","url":"docs/alerts_endpoints#get-all-webhooks","content":" GET /webhooks Retrieve all Webhooks. Sample code# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/alerts/api/alerts/webhooks' Response# It returns a list of JSON objects. Copy [{ \"id\": \"UUID\", \"events\": [ \"newSatelliteImage\" ], \"secret\": \"mRyT257XpFWX\", \"name\": \"Satellite images listener\", \"url\": \"https://agtech.com/leaf/satellite\" }] "},{"title":"Delete a webhook","type":1,"pageTitle":"Alerts Endpoints","url":"docs/alerts_endpoints#delete-a-webhook","content":" DELETE /webhooks/{id} Delete a specific Webhook resource by its id. Returns 204 status code if the delete succeeded. Warning If you delete a Webhook resource, we no longer will send you the events the webhook listens to. Sample code# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/alerts/api/alerts/webhooks/WEBHOOK_ID' "},{"title":"Alerts Overview","type":0,"sectionRef":"#","url":"docs/alerts_overview","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Alerts Overview","url":"docs/alerts_overview#about","content":"With Alerts you can be notified when something happens or changes instead of needing to repeatedly query for changes. Leaf Alerts support events that happen within Leaf and events that happen within supported 3rd party software. Webhooks are user-defined HTTP callbacks. You send us a server URL (the address of the callback) specifying what things you want to know about so when they do happen, we tell you on that URL, by means of a HTTP request. Those things are called \"events\", for example: \"there's a new satellite image\", \"the processing of an operations file finished\", or \"these credentials expired\". The following image shows how events are sent to your webhook. On the left, its the representation of a webhook registration. On the right, a satellite image is processed at any time, then the webhooks system sends a POST request to the registered webhook.  Check the \"Overview\" page of a specific service, section \"Events\", to know what events from that service are available to webhooks. See the Alerts API Reference for information on how to register, get and delete webhooks. To understand how to verify if an incoming request comes from Leaf, see the Authentication section. "},{"title":"Authentication","type":0,"sectionRef":"#","url":"docs/authentication","content":"To access our API, you just have to register using this link. After confirming your email, you will be able to request a token (JWT) through this endpoint: Copy https://api.withleaf.io/api/authenticate You will receive your Leaf Token as response. All set! Include this token in your API calls and you will have access to Leaf's API. cURLPythonJavaScript Copy curl -X POST \\ -H 'Content-Type: application/json' \\ -d '{ \"username\":\"username\", \"password\":\"password\", \"rememberMe\":\"true\" }' \\ 'https://api.withleaf.io/api/authenticate' This request will return your access token to Leaf's API: Copy { \"id_token\" : \"YOUR_LEAF_TOKEN\" } note: Your Leaf Token lasts for 30 days with \"rememberMe\": \"true\" in the json. If you want it to last only 24h, feel free to set \"rememberMe\" to \"false\". After expiration, just make the same request to the same endpoint and you will get a new access token. ","keywords":""},{"title":"Beta Features Overview","type":0,"sectionRef":"#","url":"docs/beta_features_overview","content":"","keywords":""},{"title":"Machines","type":1,"pageTitle":"Beta Features Overview","url":"docs/beta_features_overview#machines","content":"This product fetchs machine data from the providers (like JohnDeere, ClimateFieldView, CNHI) and store this data. Currently, we are obtaining data from providers: JohnDeereCNHI "},{"title":"Prescriptions","type":1,"pageTitle":"Beta Features Overview","url":"docs/beta_features_overview#prescriptions","content":"This product organizes the data flow for prescriptions. For instance, the variable rate application can be done through prescription maps, which can be verified by the non-homogeneity of soil properties made in laboratory analysis. It is useful when applying lime, potassium and other products that can improve soil quality, applying only the amount needed for each area. The prescription file is a zip file that should contain at least three files with the same name and specific extensions (shp, dbf and shx) Our supported providers are: Raven SlingshotClimateFieldView "},{"title":"Layers","type":1,"pageTitle":"Beta Features Overview","url":"docs/beta_features_overview#layers","content":"Layers is a product that will organize the information that is related to field and can be accessed a map. Our supported providers are: Sentera. "},{"title":"Input","type":1,"pageTitle":"Beta Features Overview","url":"docs/beta_features_overview#input","content":"This feature will fetch, from operation files, varieties of crops harvested/planted and products applied and store this data. "},{"title":"List of Events","type":0,"sectionRef":"#","url":"docs/alerts_events","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#about","content":"This section describes all types of events generated by Leaf and their respective formats. The types of events are grouped by the services that produce it. "},{"title":"Alert Events","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#alert-events","content":""},{"title":"Webhook registered","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#webhook-registered","content":"When a new webhook is registered you will receive a one time success message in the below format: Copy { \"message\": \"confirmation of webhook upon registration\" } "},{"title":"Credentials Alerts","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#credentials-alerts","content":""},{"title":"Credentials Missing Permission","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#credentials-missing-permission","content":"Event for when the provided credentials don't have enough permissions to do the actions you are trying to. Alerts for this event are in the following format: Copy { \"credential\": \"the client identification\", \"provider\": \"the provider from the credential\", \"credentialId\": \"the credential id\", \"message\": \"message from the alert\", \"status\": \"the new status of the credential\", \"type\": \"credentialsLimitedPermission\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } "},{"title":"Credentials Unauthenticated","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#credentials-unauthenticated","content":"Event for when the credentials are no longer valid. Alerts for this event are in the following format: Copy { \"credential\": \"the client identification\", \"provider\": \"the provider from the credential\", \"credentialId\": \"the credential id\", \"message\": \"message from the alert\", \"status\": \"the new status of the credential\", \"type\": \"credentialsUnauthenticated\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } "},{"title":"Operation Events","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#operation-events","content":""},{"title":"Uploaded File Processing Finished","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#uploaded-file-processing-finished","content":"Event for when all steps of the processing of a machine operations file that was uploaded to Leaf are finished. This event can be useful to trigger a procedure that fetches the file from the API. This event can be used to activate a procedure that fetches the file from the api, since processing the file may take some time. Alerts for this event are in the following format: Copy { \"fileId\": \"the id of the uploaded file\", \"leafUserId\": \"the id of the file owner\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"uploadedFileProcessingFinished\" } "},{"title":"Uploaded File Processing Failed","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#uploaded-file-processing-failed","content":"Event for when the processing of an operations file that was uploaded to Leaf is finished but failed in one or more of the processing steps. This event can be useful for identifying files that have failed and are no longer being processed. Alerts for this event are in the following format: Copy { \"fileId\": \"the id of the uploaded file\", \"leafUserId\": \"the id of the file owner\", \"message\": \"details of what happened. May be empty\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"uploadedFileProcessingFailed\" } "},{"title":"Provider File Processing Finished","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#provider-file-processing-finished","content":"Event for when the processing of an operations file from a provider (either uploaded to provider manually or via Wireless Data Transfer) has successfully finished processing. This event can be useful for identifying new files when they are available. Alerts for this event are in the following format: Copy { \"fileId\": \"the id of the uploaded file\", \"leafUserId\": \"the id of the file owner\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"providerFileProcessingFinished\" } "},{"title":"Provider File Processing Failed","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#provider-file-processing-failed","content":"Event for when the processing of an operations file from a provider (either uploaded to provider manually or via Wireless Data Transfer) is finished processing but failed in one or more of the processing steps. This event can be useful for identifying files that have failed and are no longer being processed. Alerts for this event are in the following format: Copy { \"fileId\": \"the id of the uploaded file\", \"leafUserId\": \"the id of the file owner\", \"message\": \"details of what happened. May be empty\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"providerFileProcessingFailed\" } "},{"title":"Merged File Processing Finished","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#merged-file-processing-finished","content":"Event for when the processing of a merged operation file has successfully finished processing. This event can be useful for identifying new merged files when they are available. Alerts for this event are in the following format: Copy { \"fileId\": \"the id of the uploaded file\", \"leafUserId\": \"the id of the file owner\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"mergedFileProcessingFinished\" } "},{"title":"Merged File Processing Failed","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#merged-file-processing-failed","content":"Event for when the processing of a merged operation file is finished processing but failed in one or more of the processing steps. This event can be useful for identifying merged files that have failed and are no longer being processed. Alerts for this event are in the following format: Copy { \"fileId\": \"the id of the uploaded file\", \"leafUserId\": \"the id of the file owner\", \"message\": \"details of what happened. May be empty\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"mergedFileProcessingFailed\" } "},{"title":"Automerged File Processing Finished","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#automerged-file-processing-finished","content":"Event for when the processing of an automerged operation file has successfully finished processing. This event can be useful for identifying new automerged files when they are available. Alerts for this event are in the following format: Copy { \"fileId\": \"the id of the uploaded file\", \"leafUserId\": \"the id of the file owner\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"automergedFileProcessingFinished\" } "},{"title":"Automerged File Processing Failed","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#automerged-file-processing-failed","content":"Event for when the processing of an automerged operation file is finished processing but failed in one or more of the processing steps. This event can be useful for identifying automerged files that have failed and are no longer being processed. Alerts for this event are in the following format: Copy { \"fileId\": \"the id of the uploaded file\", \"leafUserId\": \"the id of the file owner\", \"message\": \"details of what happened. May be empty\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"automergedFileProcessingFailed\" } "},{"title":"Operation created","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#operation-created","content":"Event for when an operation is successfully created. This event can be useful for identifying new operations when they are available. Alerts for this event are in the following format: Copy { \"operationId\": \"the id of the operation created\", \"leafUserId\": \"the id of the file owner\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"operationCreated\" } "},{"title":"Operation updated","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#operation-updated","content":"Event for when an operation has updated. This event can be useful for identifying changes to operations. Alerts for this event are in the following format: Copy { \"operationId\": \"the id of the operation uploaded\", \"leafUserId\": \"the id of the file owner\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"operationUpdated\" } "},{"title":"Operation Processing Finished","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#operation-processing-finished","content":"Event when a Field Operation has successfully finished. This event could be useful for fetching the resources of an operation such as images, summary and units. Alerts for this event are in the following format: Copy { \"operationId\": \"the id of the operation uploaded\", \"leafUserId\": \"the id of the file owner\", \"type\": \"operationProcessingFinished\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } "},{"title":"Field Events","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#field-events","content":""},{"title":"New Field","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#new-field","content":"Event for when a new field is created either in a connected provider account or directly within Leaf. Alerts for this event are in the following format: Copy { \"source\": \"SYNC\", \"leafUserId\": \"the id of the file owner\", \"fieldId\": \"the id of the created field\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"fieldCreated\" } "},{"title":"Field Boundary Events","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#field-boundary-events","content":""},{"title":"Field Boundary Created","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#field-boundary-created","content":"Event for when a fieldBoundary is created. Alerts for this event are in the following format: Copy { \"boundaryId\": \"the id of the created field boundary\", \"leafUserId\": \"the id of the file owner\", \"fieldId\": \"the field related to the created field boundary\", \"type\": \"fieldBoundaryCreated\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } "},{"title":"Field Boundary Updated","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#field-boundary-updated","content":"Event for when a fieldBoundary is updated. Alerts for this event are in the following format: Copy { \"boundaryId\": \"the id of the updated field boundary\", \"leafUserId\": \"the id of the file owner\", \"fieldId\": \"the field related to the updated field boundary\", \"type\": \"fieldBoundaryUpdated\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } "},{"title":"Crop Monitoring Events","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#crop-monitoring-events","content":""},{"title":"New Satellite Image","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#new-satellite-image","content":"This event happens when we finish processing a new satellite image for a monitored field. It can be useful for searching only the new and latest images available in our API. Alerts for this event are in the following format: Copy { \"externalId\": \"the external id of the monitored field\", \"processId\": \"the id of the process containing new images\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"type\": \"newSatelliteImage\" } "},{"title":"Machines (Beta) Events","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#machines-beta-events","content":""},{"title":"New Machine","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#new-machine","content":"This event happens when a new machine is created, either from operations files, or from provider data sync, or created by the user. Alerts for this event are in the following format: Copy { \"type\": \"machineCreated\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"machineId\": \"the id of the new machine\", \"leafUserId\": \"the id of the file owner\", } "},{"title":"Updated Machine","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#updated-machine","content":"This event happens when a machine is updated, either from operations files, or from provider data sync, or by the user. Alerts for this event are in the following format: Copy { \"type\": \"machineUpdated\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"machineId\": \"the id of the machine uploaded\", \"leafUserId\": \"the id of the file owner\", } "},{"title":"Deleted Machine","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#deleted-machine","content":"This event happens when a machine is deleted by the user. Alerts for this event are in the following format: Copy { \"type\": \"machineDeleted\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"machineId\": \"the id of the machine deleted\", \"leafUserId\": \"the id of the file owner\", } "},{"title":"Beta > Layers Endpoints","type":0,"sectionRef":"#","url":"docs/beta_layers_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Beta > Layers Endpoints","url":"docs/beta_layers_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/beta/api See below the REST resources and their endpoints available in this service. Description\tEndpointsGet all the layers for a Leaf User\tGET /users/{leafUserId}/layers Upload a layer to Climate FieldView\tPOST /users/{leafUserId}/layers/climateFieldView "},{"title":"Layers (BETA)","type":1,"pageTitle":"Beta > Layers Endpoints","url":"docs/beta_layers_endpoints#layers-beta","content":""},{"title":"Get all the layers for a Leaf User","type":1,"pageTitle":"Beta > Layers Endpoints","url":"docs/beta_layers_endpoints#get-all-the-layers-for-a-leaf-user","content":" GET /users/{leafUserId}/layers Gets a paged list of layers that belong for a Leaf User. This endpoint point can be filtered by the following layer types. Note that these types are related to Sentera integration, please check the details here. Parameter (to filter by)\tValuestype\tTASSEL_COUNT, STAND_COUNT, NVDI, and RGB You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetched (default is 0)size, an integer specifying the size of the page (max is 100) the default value for page size is 20 If the parameters page and size are not set, the endpoint will return 20 results. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/layers' Response# A json array of layers available. Copy [ { \"id\": \"96a098e0-f1d0-47e8-968d-9d55d54da114\", \"leafUserId\": \"055c4d61-b1e2-4fa9-873c-23433a11c271\", \"apiOwnerUsername\": \"fabyan\", \"type\": \"RGB\", \"origin\": \"PROVIDER_POOLED\", \"provider\": \"Sentera\", \"providerLayerId\": \"vnoyi6a_FI_edovSouthernM_CV_prod_82f9b3d6_211018_151052\", \"providerFieldId\": \"ycof8zg_AS_edovSouthernM_CV_prod_a025df2d_211015_200456\", \"name\": \"QuickTile RGB\", \"size\": 159135298, \"md5\": \"7ff746c6f5f06fc25b46420328402bed\", \"contentS3\": \"https://layers-leaf-dev.s3.us-east-1.amazonaws.com/96a098e0-f1d0-47e8-968d-9d55d54da114.tif\", \"createdTime\": \"2022-02-16T21:40:20.257Z\", \"leafFieldIds\": [ \"f43ca7cc-c73a-43b9-8685-070b03876475\", \"edcf7b8b-913e-4e53-a0b5-91aa16699dfc\" ] }, { \"id\": \"4d9b0139-f528-43ab-8bc9-a31043fa87d2\", \"leafUserId\": \"055c4d61-b1e2-4fa9-873c-23433a11c271\", \"apiOwnerUsername\": \"fabyan\", \"type\": \"RGB\", \"origin\": \"PROVIDER_POOLED\", \"provider\": \"Sentera\", \"providerLayerId\": \"<UUID defined by the provider>\", \"providerFieldId\": \"<UUID defined by the provider>\", \"name\": \"QuickTile RGB\", \"size\": 121910506, \"md5\": \"759d1f68962e30ea78f40025c8b64972\", \"contentS3\": \"https://layers-leaf-dev.s3.us-east-1.amazonaws.com/4d9b0139-f528-43ab-8bc9-a31043fa87d2.tif\", \"createdTime\": \"2022-02-16T21:40:35.341Z\", \"leafFieldIds\": [ \"f43ca7cc-c73a-43b9-8685-070b03876475\", \"edcf7b8b-913e-4e53-a0b5-91aa16699dfc\" ] } ] "},{"title":"Upload a layer to Climate FieldView","type":1,"pageTitle":"Beta > Layers Endpoints","url":"docs/beta_layers_endpoints#upload-a-layer-to-climate-fieldview","content":" POST /users/{leafUserId}/layers/climateFieldView Send a layer file to Climate FieldView. Parameter\tValuesuploadType\tRGB Currently, only true color image (RGB) files are supported and must meet the following criteria required by Climate: The image needs to be a multi band GeoTIFF with 24-bit composite values (must contain 3 bands in the order Red, Green, Blue)The Coordinate Reference System (CRS) must be UTM with WGS84 datumThe following metadata (GDAL_METADATA tag) entries are required to be embedded in the GeoTIFF: acquisitionStartDate - ISO8601 dateacquisitionEndDate - ISO8601 dateisCalibrated - boolean Although Climate FieldView supports files up to 500MB, at this time, we only accept files up to 5MB. Request# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -F 'file=rgb.tif' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/layers/climateFieldView?' \\ 'uploadType=RGB' info Uploaded layers are not stored on Leaf side and are only available for use directly in Climate FieldView "},{"title":"Beta > Input Endpoints","type":0,"sectionRef":"#","url":"docs/beta_input_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/beta/api See below the REST resources and their endpoints available in this service. "},{"title":"Products (Beta)","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#products-beta","content":""},{"title":"Resources","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#resources","content":"This feature has the following endpoints available: Description\tEndpointsGet all products\tGET /users/{leafUserId}/products Get all products normalized\tGET /users/products Search for products\tGET /users/{leafUserId}/products/search Get a product\tGET /users/products/{id} Get a operation matching products\tGET /users/users/{leafUserId}/products/matching/operations/{id} "},{"title":"Get all products","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#get-all-products","content":" GET /users/{leafUserId}/products List the existing products used by a leaf user. Parameter (to filter by)\tValuesname\tpart of the product name page\tan integer specifying the page being fetched (default is 0) size\tan integer specifying the size of the page (max is 100) sort\tthe sorting order of the results; can be multi-value, where the first value to be passed will have preference in ordering over the next ones; you can also specify the order as asc or desc with asc being the default. Example: id, desc cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/products' Response# The response is a JSON array containing products records. Copy [ { \"id\": \"8e0de5a5-0888-41f3-b9af-5a03c27b04a0\", \"name\": \"RoundUp\", \"leafUserId\": \"349386f2-762a-4bcb-8675-3c97efa6d462\" }, { \"id\": \"a885307b-e528-4e6b-a76b-a75c175f17c1\", \"name\": \"Atrazine\", \"leafUserId\": \"349386f2-762a-4bcb-8675-3c97efa6d462\" } ] "},{"title":"Search for products","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#search-for-products","content":" GET /beta/products/search Search for products by name, partial values are supported. Parameter (to filter by)\tValuesname\tpart of the product name to be searched (required) maxResults\tthe number of results that should be returned (max value is 20) cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/users/products/search' Response# The response is a JSON array with the products that match the query. Copy [ { \"id\": \"7d85c556-0ac5-4f0b-b7cc-b35ac559af8f\", \"name\": \"Badge X2 Fungicide/Bactericide\", \"registration\": \"80289-12-10163\", \"registrant\": \"Gowan Company, LLC\", \"productType\": \"Dry\", \"formulationType\": \"Dry Flowable\", \"labelProvider\": \"AGRIAN\", \"productPageUrl\": \"https://www.agrian.com/labelcenter/results.cfm?d=16790\", \"labels\": [ { \"name\": \" Label - 03-R0718 \", \"url\": \"https://www.agrian.com/pdfs/current/Badge_X2_FungicideBactericide_Label1p.pdf\" }, .... ] }, { \"id\": \"81ffe756-1fd0-4d97-b2ec-e33b5232f507\", \"name\": \"GameOn\", \"registration\": \"62719-724\", \"registrant\": \"Corteva Agriscience\", \"productType\": \"Dry\", \"formulationType\": \"Dry Flowable\", \"labelProvider\": \"AGRIAN\", \"productPageUrl\": \"https://www.agrian.com/labelcenter/results.cfm?d=21666\", \"labels\": [] }, .... ] "},{"title":"Get a product","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#get-a-product","content":" GET /beta/products/{id} Get a product by its id. The data is obtained from different product databases. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/users/products/{id}' Response# Copy { \"id\": \"81ffe756-1fd0-4d97-b2ec-e33b5232f507\", \"name\": \"GameOn\", \"registration\": \"62719-724\", \"registrant\": \"Corteva Agriscience\", \"productType\": \"Dry\", \"formulationType\": \"Dry Flowable\", \"labelProvider\": \"AGRIAN\", \"productPageUrl\": \"https://www.agrian.com/labelcenter/results.cfm?d=21666\", \"labels\": [ { \"name\": \" Label - 03-R0718 \", \"url\": \"https://www.agrian.com/pdfs/current/Badge_X2_FungicideBactericide_Label1p.pdf\" }, .... ] } "},{"title":"Get matching products from an operation","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#get-matching-products-from-an-operation","content":" GET /users/{leafUserId}/products/matching/operations/{id} Get the standard products that best match the products from a Field Operation. Information such as registration number and labels can be obtained from this endpoint using the id. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/products/matching/operations/{id}' Response# Copy [ { \"id\": \"37159c45-4c1f-48e4-aa87-90b34cc6e789\", \"name\": \"ams\", \"productId\": \"e5b91778-0714-4e1f-850c-b458d1bdc7ed\", \"matchDetails\": { \"status\": \"PREDICTED\", \"rate\": 14.354036 } }, { \"id\": \"7fb70242-498b-42c1-92c3-a7d2361d2125\", \"name\": \"counter\", \"productId\": \"a85c1d0d-b673-46aa-a3a3-31cb65f57598\", \"matchDetails\": { \"status\": \"PREDICTED\", \"rate\": 8.6226015 } }, .... ] "},{"title":"Varieties (Beta)","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#varieties-beta","content":""},{"title":"Resources","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#resources-1","content":"This feature has the following endpoints available: Description\tEndpointsGet all varieties\tGET /users/{leafUserId}/varieties Get all varieties normalized\tGET /users/varieties "},{"title":"Get All Varieties","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#get-all-varieties","content":" GET /users/{leafUserId}/varieties Get all varieties from a leaf user. Parameter (to filter by)\tValuesname\tpart of the product name crops\tdesired crop name page\tan integer specifying the page being fetched (default is 0) size\tan integer specifying the size of the page (max is 100) sort\tthe sorting order of the results; can be multi-value, where the first value to be passed will have preference in ordering over the next ones; you can also specify the order as asc or desc with asc being the default. Example: id, desc cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/varieties' Response# The response is a json list with all the varieties Copy [ { \"id\": \"680ff073-18d0-4951-ba69-b2ca0b098bc3\", \"normalizedName\": \"corn variety 2\", \"leafFilesCount\": 2, \"crops\": [ \"corn\" ] }, { \"id\": \"1544de06-682d-4549-92a3-a06b2ccdc96d\", \"normalizedName\": \"corn variety 2 (1)\", \"leafFilesCount\": 1, \"crops\": [ \"corn\" ] } ] "},{"title":"Get all varieties normalized","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#get-all-varieties-normalized","content":" GET /users/varieties cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/users/varieties' Response# The response is a JSON array showing the existing varieties and how many related files exists. Copy [ { \"id\": \"b3b6f0b8-b546-4eaa-b0f9-a82593699e84\", \"normalizedName\": \"corn\", \"leafFilesCount\": 28, \"crops\": [ \"corn\" ] }, { \"id\": \"9dc82cdc-8364-4bbd-8a0b-16d96322e71c\", \"normalizedName\": \"soybean variety 3\", \"leafFilesCount\": 84, \"crops\": [ \"soybeans\" ] } ] "},{"title":"Beta > Prescriptions Endpoints","type":0,"sectionRef":"#","url":"docs/beta_prescriptions_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Beta > Prescriptions Endpoints","url":"docs/beta_prescriptions_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/beta/prescriptions/api See below the REST resources and their endpoints available in this service. "},{"title":"Prescription (BETA)","type":1,"pageTitle":"Beta > Prescriptions Endpoints","url":"docs/beta_prescriptions_endpoints#prescription-beta","content":""},{"title":"Prescription Resources","type":1,"pageTitle":"Beta > Prescriptions Endpoints","url":"docs/beta_prescriptions_endpoints#prescription-resources","content":"This feature has the following endpoints available: Description\tEndpointsUpload prescription to Raven Slingshot\tPOST /users/{leafUserId}/ravenSlingshot List prescriptions from Raven Slingshot\tGET /users/{leafUserId}/ravenSlingshot Upload prescription to Climate FieldView\tPOST /users/{leafUserId}/climateFieldView Lists prescriptions from John Deere\tGET /users/{leafUserId}/johnDeere Upload prescription to John Deere\tPOST /users/{leafUserId}/johnDeere "},{"title":"Upload prescription to Raven Slingshot","type":1,"pageTitle":"Beta > Prescriptions Endpoints","url":"docs/beta_prescriptions_endpoints#upload-prescription-to-raven-slingshot","content":" POST /users/{leafUserId}/ravenSlingshot Upload a prescription using the Raven Slingshot credentials of the LeafUserId. The file to be uploaded needs to be .zip and contain one of each of the following file extension: shp, dbf, shx; and all files must have the same name. The zip file cannot contain subfolders. Example:# A zip file named “prescription_rx_map”, containing the following files: prescription_rx_map.shpprescription_rx_map.dbfprescription_rx_map.shx cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -F 'file=prescription_rx_map.zip' \\ 'https://api.withleaf.io/services/beta/prescriptions/api/users/{leafUserId}/ravenSlingshot' Response# The response is json with the id of the file uploaded to the provider . Copy { \"id\": \"str\", \"name\": \"str\" } "},{"title":"List prescriptions from Raven Slingshot","type":1,"pageTitle":"Beta > Prescriptions Endpoints","url":"docs/beta_prescriptions_endpoints#list-prescriptions-from-raven-slingshot","content":" GET /users/{leafUserId}/ravenSlingshot List the existing prescriptions available in the provider. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/prescriptions/api/users/{leafUserId}/ravenSlingshot' Response# A json array of prescriptions available in this provider Copy [ { \"id\": \"str\", \"name\": \"str\" }, { \"id\": \"str\", \"name\": \"str\" } ] "},{"title":"Upload prescription to Climate FieldView","type":1,"pageTitle":"Beta > Prescriptions Endpoints","url":"docs/beta_prescriptions_endpoints#upload-prescription-to-climate-fieldview","content":" POST /users/{leafUserId}/climateFieldView Upload a prescription using the Climate FieldView credentials of the LeafUserId. The file to be uploaded needs to be .zip and contain one of each of the following file extension: shp, dbf, shx; and all files must have the same name. The zip file cannot contain subfolders. Example:# A zip file named “prescription_rx_map”, containing the following files: prescription_rx_map.shpprescription_rx_map.dbfprescription_rx_map.shx cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -F 'file=prescription_rx_map.zip' \\ 'https://api.withleaf.io/services/beta/prescriptions/api/users/{leafUserId}/climateFieldView' Response# The response is json with the id of the file uploaded to the provider. Copy { \"id\": \"str\", \"name\": \"str\" } "},{"title":"List prescriptions from John Deere","type":1,"pageTitle":"Beta > Prescriptions Endpoints","url":"docs/beta_prescriptions_endpoints#list-prescriptions-from-john-deere","content":" GET /users/{leafUserId}/johnDeere List the existing prescriptions available in the provider. There is a required request param called organizationId for this endpoint to work. This property should be the id of the organization at JohnDeere. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/prescriptions/api/users/{leafUserId}/johnDeere?organizationId={organizationId}' Response# A json array of prescriptions available in this provider. Copy [ { \"id\": \"str\", \"name\": \"str\" }, { \"id\": \"str\", \"name\": \"str\" } ] "},{"title":"Upload prescription to John Deere","type":1,"pageTitle":"Beta > Prescriptions Endpoints","url":"docs/beta_prescriptions_endpoints#upload-prescription-to-john-deere","content":" POST /users/{leafUserId}/johnDeere Upload a prescription using the John Deere credentials of the LeafUserId. There is a required request param called organizationId for this endpoint to work. This property should be the id of the organization at JohnDeere. The file to be uploaded needs to be .zip and have a folder called \"Rx\" containing one of each of the following file extension: shp, dbf, shx; and all files must have the same name. The zip file cannot contain subfolders. Example:# A .zip file named “prescription_rx_map”, having a parent folder called \"Rx\", containing the following files: Rx/ prescription_rx_map.shpprescription_rx_map.dbfprescription_rx_map.shx cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -F 'file=prescription_rx_map.zip' \\ 'https://api.withleaf.io/services/beta/prescriptions/api/users/{leafUserId}/johnDeere?organizationId={organizationId}' Response# The response is json with the id of the file uploaded to the provider. Copy { \"id\": \"str\", \"name\": \"str\" } "},{"title":"Beta > Machines Endpoints","type":0,"sectionRef":"#","url":"docs/beta_machines_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Beta > Machines Endpoints","url":"docs/beta_machines_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/beta/api See below the REST resources and their endpoints available in this service. "},{"title":"Machines (BETA)","type":1,"pageTitle":"Beta > Machines Endpoints","url":"docs/beta_machines_endpoints#machines-beta","content":""},{"title":"Machine Resources","type":1,"pageTitle":"Beta > Machines Endpoints","url":"docs/beta_machines_endpoints#machine-resources","content":"This feature has the following endpoints available: Description\tEndpointsGet all machines\tGET /users/{leafUserId}/machines Create a machine\tPOST /users/{leafUserId}/machines Get a machine\tGET /users/{leafUserId}/machines/{machineId} Get machine files\tPATCH /users/{leafUserId}/machines/{machineId}/files Delete a machine\tDELETE /users/{leafUserId}/machines/{machineId} Update a machine\tPATCH /users/{leafUserId}/machines/{machineId} "},{"title":"Get all machines","type":1,"pageTitle":"Beta > Machines Endpoints","url":"docs/beta_machines_endpoints#get-all-machines","content":" GET /users/{leafUserId}/machines Get the list of machines that are related to a given LeafUserId. Some fields can be sent as query parameters to filter the machines, such as: Parameter (to filter by)\tValuesname\ttext provider\ttext (JohnDeere, CaseIH, Stara, etc) providerOrganizationId\ttext serialNumber\ttext originType\tspecify the origin of the machine, must be either USER_CREATED, FILE_POOLED or PROVIDER_POOLED createdTime\tmust match exactly the time of the record creation, ISO 8601 without timezone beforeCreatedTime\tfilters for records created before the datetime, ISO 8601 without timezone afterCreatedTime\tfilters for records created after the datetime, ISO 8601 without timezone vin\tfilters machines by Vehicle Identification Number You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetched (default is 0)size, an integer specifying the size of the page (max is 100)sort, the sorting order of the results; can be multivalue, the former takes precedence over the later; can also specify order as asc or desc with asc being the default. Example: id,desc Valid values for sorting are: id, leafUserId, name, provider, providerOrganizationId, providerMachineId, serialNumber, vin, model, make, category For more request examples see Leaf Postman collection cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/machines' Response# The response is a JSON array containing machine records. Copy [ { \"id\": \"UUID\", \"leafUserId\": \"UUID\", \"name\": \"str\", \"provider\": null, \"providerMachineId\": null, \"providerOrganizationId\": null, \"originType\": \"PROVIDER_POOLED\", \"createdTime\": \"2022-02-22T20:06:25.411Z\", \"serialNumber\": \"123456\", \"vin\": \"1234567890ABC\", \"model\": \"ModelName\", \"make\": \"MakerOfMachine\", \"category\": \"Sprayer\", \"modelYear\": 2000 }, { \"id\": \"UUID\", \"leafUserId\": \"UUID\", \"name\": \"str\", \"provider\": null, \"providerMachineId\": null, \"providerOrganizationId\": null, \"originType\": \"FILE_POOLED\", \"createdTime\": \"2022-02-22T20:06:25.411Z\", \"serialNumber\": \"123456\", \"vin\": \"1234567890ABC\", \"model\": \"ModelName\", \"make\": \"MakerOfMachine\", \"category\": \"Harvester\", \"modelYear\": 2020 } ] "},{"title":"Create a machine","type":1,"pageTitle":"Beta > Machines Endpoints","url":"docs/beta_machines_endpoints#create-a-machine","content":" POST /users/{leafUserId}/machines Creates a machine for a specific LeafUser. Request body# Copy { \"name\": \"str\" } cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"str\"}' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/machines' Response# A new machine is assigned to the given LeafUserId. Copy { \"id\": \"UUID\", \"leafUserId\": \"UUID\", \"name\": \"str\", \"provider\": null, \"providerMachineId\": null, \"providerOrganizationId\": null } "},{"title":"Get a machine","type":1,"pageTitle":"Beta > Machines Endpoints","url":"docs/beta_machines_endpoints#get-a-machine","content":" GET /api/users/{leafUserId}/machines/{machineId} Get the details of a given machine by its id. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/machines/{machineId}' Response# A machine record with more details. Copy { \"id\": \"UUID\", \"leafUserId\": \"UUID\", \"name\": \"str\", \"provider\": null, \"providerMachineId\": null, \"providerOrganizationId\": null, \"originType\": \"PROVIDER_POOLED\", \"createdTime\": \"2022-02-22T20:06:25.411Z\", \"serialNumber\": \"123456\", \"vin\": \"1234567890ABC\", \"model\": \"ModelName\", \"make\": \"MakerOfMachine\", \"category\": \"Sprayer\", \"modelYear\": 2000 } "},{"title":"Get machine files","type":1,"pageTitle":"Beta > Machines Endpoints","url":"docs/beta_machines_endpoints#get-machine-files","content":" GET /api/users/{leafUserId}/machines/{machineId}/files Get the details of machine operations files given a machine id. Some fields can be sent as query parameters to filter the machine files, such as: Parameter (to filter by)\tValuesleafFileId\tUUID originType\tspecify the origin of the machine, must be either USER_CREATED, FILE_POOLED or PROVIDER_POOLED createdTime\tan ISO 8601 without timezone specifying the operation exact created time beforeCreatedTime\tfilters for records created before the datetime, ISO 8601 without timezone afterCreatedTime\tfilters for records created after the datetime, ISO 8601 without timezone startTime\tmust match exactly the time of the start of the operation, ISO 8601 without timezone endTime\tmust match exactly the time of the end of the operation, ISO 8601 without timezone beforeStartTime\tan ISO 8601 without timezone, returns all operations that started before the specified time afterStartTime\tan ISO 8601 without timezone, returns all operations that started after the specified time beforeEndTime\tan ISO 8601 without timezone, returns all operations that ended before the specified time afterEndTime\tan ISO 8601 without timezone, returns all operations that ended after the specified time distanceValue\ta double value for the distance greaterThanDistanceValue\ta double value for the distance, returns all operations that have a distance value greater than the specified distance lessThanDistanceValue\ta double value for the distance, returns all operations that have a distance value lesser than the specified distance distanceUnit\tmust be \"Mile\", \"mile\", \"Feet\" or \"ft\" You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetched (default is 0)size, an integer specifying the size of the page (max is 100)sort, the sorting order of the results; can be multivalue, the former takes precedence over the later; can also specify order as asc or desc with asc being the default. Example: id,desc Valid values for sorting are: id, leafUserId, machineId, startTime, endTime, createdTime, leafFileId For more request examples see Leaf Postman collection cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/machines/{machineId}/files' Response# A json array containing the machine operations files details. Copy [ { \"id\": \"UUID\", \"leafFileId\": \"UUID\", \"machineId\": \"UUID\", \"startTime\": \"YYYY-mm-ddThh:mm:ssZ\", \"endTime\": \"YYYY-mm-ddThh:mm:ssZ\", \"distance\": { \"value\": float, \"unit\": \"ft\" }, \"fuelConsumption\": { \"value\": float, \"unit\": \"US gal\" } }, { \"id\": \"UUID\", \"leafFileId\": \"UUID\", \"machineId\": \"UUID\", \"startTime\": \"YYYY-mm-ddThh:mm:ssZ\", \"endTime\": \"YYYY-mm-ddThh:mm:ssZ\", \"distance\": { \"value\": float, \"unit\": \"ft\" }, \"fuelConsumption\": { \"value\": float, \"unit\": \"US gal\" } } ] "},{"title":"Delete a machine","type":1,"pageTitle":"Beta > Machines Endpoints","url":"docs/beta_machines_endpoints#delete-a-machine","content":" DELETE /api/users/{leafUserId}/machines/{machineId} Delete a machine data Only machines created by the user can be Deleted Machine data obtained from providers cannot be deleted cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/machines/{machineId}' "},{"title":"Update a machine","type":1,"pageTitle":"Beta > Machines Endpoints","url":"docs/beta_machines_endpoints#update-a-machine","content":" PATCH /api/users/{leafUserId}/machines/{machineId} Update a machine for a specific LeafUser. Only machines created by the user can be updated Machine data obtained from providers cannot be updated cURLPythonJavaScript Copy curl -X PATCH \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"str\"}' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/machines/{machineId}' "},{"title":"Configurations Overview","type":0,"sectionRef":"#","url":"docs/configurations_overview","content":"","keywords":""},{"title":"Field Boundary Management","type":1,"pageTitle":"Configurations Overview","url":"docs/configurations_overview#field-boundary-management","content":"fieldsAttachIntersection# Minimum intersection percentage between a field and an operation. An intersection proportion higher than this value will make the operation to be linked to the given field. This property supports a floating point between 0 and 100. The default value is 0.01. fieldsAutoMerge# Feature automatically merges fields that passes through the intersection parameter. Default value is true. fieldsAutoSync# If set to true, Leaf will automatically synchronize provider's fields. If set to false, synchronizations must be manually requested via endpoint. The default value is true. fieldsMergeIntersection# Minimum intersection between two fields to merge them. A new field of type MERGED will be created based in the intersection of the fields, while the original fields will be kept. This property supports a floating point between 0 and 100. The default value is 0.01. "},{"title":"Field Operations","type":1,"pageTitle":"Configurations Overview","url":"docs/configurations_overview#field-operations","content":"cleanupStandardGeojson# If set to true, Leaf will automatically remove invalid points from the standardGeoJSON file for operations. The default value is true. fieldOperationCreation# Enables the creation of Field Operations. The default is true. geoimagesColorRamp# The color ramp to be used when generating images of operations. It's a map from a percentage value to a list containing a color in RGB or RGBA. The last entry in the map must contain a value for the nv key, mapping to the color for null values. The default value is Copy { \"0%\" : [200, 0, 0], \"35%\" : [255, 40, 0], \"45%\" : [255, 150, 0], \"55%\" : [255, 240, 0], \"65%\" : [ 0, 230, 0], \"75%\" : [ 0, 190, 0], \"100%\": [ 0, 130, 0], \"nv\" : [ 0, 0, 0, 0] } geoimagesProjection# Projection to be used when generating images of operations. It can assume the values EPSG:3857 and EPSG:4326. The default value is EPSG:3857. geoimagesResolution# Resolution of the generated images of operations. The default value is 0.00001. geoimagesShape# Shape of points to be used when generating images of operations. It can assume the values ROUND and SQUARE. The default value is SQUARE. operationsAutoSync# If set to true, Leaf will automatically synchronize provider's operations. The default value is true. operationsFilteredGeojson# Enables the option to clear Field Operations data based on some filter options. Also enables the use of operations images V2. The default is false. operationsImageCreation# If set to true, Leaf will generate images of operations when processing them. If set to false, Leaf won't create the images. The default value is false. operationsMergeRange# Range used to consider if files are in the same operation. Default value is 5 days. operationsMergeRangeHarvested# Range used to consider if harvest files are in the same operation. Default value is 21 days. operationsOutliersLimit# Sets the threshold for removing outliers when the operationsRemoveOutliers configuration is enabled. The defined value will be considered to measure how many standard deviations will be considered as outliers. The default value is 3 which means that all points with harvested volume values ​​that are more than 3 standard deviations away from the mean will be removed. More info here. operationsProcessingRange# The retroactive time period (in months) to fetch file operations from providers. The default is 12 so only operations that occurred 12 months ago to present will be processed by Leaf. operationsRemoveOutliers# If enabled, it will remove points in the filteredGeojson based on harvest values so it is only applied to harvest type operations. The outliers will be defined based on the operationsOutliersLimit configuration. The default value is true. More info here. tip To use this option, operationsFilteredGeojson must be enabled. splitOperationsByField# If set to true, Leaf will split your Field Operations based on the intersection of each Leaf Field Boundary. The default value is false. "},{"title":"Machine File Conversion","type":1,"pageTitle":"Configurations Overview","url":"docs/configurations_overview#machine-file-conversion","content":"cleanupStandardGeojson# See this section for more information generateProviderImages# If set to true, Leaf will generate property images for files fetched from providers. Uploaded files are not affected by this change. The default value is false. Not to be confused with operationsImageCreation, which is specifically for Field Operations. geoimagesColorRamp# See this section for more information geoimagesProjection# See this section for more information geoimagesResolution# See this section for more information geoimagesShape# See this section for more information originalOperationData# If set to true, it will add to the File summary some non-standard properties, such as the field name and the type of the operation, as described originally by the provider. It is not applicable to the standard GeoJSON file or the Field Operation summary. The default value is false. Copy \"originalOperationData\": { \"originalOperationFarm\": \"Farm Green\", \"originalOperationField\": \"Field A\", \"originalOperationGrower\": \"Grower\", \"originalOperationType\": \"SowingAndPlanting\" } "},{"title":"Leaf Connect","type":0,"sectionRef":"#","url":"docs/Connect","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Leaf Connect","url":"docs/Connect#about","content":"The Leaf API allows an API Owner to grant permission to access Field Boundaries, Field Operations and Machine Data Files to other API Owners. The access is controlled at the Leaf user level by the API account that owns the data "},{"title":"How it works","type":1,"pageTitle":"Leaf Connect","url":"docs/Connect#how-it-works","content":"Scenario# API Owner A wants to grant permission to API Owner B to read their fields. 1 - Sharing Relation# The first step is to create a relationship between the API Owners, from who owns the data - the sender (API Owner A) to the receiver (API Owner B). Check the endpoint Create an API Owner sharing relation. The receiver API Owner (API Owner B) must confirm the relationship changing the relation status to ALLOWED. This relationship status can be changed in the future by both sides, but once the sender blocks the relationship, the receiver will not be able to access the data, nor to reactivate the sharing relation status. This step is only necessary once, that is, it is not necessary to repeat this step for new integrations with the same receiver. 2 - Permissions# In this step, permissions are granted for the resources of each Leaf user. More info here. Note: This permission is READ only and FIELDS and OPERATIONS resources are available. Company Company-level sharing is not supported, but the permission can be granted or revoked at the same time the Leaf user is added or removed from the company. 3 - Access# At the end of these steps, API Owner B will be able to visualize the fields, operations and/or machine data files from the shared Leaf user, using the existing field/operations/machine data files endpoints, like this one. "},{"title":"Endpoints","type":1,"pageTitle":"Leaf Connect","url":"docs/Connect#endpoints","content":"This service has the following endpoints available: Description\tEndpointsGet API Owner sharing relation\tGET /usermanagement/api/api-owners/sharing-relation/{RelationRole} Get API Owner sharing relation status\tGET /usermanagement/api/api-owners/sharing-relation/{RelationRole}/{targetApiOwner}/status Create an API Owner sharing relation\tPOST /usermanagement/api/api-owners/sharing-relation/receiver Update an API Owner sharing relation status\tPATCH /usermanagement/api/api-owners/sharing-relation/{RelationRole}/{targetApiOwner} Get LeafUser permissions\tGET /usermanagement/api/api-owners/sharing-relation/{RelationRole}/{TargetApiOwner}/users-permissions/{LeafUserId} Create a LeafUser permissions\tPOST /usermanagement/api/api-owners/sharing-relation/receiver/{ReceiverApiOwner}/users-permissions/{LeafUserId} Update LeafUser permissions\tPATCH /usermanagement/api/api-owners/sharing-relation/receiver/{ReceiverApiOwner}/users-permissions/{LeafUserId}/{RESOURCE} Delete LeafUser sharing permissions\tDELETE /usermanagement/api/api-owners/sharing-relation/{RelationRole}/{ReceiverApiOwner}/users-permissions/{LeafUserId} "},{"title":"Get API Owner sharing relation","type":1,"pageTitle":"Leaf Connect","url":"docs/Connect#get-api-owner-sharing-relation","content":" GET /usermanagement/api/api-owners/sharing-relation/{RelationRole} Get all API Owners relation based on the relation role: SENDER or RECEIVER. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/api-owners/sharing-relation/receiver' Response# A list of all sharing relations. Copy [ { \"senderApiOwner\": \"{senderApiOwner}\", \"receiverApiOwner\": \"{receiverApiOwner}\", \"status\": \"ALLOWED\" } ] "},{"title":"Get API Owner sharing relation status","type":1,"pageTitle":"Leaf Connect","url":"docs/Connect#get-api-owner-sharing-relation-status","content":" GET /usermanagement/api/api-owners/sharing-relation/{RelationRole}/{targetApiOwner}/status Get the relation status based in the relation role (SENDER or RECEIVER). Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/api-owners/sharing-relation/receiver/{ReceiverApiOwner}/status' Response# A string with one of the following values: PENDING, ALLOWED or BLOCKED. Copy \"PENDING\" "},{"title":"Create an API Owner sharing relation","type":1,"pageTitle":"Leaf Connect","url":"docs/Connect#create-an-api-owner-sharing-relation","content":" POST /usermanagement/api/api-owners/sharing-relation/receiver Create a sharing relation between the API Owners. Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"receiverApiOwner\": \"{ReceiverApiOwner}\" }' 'https://api.withleaf.io/services/usermanagement/api/api-owners/sharing-relation/receiver' Response# Copy { \"senderApiOwner\": \"{senderApiOwner}\", \"receiverApiOwner\": \"{receiverApiOwner}\", \"status\": \"PENDING\" } "},{"title":"Update an API Owner sharing relation status","type":1,"pageTitle":"Leaf Connect","url":"docs/Connect#update-an-api-owner-sharing-relation-status","content":" PATCH /usermanagement/api/api-owners/sharing-relation/{RelationRole}/{targetApiOwner} Update the sharing relation status. The values available are ALLOWED or BLOCKED. After the sender creates a relationship, the recevier must approve it by changing the status from PENDING to ALLOWED. Both API Owners can block the relation, but once locked by the sender, there is no way for the receiver to change it again. Request examples# cURLPythonJavaScript Copy curl -X PATCH \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"status\": \"ALLOWED or BLOCKED\" }' 'https://api.withleaf.io/services/usermanagement/api/api-owners/sharing-relation/receiver/{ReceiverApiOwner}' Response# Copy { \"senderApiOwner\": \"{senderApiOwner}\", \"receiverApiOwner\": \"{receiverApiOwner}\", \"status\": \"ALLOWED\" } "},{"title":"Get LeafUser permissions","type":1,"pageTitle":"Leaf Connect","url":"docs/Connect#get-leafuser-permissions","content":" GET /usermanagement/api/api-owners/sharing-relation/{RelationRole}/{TargetApiOwner}/users-permissions/{LeafUserId} Get all permissions granted to a receiver API Owner for a Leaf user. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/api-owners/sharing-relation/receiver/{ReceiverApiOwner}/users-permissions/{LeafUserId}' Response# Copy { \"permissions\": { \"FIELDS\": { \"actions\": [ \"READ\" ] } } } "},{"title":"Create a LeafUser permissions","type":1,"pageTitle":"Leaf Connect","url":"docs/Connect#create-a-leafuser-permissions","content":" POST /usermanagement/api/api-owners/sharing-relation/receiver/{ReceiverApiOwner}/users-permissions/{LeafUserId} Grants permission to a receiver for a given Leaf user resource. Note: shared Leaf users (from other API Owner) are not available for grant permissions Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{\"permissions\":{\"FIELDS\":{\"actions\":[\"READ\"]},\"OPERATIONS\":{\"actions\":[\"READ\"],\"types\":[\"PLANTED\"]}}}' 'https://api.withleaf.io/services/usermanagement/api/api-owners/sharing-relation/receiver/{ReceiverApiOwner}/users-permissions/{LeafUserId}' Response# Copy { \"leafUserId\": \"{LeafUserId}\", \"permissions\": { \"FIELDS\": { \"actions\": [ \"READ\" ] }, \"OPERATIONS\": { \"actions\": [ \"READ\" ], \"types\": [ \"PLANTED\" ] } } } Availability# Resource\tActions\tTypesFIELD\tREAD\t- OPERATIONS\tREAD\tAPPLIED, HARVESTED, PLANTED "},{"title":"Update LeafUser permissions","type":1,"pageTitle":"Leaf Connect","url":"docs/Connect#update-leafuser-permissions","content":" PATCH /usermanagement/api/api-owners/sharing-relation/receiver/{ReceiverApiOwner}/users-permissions/{LeafUserId}/{RESOURCE} Update the permissions granted to the receiver API Owner. Request examples# cURLPythonJavaScript Copy curl -X PATCH \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{\"actions\":[\"READ\"],\"types\":[\"PLANTED\", \"HARVESTED\"]}' \\ 'https://api.withleaf.io/services/usermanagement/api/api-owners/sharing-relation/receiver/{ReceiverApiOwner}/users-permissions/{LeafUserId}/OPERATIONS' Response# Copy { \"leafUserId\": \"{LeafUserId}\", \"permissions\": { \"FIELDS\": { \"actions\": [ \"READ\" ] }, \"OPERATIONS\": { \"actions\": [ \"READ\" ], \"types\": [ \"PLANTED\", \"HARVESTED\" ] } } } Availability# Resource\tActions\tTypesFIELD\tREAD\t- OPERATIONS\tREAD\tAPPLIED, HARVESTED, PLANTED "},{"title":"Delete LeafUser sharing permissions","type":1,"pageTitle":"Leaf Connect","url":"docs/Connect#delete-leafuser-sharing-permissions","content":" DELETE /usermanagement/api/api-owners/sharing-relation/{RelationRole}/{TargetApiOwner}/users-permissions/{LeafUserId} Deletes a permission. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/api-owners/sharing-relation/receiver/{ReceiverApiOwner}/users-permissions/{LeafUserId}' "},{"title":"Configurations Endpoints","type":0,"sectionRef":"#","url":"docs/configurations_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Configurations Endpoints","url":"docs/configurations_endpoints#about","content":"Here we list all the available endpoints from Configuration API. For easily calling them, we recommend using Leaf's Postman collection. All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/config/api This service has the following endpoints available: Description\tEndpointsGet API Owner's Configuration\tGET /configs Get Leaf User's Configuration\tGET /configs/{leafUserId} Create Leaf User's Configuration\tPOST /configs/{leafUserId} Update API Owner's Configuration\tPATCH /configs/{leafUserId} Update Leaf User's Configuration\tPATCH /configs/{leafUserId} Delete Leaf User's Configuration\tDELETE /configs/{leafUserId} "},{"title":"Endpoints","type":1,"pageTitle":"Configurations Endpoints","url":"docs/configurations_endpoints#endpoints","content":""},{"title":"Get API Owner's Configuration","type":1,"pageTitle":"Configurations Endpoints","url":"docs/configurations_endpoints#get-api-owners-configuration","content":" GET /configs Gets the configuration of the API Owner. cURLPythonJavaScript Copy TOKEN=YOUR_TOKEN curl -X GET \\ -H \"Authorization: Bearer ${TOKEN}\" \\ \"https://api.withleaf.io/services/config/api/configs\" Response# A JSON containing the configuration of the API Owner. Copy { \"apiOwnerUsername\": \"api-owner\", \"leafUserId\": \"\", \"operationsImageCreation\": true, \"geoimagesResolution\": 0.00001, \"geoimagesShape\": \"SQUARE\", \"geoimagesProjection\": \"EPSG:3857\", \"geoimagesColorRamp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0] }, \"fieldsAutoSync\": true, \"fieldsMergeIntersection\": 0.01, \"fieldsAttachIntersection\": 0.01 } "},{"title":"Get Leaf User's Configuration","type":1,"pageTitle":"Configurations Endpoints","url":"docs/configurations_endpoints#get-leaf-users-configuration","content":" GET configs/{leafUserId} Gets the configuration of a Leaf User. cURLPythonJavaScript Copy TOKEN=YOUR_TOKEN LEAF_USER_ID=00000000-0000-0000-0000-000000000000 curl -X GET \\ -H \"Authorization: Bearer ${TOKEN}\" \\ \"https://api.withleaf.io/services/config/api/configs/${LEAF_USER_ID}\" Response# A JSON containing the configuration of the Leaf User. Copy { \"apiOwnerUsername\": \"api-owner\", \"leafUserId\": \"00000000-0000-0000-0000-000000000000\", \"operationsImageCreation\": true, \"geoimagesResolution\": 0.00001, \"geoimagesShape\": \"SQUARE\", \"geoimagesProjection\": \"EPSG:3857\", \"geoimagesColorRamp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0] }, \"fieldsAutoSync\": true, \"fieldsMergeIntersection\": 0.01, \"fieldsAttachIntersection\": 0.01, \"fieldsAutoMerge\": true } "},{"title":"Create Leaf User's Configuration","type":1,"pageTitle":"Configurations Endpoints","url":"docs/configurations_endpoints#create-leaf-users-configuration","content":" POST /configs/{leafUserId} Creates the Configuration for the Leaf User leafUserId. A request body must be provided containing the configurations to be set. All entries are optional, any missing configuration will be inherited from the API Owner's Configuration. Request body example: Copy { \"operationsImageCreation\": true, \"fieldsAutoSync\": true } cURLPythonJavaScript Copy TOKEN=YOUR_TOKEN LEAF_USER_ID=00000000-0000-0000-0000-000000000000 curl -X POST \\ -H \"Authorization: Bearer ${TOKEN}\" \\ -H \"Content-Type: application/json\" \\ -d '{ \"operationsImageCreation\": true, \"fieldsAutoSync\": true }' \\ \"https://api.withleaf.io/services/config/api/configs/${LEAF_USER_ID}\" Response# A JSON containing the configuration of the Leaf User. Copy { \"apiOwnerUsername\": \"api-owner\", \"leafUserId\": \"00000000-0000-0000-0000-000000000000\", \"operationsImageCreation\": true, \"geoimagesResolution\": 0.00001, \"geoimagesShape\": \"SQUARE\", \"geoimagesProjection\": \"EPSG:3857\", \"geoimagesColorRamp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0] }, \"fieldsAutoSync\": true, \"fieldsMergeIntersection\": 0.01, \"fieldsAttachIntersection\": 0.01, \"fieldsAutoMerge\": true } "},{"title":"Update API Owner's Configuration","type":1,"pageTitle":"Configurations Endpoints","url":"docs/configurations_endpoints#update-api-owners-configuration","content":" PATCH /configs Updates the specified fields of Configuration for the API Owner. A resquest body must be provided containing the configurations to be set. All entries are optional. Request body example: Copy { \"operationsImageCreation\": true, \"fieldsAutoSync\": true } cURLPythonJavaScript Copy TOKEN = 'YOUR_TOKEN' curl -X PATCH \\ -H \"Authorization: Bearer ${TOKEN}\" \\ -H \"Content-Type: application/json\" \\ -d '{ \"operationsImageCreation\": true, \"fieldsAutoSync\": true }' \\ 'https://api.withleaf.io/services/config/api/configs' Response# A JSON containing the configuration of the API Owner. Copy { \"apiOwnerUsername\": \"api-owner\", \"leafUserId\": \"\", \"operationsImageCreation\": true, \"geoimagesResolution\": 0.00001, \"geoimagesShape\": \"SQUARE\", \"geoimagesProjection\": \"EPSG:3857\", \"geoimagesColorRamp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0] }, \"fieldsAutoSync\": true, \"fieldsMergeIntersection\": 0.01, \"fieldsAttachIntersection\": 0.01, \"fieldsAutoMerge\": true } "},{"title":"Update Leaf User's Configuration","type":1,"pageTitle":"Configurations Endpoints","url":"docs/configurations_endpoints#update-leaf-users-configuration","content":" PATCH /configs/{leafUserId} Updates the specified fields of Configuration for the Leaf User leafUserId. A resquest body must be provided containing the configurations to be set. All entries are optional. Request body example: Copy { \"operationsImageCreation\": true, \"fieldsAutoSync\": true } cURLPythonJavaScript Copy TOKEN=YOUR_TOKEN LEAF_USER_ID=00000000-0000-0000-0000-000000000000 curl -X PATCH \\ -H \"Authorization: Bearer ${TOKEN}\" \\ -H \"Content-Type: application/json\" \\ -d '{ \"operationsImageCreation\": true, \"fieldsAutoSync\": true }' \\ \"https://api.withleaf.io/services/config/api/configs/${LEAF_USER_ID}\" Response# A JSON containing the configuration of the Leaf User. Copy { \"apiOwnerUsername\": \"api-owner\", \"leafUserId\": \"00000000-0000-0000-0000-000000000000\", \"operationsImageCreation\": true, \"geoimagesResolution\": 0.00001, \"geoimagesShape\": \"SQUARE\", \"geoimagesProjection\": \"EPSG:3857\", \"geoimagesColorRamp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0] }, \"fieldsAutoSync\": true, \"fieldsMergeIntersection\": 0.01, \"fieldsAttachIntersection\": 0.01, \"fieldsAutoMerge\": true } "},{"title":"Delete Leaf User's Configuraiton","type":1,"pageTitle":"Configurations Endpoints","url":"docs/configurations_endpoints#delete-leaf-users-configuraiton","content":" DELETE /configs/{leafUserId} Deletes the Configuration from the Leaf User leafUserId. Until a new Configuration is created, the Leaf User will inherit all configurations from the API Owner. cURLPythonJavaScript Copy TOKEN=YOUR_TOKEN LEAF_USER_ID=00000000-0000-0000-0000-000000000000 curl -X DELETE \\ -H \"Authorization: Bearer ${TOKEN}\" \\ \"https://api.withleaf.io/services/config/api/configs/${LEAF_USER_ID}\" "},{"title":"Endpoints","type":0,"sectionRef":"#","url":"docs/converters_endpoints","content":"Please use our Uploaders endpoint We recommend using our file uploadendpoint, which converts files and includes more features like configuration, alerts, and operation images/maps.","keywords":""},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/converters_overview","content":"Please use our Uploaders endpoint We recommend using our file uploadendpoint, which converts files and includes more features like configuration, alerts, and operation images/maps.","keywords":""},{"title":"AgLeader Credentials","type":0,"sectionRef":"#","url":"docs/credentials_agleader","content":"","keywords":""},{"title":"AgLeader Credentials Endpoints","type":1,"pageTitle":"AgLeader Credentials","url":"docs/credentials_agleader#agleader-credentials-endpoints","content":""},{"title":"Get the AgLeader credentials","type":1,"pageTitle":"AgLeader Credentials","url":"docs/credentials_agleader#get-the-agleader-credentials","content":" GET /users/{leafUserId}/ag-leader-credentials  Get the AgLeader credentials of the Leaf User based on its id and returns a JSON with the credentials. If during background processing we detect that this credential is no longer valid, the value of the status will be changed.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/ag-leader-credentials' Response# Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"accessToken\": \"str\", \"refreshToken\": \"str\", \"publicKey\": \"str\", \"privateKey\": \"str\" } "},{"title":"Create a AgLeader credentials","type":1,"pageTitle":"AgLeader Credentials","url":"docs/credentials_agleader#create-a-agleader-credentials","content":" POST /users/{leafUserId}/ag-leader-credentials Create a AgLeader credentials for the Leaf User. Request body# Copy { \"accessToken\": \"str\", \"refreshToken\": \"str\", \"publicKey\": \"str\", \"privateKey\": \"str\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -H 'Content-Type: application/json' \\ -d '{ \"accessToken\": \"str\",\"refreshToken\": \"str\",\"publicKey\":\"str\", \"privateKey\":\"str\"}' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/ag-leader-credentials' Response# A AgLeader Credentials with status. Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"accessToken\": \"str\", \"refreshToken\": \"str\", \"publicKey\": \"str\", \"privateKey\": \"str\" } "},{"title":"Delete AgLeader credentials","type":1,"pageTitle":"AgLeader Credentials","url":"docs/credentials_agleader#delete-agleader-credentials","content":" DELETE /users/{leafUserId}/ag-leader-credentials Delete Leaf User's AgLeader credentials. Request examples# cURLJavaScriptPython Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/ag-leader-credentials' "},{"title":"Troubleshooting","type":1,"pageTitle":"AgLeader Credentials","url":"docs/credentials_agleader#troubleshooting","content":"With these endpoints, you can do some troubleshooting to see your credential's health. "},{"title":"Events","type":1,"pageTitle":"AgLeader Credentials","url":"docs/credentials_agleader#events","content":" GET /users/{leafUserId}/ag-leader-credentials/events Get the logs of the provider credential based on the LeafUserId sent. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId} /ag-leader-credentials/events' Response# Copy [ { \"body\": \"string\", \"createdDate\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"headers\": \"string\", \"id\": \"string\", \"statusCode\": \"int\" } ] warning The logs are available only for 30 days and once the credential is deleted or disassociated with the Leaf User, the logs are no longer available. "},{"title":"Agvance Credentials","type":0,"sectionRef":"#","url":"docs/credentials_agvance","content":"","keywords":""},{"title":"Agvance Credentials Endpoints","type":1,"pageTitle":"Agvance Credentials","url":"docs/credentials_agvance#agvance-credentials-endpoints","content":""},{"title":"Get the Agvance credentials","type":1,"pageTitle":"Agvance Credentials","url":"docs/credentials_agvance#get-the-agvance-credentials","content":" GET /users/{leafUserId}/agvance-credentials  Get the Agvance credentials of the Leaf User based on its id and returns a JSON with the credentials. If during background processing we detect that this credential is no longer valid, the value of the status will be changed.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/agvance-credentials' Response# Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"clientEnvironment\": \"STAGE or PRODUCTION\", \"username\": \"str\", \"password\": \"str\", \"databaseId\": \"str\", \"sessionId\": \"str\", \"apiKey\": \"str\" } "},{"title":"Create a Agvance credentials","type":1,"pageTitle":"Agvance Credentials","url":"docs/credentials_agvance#create-a-agvance-credentials","content":" POST /users/{leafUserId}/agvance-credentials Create a Agvance credentials for the Leaf User. Request body# Copy { \"apiKey\": \"str\", \"clientEnvironment\": \"STAGE or PRODUCTION\", \"databaseId\": \"str\", \"password\": \"str\", \"username\": \"str\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{\"apiKey\": \"str\", \"clientEnvironment\": \"STAGE or PRODUCTION\", \"databaseId\": \"str\", \"password\": \"str\", \"username\": \"str\"}' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/agvance-credentials' Response# A Agvance Credentials with status. Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"clientEnvironment\": \"STAGE or PRODUCTION\", \"username\": \"str\", \"password\": \"str\", \"databaseId\": \"str\", \"sessionId\": \"str\", \"apiKey\": \"str\" } "},{"title":"Delete Agvance credentials","type":1,"pageTitle":"Agvance Credentials","url":"docs/credentials_agvance#delete-agvance-credentials","content":" POST /users/{leafUserId}/agvance-credentials Delete Leaf User's Agvance credentials. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/agvance-credentials' "},{"title":"Troubleshooting","type":1,"pageTitle":"Agvance Credentials","url":"docs/credentials_agvance#troubleshooting","content":"With these endpoints, you can do some troubleshooting to see your credential's health. "},{"title":"Events","type":1,"pageTitle":"Agvance Credentials","url":"docs/credentials_agvance#events","content":" GET /users/{leafUserId}/agvance-credentials/events Get the logs of the provider credential based on the LeafUserId sent. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId} /agvance-credentials/events' Response# Copy [ { \"body\": \"string\", \"createdDate\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"headers\": \"string\", \"id\": \"string\", \"statusCode\": \"int\" } ] warning The logs are available only for 30 days and once the credential is deleted or disassociated with the Leaf User, the logs are no longer available. "},{"title":"Climate FieldView Credentials","type":0,"sectionRef":"#","url":"docs/credentials_cfv","content":"","keywords":""},{"title":"Climate Field View Credentials Endpoints","type":1,"pageTitle":"Climate FieldView Credentials","url":"docs/credentials_cfv#climate-field-view-credentials-endpoints","content":""},{"title":"Get the Climate Fieldview credentials","type":1,"pageTitle":"Climate FieldView Credentials","url":"docs/credentials_cfv#get-the-climate-fieldview-credentials","content":" GET /users/{leafUserId}/climate-field-view-credentials  Get the Climate FieldView credentials of the Leaf User based on its id and returns a JSON with the credentials. If during background processing we detect that this credential is no longer valid, the value of the status will be changed.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/climate-field-view-credentials' Response# Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"tokenMetadata\": {\"scopes\": [\"str\"]}, \"clientId\": \"str\", \"clientSecret\": \"str\", \"apiKey\": \"str\", \"refreshToken\": \"str\", \"accessToken\": \"str\" } "},{"title":"Create a Climate Fieldview credentials","type":1,"pageTitle":"Climate FieldView Credentials","url":"docs/credentials_cfv#create-a-climate-fieldview-credentials","content":" POST /users/{leafUserId}/climate-field-view-credentials Create a Climate FieldView credentials for the Leaf User. Request body# Copy { \"clientId\": \"str\", \"clientSecret\": \"str\", \"apiKey\": \"str\", \"refreshToken\": \"str\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{\"clientId\": \"str\",\"clientSecret\": \"str\",\"apiKey\": \"str\",\"refreshToken\": \"str\"}' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/climate-field-view-credentials' Response# A Climate FieldView credentials with status. Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"tokenMetadata\": {\"scopes\": [\"str\"]}, \"clientId\": \"str\", \"clientSecret\": \"str\", \"apiKey\": \"str\", \"refreshToken\": \"str\", \"accessToken\": \"str\" } "},{"title":"Delete Climate Fieldview credentials","type":1,"pageTitle":"Climate FieldView Credentials","url":"docs/credentials_cfv#delete-climate-fieldview-credentials","content":" DELETE /users/{leafUserId}/climate-field-view-credentials Delete Leaf User's Climate FieldView credentials. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/climate-field-view-credentials' "},{"title":"Troubleshooting","type":1,"pageTitle":"Climate FieldView Credentials","url":"docs/credentials_cfv#troubleshooting","content":"With these endpoints, you can do some troubleshooting to see your credential's health. "},{"title":"Events","type":1,"pageTitle":"Climate FieldView Credentials","url":"docs/credentials_cfv#events","content":" GET /users/{leafUserId}/climate-field-view-credentials/events Get the logs of the provider credential based on the LeafUserId sent. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId} /climate-field-view-credentials/events' Response# Copy [ { \"body\": \"string\", \"createdDate\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"headers\": \"string\", \"id\": \"string\", \"statusCode\": \"int\" } ] warning The logs are available only for 30 days and once the credential is deleted or disassociated with the Leaf User, the logs are no longer available. "},{"title":"CNHI Credentials","type":0,"sectionRef":"#","url":"docs/credentials_cnhi","content":"","keywords":""},{"title":"CNHI Credentials Endpoints","type":1,"pageTitle":"CNHI Credentials","url":"docs/credentials_cnhi#cnhi-credentials-endpoints","content":""},{"title":"Get the CNHI credentials","type":1,"pageTitle":"CNHI Credentials","url":"docs/credentials_cnhi#get-the-cnhi-credentials","content":" GET /users/{leafUserId}/cnhi-credentials  Get the CNHI credentials of the Leaf User based on its id and returns a JSON with the credentials. If during background processing we detect that this credential is no longer valid, the value of the status will be changed.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/cnhi-credentials' Response# Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"clientId\": \"str\", \"clientSecret\": \"str\", \"refreshToken\": \"str\", \"clientEnvironment\": \"STAGE or PRODUCTION\", \"subscriptionKey\": \"str\" } "},{"title":"Create a CNHI credentials","type":1,"pageTitle":"CNHI Credentials","url":"docs/credentials_cnhi#create-a-cnhi-credentials","content":" POST /users/{leafUserId}/cnhi-credentials Create a CNHI credentials for the Leaf User. Request body# Copy { \"clientId\": \"str\", \"clientSecret\": \"str\", \"subscriptionKey\": \"str\", \"refreshToken\": \"str\", \"clientEnvironment\": \"STAGE or PRODUCTION\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -H 'Content-Type: application/json' \\ -d '{\"clientId\": \"str\", \"clientSecret\": \"str\", \"subscriptionKey\": \"str\", \"refreshToken\": \"str\", \"clientEnvironment\": \"STAGE or PRODUCTION\"}' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/cnhi-credentials' Response# A CNHI credentials with status. Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"clientId\": \"str\", \"clientSecret\": \"str\", \"refreshToken\": \"str\", \"clientEnvironment\": \"STAGE or PRODUCTION\", \"subscriptionKey\": \"str\" } "},{"title":"Delete CNHI credentials","type":1,"pageTitle":"CNHI Credentials","url":"docs/credentials_cnhi#delete-cnhi-credentials","content":" DELETE /users/{leafUserId}/cnhi-credentials Delete Leaf User's CNHI credentials. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/cnhi-credentials' "},{"title":"Troubleshooting","type":1,"pageTitle":"CNHI Credentials","url":"docs/credentials_cnhi#troubleshooting","content":"With these endpoints, you can do some troubleshooting to see your credential's health. "},{"title":"Events","type":1,"pageTitle":"CNHI Credentials","url":"docs/credentials_cnhi#events","content":" GET /users/{leafUserId}/cnhi-credentials/events Get the logs of the provider credential based on the LeafUserId sent. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId} /cnhi-credentials/events' Response# Copy [ { \"body\": \"string\", \"createdDate\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"headers\": \"string\", \"id\": \"string\", \"statusCode\": \"int\" } ] warning The logs are available only for 30 days and once the credential is deleted or disassociated with the Leaf User, the logs are no longer available. "},{"title":"John Deere Credentials","type":0,"sectionRef":"#","url":"docs/credentials_john_deere","content":"","keywords":""},{"title":"John Deere Credentials Endpoints","type":1,"pageTitle":"John Deere Credentials","url":"docs/credentials_john_deere#john-deere-credentials-endpoints","content":""},{"title":"Get the John Deere credentials","type":1,"pageTitle":"John Deere Credentials","url":"docs/credentials_john_deere#get-the-john-deere-credentials","content":" GET /users/{leafUserId}/john-deere-credentials  Get the John Deere credentials of the Leaf User based on its id and returns a JSON with the credentials. If during background processing we detect that this credential is no longer valid, the value of the status will be changed.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/john-deere-credentials' Response# Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"tokenMetadata\": {\"scopes\": [\"str\"]}, \"clientKey\": \"str\", \"clientSecret\": \"str\", \"accessToken\": \"str\", \"refreshToken\": \"str\", \"clientEnvironment\": \"STAGE or PRODUCTION\" } "},{"title":"Create a John Deere credentials","type":1,"pageTitle":"John Deere Credentials","url":"docs/credentials_john_deere#create-a-john-deere-credentials","content":" POST /users/{leafUserId}/john-deere-credentials Create a John Deere credentials for the Leaf User. Request body# Copy { \"clientKey\": \"str\", \"clientSecret\": \"str\", \"refreshToken\": \"str\", \"clientEnvironment\": \"STAGE or PRODUCTION\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{\"clientKey\": \"str\",\"clientSecret\": \"str\",\"refreshToken\": \"str\",\"clientEnvironment\": \"STAGE or PRODUCTION\"}' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/john-deere-credentials' Response# A John Deere credentials with status. Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"tokenMetadata\": {\"scopes\": [\"str\"]}, \"clientKey\": \"str\", \"clientSecret\": \"str\", \"accessToken\": \"str\", \"refreshToken\": \"str\", \"clientEnvironment\": \"STAGE or PRODUCTION\" } "},{"title":"Delete John Deere credentials","type":1,"pageTitle":"John Deere Credentials","url":"docs/credentials_john_deere#delete-john-deere-credentials","content":" DELETE /users/{leafUserId}/john-deere-credentials Delete Leaf User's John Deere credentials. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/john-deere-credentials' "},{"title":"Troubleshooting","type":1,"pageTitle":"John Deere Credentials","url":"docs/credentials_john_deere#troubleshooting","content":"With these endpoints, you can do some troubleshooting to see your credential's health. "},{"title":"Events","type":1,"pageTitle":"John Deere Credentials","url":"docs/credentials_john_deere#events","content":" GET /users/{leafUserId}/john-deere-credentials/events Get the logs of the provider credential based on the LeafUserId sent. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId} /john-deere-credentials/events' Response# Copy [ { \"body\": \"string\", \"createdDate\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"headers\": \"string\", \"id\": \"string\", \"statusCode\": \"int\" } ] warning The logs are available only for 30 days and once the credential is deleted or disassociated with the Leaf User, the logs are no longer available. "},{"title":"Raven Credentials","type":0,"sectionRef":"#","url":"docs/credentials_raven","content":"","keywords":""},{"title":"Raven Credentials Endpoints","type":1,"pageTitle":"Raven Credentials","url":"docs/credentials_raven#raven-credentials-endpoints","content":""},{"title":"Get the Raven credentials","type":1,"pageTitle":"Raven Credentials","url":"docs/credentials_raven#get-the-raven-credentials","content":" GET /users/{leafUserId}/raven-credentials  Get the Raven credentials of the Leaf User based on its id and returns a JSON with the credentials. If during background processing we detect that this credential is no longer valid, the value of the status will be changed.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/raven-credentials' Response# Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"tokenMetadata\": {\"scopes\": [\"str\"]}, \"clientId\": \"str\", \"clientSecret\": \"str\", \"refreshToken\": \"str\", \"accessToken\": \"str\" } "},{"title":"Create a Raven credentials","type":1,"pageTitle":"Raven Credentials","url":"docs/credentials_raven#create-a-raven-credentials","content":" POST /users/{leafUserId}/raven-credentials Create a Raven credentials for the Leaf User. Request body# Copy { \"clientId\": \"str\", \"clientSecret\": \"str\", \"refreshToken\": \"str\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -H 'Content-Type: application/json' \\ -d '{ \"clientId\": \"str\",\"clientSecret\": \"str\",\"refreshToken\":\"str\"}' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/raven-credentials' Response# A Raven Credentials with status. Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"tokenMetadata\": {\"scopes\": [\"str\"]}, \"clientId\": \"str\", \"clientSecret\": \"str\", \"refreshToken\": \"str\", \"accessToken\": \"str\" } "},{"title":"Delete Raven credentials","type":1,"pageTitle":"Raven Credentials","url":"docs/credentials_raven#delete-raven-credentials","content":" DELETE /users/{leafUserId}/raven-credentials Delete Leaf User's Raven credentials. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/raven-credentials' "},{"title":"Troubleshooting","type":1,"pageTitle":"Raven Credentials","url":"docs/credentials_raven#troubleshooting","content":"With these endpoints, you can do some troubleshooting to see your credential's health. "},{"title":"Events","type":1,"pageTitle":"Raven Credentials","url":"docs/credentials_raven#events","content":" GET /users/{leafUserId}/raven-credentials/events Get the logs of the provider credential based on the LeafUserId sent. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId} /raven-credentials/events' Response# Copy [ { \"body\": \"string\", \"createdDate\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"headers\": \"string\", \"id\": \"string\", \"statusCode\": \"int\" } ] warning The logs are available only for 30 days and once the credential is deleted or disassociated with the Leaf User, the logs are no longer available. "},{"title":"Raven Slingshot Credentials","type":0,"sectionRef":"#","url":"docs/credentials_raven_slingshot","content":"","keywords":""},{"title":"Raven Slingshot Credentials Endpoints","type":1,"pageTitle":"Raven Slingshot Credentials","url":"docs/credentials_raven_slingshot#raven-slingshot-credentials-endpoints","content":""},{"title":"Get the Raven Slingshot credentials","type":1,"pageTitle":"Raven Slingshot Credentials","url":"docs/credentials_raven_slingshot#get-the-raven-slingshot-credentials","content":" GET /users/{leafUserId}/raven-slingshot-credentials  Get the Raven Slingshot credentials of the Leaf User based on its id and returns a JSON with the credentials. If during background processing we detect that this credential is no longer valid, the value of the status will be changed.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/raven-slingshot-credentials' Response# Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"apiKey\": \"str\", \"accessKey\": \"str\", \"sharedSecret\": \"str\" } "},{"title":"Create a Raven Slingshot credentials","type":1,"pageTitle":"Raven Slingshot Credentials","url":"docs/credentials_raven_slingshot#create-a-raven-slingshot-credentials","content":" POST /users/{leafUserId}/raven-slingshot-credentials Create a Raven Slingshot credentials for the Leaf User. Request body# Copy { \"apiKey\": \"str\", \"accessKey\": \"str\", \"sharedSecret\": \"str\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -H 'Content-Type: application/json' \\ -d '{ \"apiKey\": \"str\", \"accessKey\": \"str\", \"sharedSecret\": \"str\" }' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/raven-slingshot-credentials' Response# A Raven Slingshot Credentials with status. Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"apiKey\": \"str\", \"accessKey\": \"str\", \"sharedSecret\": \"str\" } "},{"title":"Delete Raven Slingshot credentials","type":1,"pageTitle":"Raven Slingshot Credentials","url":"docs/credentials_raven_slingshot#delete-raven-slingshot-credentials","content":" DELETE /users/{leafUserId}/raven-slingshot-credentials Delete Leaf User's Raven Slingshot credentials. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/raven-slingshot-credentials' "},{"title":"Troubleshooting","type":1,"pageTitle":"Raven Slingshot Credentials","url":"docs/credentials_raven_slingshot#troubleshooting","content":"With these endpoints, you can do some troubleshooting to see your credential's health. "},{"title":"Events","type":1,"pageTitle":"Raven Slingshot Credentials","url":"docs/credentials_raven_slingshot#events","content":" GET /users/{leafUserId}/raven-slingshot-credentials/events Get the logs of the provider credential based on the LeafUserId sent. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId} /raven-slingshot-credentials/events' Response# Copy [ { \"body\": \"string\", \"createdDate\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"headers\": \"string\", \"id\": \"string\", \"statusCode\": \"int\" } ] warning The logs are available only for 30 days and once the credential is deleted or disassociated with the Leaf User, the logs are no longer available. "},{"title":"Stara Credentials","type":0,"sectionRef":"#","url":"docs/credentials_stara","content":"","keywords":""},{"title":"Stara Credentials Endpoints","type":1,"pageTitle":"Stara Credentials","url":"docs/credentials_stara#stara-credentials-endpoints","content":""},{"title":"Get the Stara credentials","type":1,"pageTitle":"Stara Credentials","url":"docs/credentials_stara#get-the-stara-credentials","content":" GET /users/{leafUserId}/stara-credentials  Get the Stara credentials of the Leaf User based on its id and returns a JSON with the credentials. If during background processing we detect that this credential is no longer valid, the value of the status will be changed.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/stara-credentials' Response# Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"accessTokenClient\": \"str\", \"refreshToken\": \"str\", \"accessToken\": \"str\", \"apiKey\": \"str\" } "},{"title":"Create a Stara credentials","type":1,"pageTitle":"Stara Credentials","url":"docs/credentials_stara#create-a-stara-credentials","content":" POST /users/{leafUserId}/stara-credentials Create a Stara credentials for the Leaf User. Request body# Copy { \"apiKey\": \"str\", \"accessToken\": \"str\", \"accessTokenClient\": \"str\", \"refreshToken\": \"str\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -H 'Content-Type: application/json' \\ -d '{\"apiKey\": \"str\", \"accessToken\": \"str\", \"accessTokenClient\": \"str\", \"refreshToken\": \"str\"}' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/stara-credentials' Response# A Stara Credentials with status. Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"accessTokenClient\": \"str\", \"refreshToken\": \"str\", \"accessToken\": \"str\", \"apiKey\": \"str\" } "},{"title":"Delete Stara credentials","type":1,"pageTitle":"Stara Credentials","url":"docs/credentials_stara#delete-stara-credentials","content":" DELETE /users/{leafUserId}/stara-credentials Delete Leaf User's Stara credentials. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/stara-credentials' "},{"title":"Troubleshooting","type":1,"pageTitle":"Stara Credentials","url":"docs/credentials_stara#troubleshooting","content":"With these endpoints, you can do some troubleshooting to see your credential's health. "},{"title":"Events","type":1,"pageTitle":"Stara Credentials","url":"docs/credentials_stara#events","content":" GET /users/{leafUserId}/stara-credentials/events Get the logs of the provider credential based on the LeafUserId sent. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId} /stara-credentials/events' Response# Copy [ { \"body\": \"string\", \"createdDate\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"headers\": \"string\", \"id\": \"string\", \"statusCode\": \"int\" } ] warning The logs are available only for 30 days and once the credential is deleted or disassociated with the Leaf User, the logs are no longer available. "},{"title":"Sentera Credentials","type":0,"sectionRef":"#","url":"docs/credentials_sentera","content":"","keywords":""},{"title":"Sentera Credentials Endpoints","type":1,"pageTitle":"Sentera Credentials","url":"docs/credentials_sentera#sentera-credentials-endpoints","content":""},{"title":"Get the Sentera credentials","type":1,"pageTitle":"Sentera Credentials","url":"docs/credentials_sentera#get-the-sentera-credentials","content":" GET /users/{leafUserId}/sentera-credentials  Get the Sentera credentials of the Leaf User based on its id and returns a JSON with the credentials. If during background processing we detect that this credential is no longer valid, the value of the status will be changed.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/sentera-credentials' Response# Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"username\": \"str\", \"authToken\": \"str\", \"organizationId\": \"str\", \"organizationName\": \"str\" } "},{"title":"Create a Sentera credentials","type":1,"pageTitle":"Sentera Credentials","url":"docs/credentials_sentera#create-a-sentera-credentials","content":" POST /users/{leafUserId}/sentera-credentials Create a Sentera credentials for the Leaf User. Request body# Copy { \"username\": \"str\", \"password\": \"str\", \"organizationName\":\"str\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -H 'Content-Type: application/json' \\ -d '{ \"accessToken\": \"str\",\"refreshToken\": \"str\",\"privateKey\":\"str\", \"publicKey\":\"str\"}' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/sentera-credentials' Response# A Sentera Credentials with status. Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"username\": \"str\", \"authToken\": \"str\", \"organizationId\": \"str\", \"organizationName\": \"str\" } "},{"title":"Delete Sentera credentials","type":1,"pageTitle":"Sentera Credentials","url":"docs/credentials_sentera#delete-sentera-credentials","content":" DELETE /users/{leafUserId}/sentera-credentials Delete Leaf User's Sentera credentials. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/sentera-credentials' "},{"title":"Troubleshooting","type":1,"pageTitle":"Sentera Credentials","url":"docs/credentials_sentera#troubleshooting","content":"With these endpoints, you can do some troubleshooting to see your credential's health. "},{"title":"Events","type":1,"pageTitle":"Sentera Credentials","url":"docs/credentials_sentera#events","content":" GET /users/{leafUserId}/sentera-credentials/events Get the logs of the provider credential based on the LeafUserId sent. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId} /sentera-credentials/events' Response# Copy [ { \"body\": \"string\", \"createdDate\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"headers\": \"string\", \"id\": \"string\", \"statusCode\": \"int\" } ] warning The logs are available only for 30 days and once the credential is deleted or disassociated with the Leaf User, the logs are no longer available. "},{"title":"Trimble Credentials","type":0,"sectionRef":"#","url":"docs/credentials_trimble","content":"","keywords":""},{"title":"Trimble Credentials Endpoints","type":1,"pageTitle":"Trimble Credentials","url":"docs/credentials_trimble#trimble-credentials-endpoints","content":""},{"title":"Get the Trimble credentials","type":1,"pageTitle":"Trimble Credentials","url":"docs/credentials_trimble#get-the-trimble-credentials","content":" GET /users/{leafUserId}/trimble-credentials  Get the Trimble credentials of the Leaf User based on its id and returns a JSON with the credentials. If during background processing we detect that this credential is no longer valid, the value of the status will be changed.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/trimble-credentials' Response# Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"tokenMetadata\": {\"scopes\": [\"str\"]}, \"clientId\": \"str\", \"clientSecret\": \"str\", \"accessToken\": \"str\", \"refreshToken\": \"str\" } "},{"title":"Create a Trimble credentials","type":1,"pageTitle":"Trimble Credentials","url":"docs/credentials_trimble#create-a-trimble-credentials","content":" POST /users/{leafUserId}/trimble-credentials Create a Trimble credentials for the Leaf User. Request body# Copy { \"clientId\": \"str\", \"clientSecret\": \"str\", \"refreshToken\": \"str\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{\"clientId\": \"str\",\"clientSecret\": \"str\",\"refreshToken\": \"str\"}' 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/trimble-credentials' Response# A Trimble credentials with status. Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"tokenMetadata\": {\"scopes\": [\"str\"]}, \"clientKey\": \"str\", \"clientSecret\": \"str\", \"accessToken\": \"str\", \"refreshToken\": \"str\", \"clientEnvironment\": \"STAGE or PRODUCTION\" } "},{"title":"Delete Trimble credentials","type":1,"pageTitle":"Trimble Credentials","url":"docs/credentials_trimble#delete-trimble-credentials","content":" DELETE /users/{leafUserId}/trimble-credentials Delete Leaf User's Trimble credentials. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/trimble-credentials' "},{"title":"Troubleshooting","type":1,"pageTitle":"Trimble Credentials","url":"docs/credentials_trimble#troubleshooting","content":"With these endpoints, you can do some troubleshooting to see your credential's health. "},{"title":"Events","type":1,"pageTitle":"Trimble Credentials","url":"docs/credentials_trimble#events","content":" GET /users/{leafUserId}/trimble-credentials/events Get the logs of the provider credential based on the LeafUserId sent. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId} /trimble-credentials/events' Response# Copy [ { \"body\": \"str\", \"createdDate\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"headers\": \"str\", \"id\": \"str\", \"statusCode\": \"int\" } ] warning The logs are available only for 30 days and once the credential is deleted or disassociated with the Leaf User, the logs are no longer available. "},{"title":"Crop Monitoring Overview","type":0,"sectionRef":"#","url":"docs/crop_monitoring_overview","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Crop Monitoring Overview","url":"docs/crop_monitoring_overview#about","content":"Using Leaf's Crop Monitoring service you will be able to easily implement a satellite imagery application and compare the field health evolution over time. You can get historical images with Leaf. By default, Leaf retrieves images from 30 days prior to the creation of your field. But you can increase that to as far back in time as you want.Here's how  This API accepts field boundary polygons and returns processed, clipped, and color-corrected RGB, NDVI, and NDRE images every time there is a new image available. We also provide information like percent cloud coverage of the field, the data coverage percentage, and the tile source for each image as well. Currently, our Crop Monitoring service runs without a relationship between our Field Services, and the User Management Services. However, we are working to integrate it into the leafUser hierarchy, and the Fields Service. See the Satellite API Reference for more information. "},{"title":"Providers","type":1,"pageTitle":"Crop Monitoring Overview","url":"docs/crop_monitoring_overview#providers","content":"Leaf currently offers access to Sentinel-2 and PlanetScope images through its API. Here is a summary comparison between the providers: \tSentinel-2\tPlanetScopeSpatial resolution\t10 m - 60 m\t3 m Temporal resolution\t3 - 5 days\t1 day Spectral resolution\t12 bands\t4 - 5* bands * the number of bands will depend on the asset type requested For all providers, in addition to the images of the isolated bands, the RGB, NDVI, and NDRE composition are available:  "},{"title":"Crop Monitoring Endpoints","type":0,"sectionRef":"#","url":"docs/crop_monitoring_endpoints","content":"","keywords":""},{"title":"Endpoints","type":1,"pageTitle":"Crop Monitoring Endpoints","url":"docs/crop_monitoring_endpoints#endpoints","content":""},{"title":"Get all satellite fields","type":1,"pageTitle":"Crop Monitoring Endpoints","url":"docs/crop_monitoring_endpoints#get-all-satellite-fields","content":" GET /fields Returns paged results for all satellite fields registered. externalId: external ID used in the field's registrationgeometry: a valid MultiPolygon GeoJSON object with the geometry of the field cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields' Response# It returns a list of JSON objects Copy [ { \"externalId\": \"your field id\", \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [...] } \"providers\": [ \"sentinel\", \"planet\" ] }, ]  "},{"title":"Get a satellite field","type":1,"pageTitle":"Crop Monitoring Endpoints","url":"docs/crop_monitoring_endpoints#get-a-satellite-field","content":" GET /fields/{id} Fetches a field entry based on its external id. id: external ID used in the field's registrationgeometry: a valid MultiPolygon GeoJSON object with the geometry of the field cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields/YOUR_ID' Response# It returns a single JSON object with the following entries (like each item fromGET /fields results): Copy { \"externalId\": \"your field id\", \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [...] }, \"providers\": [ \"sentinel\", \"planet\" ] }  "},{"title":"Get images of satellite field","type":1,"pageTitle":"Crop Monitoring Endpoints","url":"docs/crop_monitoring_endpoints#get-images-of-satellite-field","content":" GET /fields/{id}/processes Returns images for a given field id. We return the following images, (tifs are EPSG:4326, pngs are EPSG:3857): RGB as tiff and as pngColorized NDVI as tiff and as pngRaw NDVI as tiffAll bands as tiff. Check the comparison page to identify the resolution and bands available for each provider. It is possible to filter the results by a number of different parameters: Parameter\tType\tDescription\tDefaultstartDate\tISO 8601 datetime format\tretrieve images taken after this day\t- endDate\tISO 8601 datetime format\tretrieve images taken until this day\t- startProcessedTimestamp\tISO 8601 datetime format\tretrieve images processed by Leaf after this day\t- endProcessedTimestamp\tISO 8601 datetime format\tretrieve images processed by Leaf until this day\t- maxClouds\tdouble between 0.0 and 100.0\tfilter processes with clouds less than or equal to this percentage\t100 minCoverage\tdouble between 0.0 and 100.0\tfilter processes with coverage greater than or equal to this percentage\t0.0 status\tstring \"SUCCESS\", \"FAILED\" or \"STARTED\"\tretrieve images with selected status\tSUCCESS page\tinteger\tpage being fetched\t0 size\tinteger\thow many processes (sets of all images) to return per page\t20 providers\tarray of string\tsentinel or/and planet\tIf none is defined, it will created with sentinel only Important Default page is page 0 and default size is 20. So, to see more images, you can either increase the size or the page number. cURLPythonJavaScript Copy curl -X GET \\ --header 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields/YOUR_ID/processes?startDate=2020-06-03&endDate=2020-06-10' Response# Copy [ { \"id\": 0, \"date\": \"2020-06-03T19:03:57.882Z\", \"clouds\": 0, \"provider\": \"sentinel\", \"bucketName\": \"sentinel-s2-l1c\", \"bucketKey\": \"tiles/10/S/FH/2020/6/3/0\", \"bucketRegion\": \"eu-central-1\", \"status\": \"SUCCESS\", \"coverage\": 100, \"images\": [ { \"url\": \"url.to.your.image.tif\", \"type\": \"tif\", \"resolution\": 20 }, # etc... ], \"processedTimestamp\": \"2020-06-03T19:03:58.881731Z\" }, # etc... ] date: the date of the satellite imageclouds: cloud coverage percentage of the field, from 0 to 100provider: the satellite provider (sentinel or planet) from where this process was created.bucketName: name of satellite image bucket where the original tile is. Usuallysentinel-s2-l1c or leaf-planet-images-prdbucketRegion: AWS region of original image's bucket. Usually eu-central-1bucketKey: base path of original satellite imagestatus: status of the process. It will be either SUCCESS or FAILUREcoverage: data coverage percentage of the field, from 0 to 100images: each image in this list will have the following data: url: URL of the imagetype: the type of the image. One of tif, ndvi, png andtif_colorizedresolution: resolution, in meters, of the image. See table below processedTimestamp: the timestamp of when the process was processed   GET /fields/{id}/processes/{id} "},{"title":"Get an image of satellite field","type":1,"pageTitle":"Crop Monitoring Endpoints","url":"docs/crop_monitoring_endpoints#get-an-image-of-satellite-field","content":"Returns a single process for the field. cURLPythonJavaScript Copy curl -X GET \\ --header 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields/YOUR_ID/processes/{id}' Response# Copy { \"id\": 0, \"date\": \"2020-06-03T19:03:57.882Z\", \"clouds\": 0, \"provider\": \"sentinel\", \"bucketName\": \"sentinel-s2-l1c\", \"bucketKey\": \"tiles/10/S/FH/2020/6/3/0\", \"bucketRegion\": \"eu-central-1\", \"status\": \"SUCCESS\", \"coverage\": 100, \"images\": [ { \"url\": \"url.to.your.image.tif\", \"type\": \"tif\", \"resolution\": 20 }, # etc... ], \"processedTimestamp\": \"2020-06-03T19:03:58.881731Z\" }  "},{"title":"Create a satellite field","type":1,"pageTitle":"Crop Monitoring Endpoints","url":"docs/crop_monitoring_endpoints#create-a-satellite-field","content":" POST /fields Creates a new field It will be continuously monitored forever, and new images will arrive based on the provider selected, because each one of them has a different temporal resolution (time it takes for the satellite to go over the same field when orbiting the Earth). If you don't need the field anymore, you candelete the field. Note By default, Leaf will return images for your field from the last 30 days (from the moment you create the field). You can change that by including a \"startDate\" or a \"daysBefore\" to the body There are two ways you can do that: set a startDate (ISO, \"yyyy-mm-dd\") meaning Leaf will return all images for your field since this date. set how many daysBefore (an integer greater than or equal to 0) you want to get images from. Note that they are both optional, but you can not specify both. Now let's see the Payload Payload# The payload of this object should be like the following: Copy { \"externalId\": \"your field id\", \"startDate\": \"2019-01-01\", \"providers\": [\"sentinel\", \"planet\"], \"assetType\": \"analytic_sr\" \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [...] } } externalId: external ID used in the field's registration.geometry: a valid MultiPolygon GeoJSON object with the geometry of the field.providers: Specify the satellite imagery source, if none is specified, Sentinel images will be retrived by default.assetType: If the providers property contains planet you can select which assetType will be retrived. Default value is analytic_sr. cURLPythonJavaScript Copy curl -X POST \\ -H 'Content-Type: application/json' \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ your payload }' \\ 'https://api.withleaf.io/services/satellite/api/fields' field size limit the field cannot be larger than 50k hectares (123k acres) andcannot have a perimeter bigger than 300km (180 miles). Sample geometry# If you are looking for a geometry for testing purposes you can use this one. Copy { \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [[[ -48.95275447, -22.49608], [ -48.95379286, -22.49675703], [ -48.9591836, -22.50310243], [ -48.96225525, -22.5067235], [ -48.94852019, -22.50648371], [ -48.94780839, -22.49693998], [ -48.95275447, -22.49608] ]]] } }  "},{"title":"Delete a satellite field","type":1,"pageTitle":"Crop Monitoring Endpoints","url":"docs/crop_monitoring_endpoints#delete-a-satellite-field","content":" DELETE /fields/{id} Deletes the field from our database. warning Note that the field deletion is irreversible and all images will be lost. (But you can always create a new field and get images from the past, as far as you want). cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields/YOUR_ID' "},{"title":"Get subscription for Planet","type":1,"pageTitle":"Crop Monitoring Endpoints","url":"docs/crop_monitoring_endpoints#get-subscription-for-planet","content":" GET /fields/{id}/subscription Get the subscription from Planet. It returns the assetTypes, itemTypes and startDate for a field. cURLPythonJavaScript Copy curl -X GET \\ --header 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields/YOUR_ID/subscription' Response# Copy { \"planetAssetTypes\": [ \"analytic_sr\" ], \"planetItemTypes\": [ \"PSOrthoTile\" ], \"startDate\": \"2022-04-01T00:00:00Z\" } "},{"title":"Reprocess satellite images","type":1,"pageTitle":"Crop Monitoring Endpoints","url":"docs/crop_monitoring_endpoints#reprocess-satellite-images","content":" POST /fields/{id}/process/{id}/reprocess Allows reprocessing the satellite images based on a processId. cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/fields/{id}/process/{id}/reprocess' "},{"title":"Alerts","type":1,"pageTitle":"Crop Monitoring Endpoints","url":"docs/crop_monitoring_endpoints#alerts","content":"With Alerts you can be notified when something happens or changes instead of needing to repeatedly query for changes. Leaf Alerts support events that happen within Leaf and events that happen within supported 3rd party software. "},{"title":"List of Crop Monitoring Events","type":1,"pageTitle":"Crop Monitoring Endpoints","url":"docs/crop_monitoring_endpoints#list-of-crop-monitoring-events","content":"Leaf Crop Monitoring Service can Alert you on these events: list of Crop Monitoring Events "},{"title":"Planet Overview","type":0,"sectionRef":"#","url":"docs/crop_monitoring_planet_overview","content":"","keywords":""},{"title":"Available asset types","type":1,"pageTitle":"Planet Overview","url":"docs/crop_monitoring_planet_overview#available-asset-types","content":"analytic_sr# Atmospherically corrected surface reflectance GeoTiff product. File\tBand nameblue.tif\tBlue green.tif\tGreen red.tif\tRed nir.tif\tNear-infrared analytic_5b#  Radiometrically calibrated GeoTiff product suitable for analytic applications. Has 5 analytic bands, including red-edge.  File\tBand nameblue.tif\tBlue green.tif\tGreen red.tif\tRed rededge.tif\tRed-Edge nir.tif\tNear-infrared udm2# Usable Data Mask 2.0. Fileclear_map.tif snow_map.tif shadow_map.tif light_haze_map.tif heavy_haze_map.tif cloud_map.tif confidence_map.tif "},{"title":"PSOrthoTile","type":1,"pageTitle":"Planet Overview","url":"docs/crop_monitoring_planet_overview#psorthotile","content":"More info at Planet documentation. "},{"title":"Sentinel Overview","type":0,"sectionRef":"#","url":"docs/crop_monitoring_sentinel_overview","content":"","keywords":""},{"title":"Clouds","type":1,"pageTitle":"Sentinel Overview","url":"docs/crop_monitoring_sentinel_overview#clouds","content":"We use the cloud mask provided by Sentinel-2 to calculate the clouds coverage percentage. See the Crop Monitoring API Reference for more information. "},{"title":"Crops","type":0,"sectionRef":"#","url":"docs/crops","content":"Here is a list of all the crops we currently support. The most common are \"corn\" and \"soybeans\". Crop String\"none\" \"alfalfa\" \"barley\" \"edible beans\" \"navy beans\" \"canola\" \"flax\" \"grass seeds\" \"lentils\" \"millet\" \"mustard\" \"oats\" \"black eyed peas\" \"field peas\" \"yellow popcorn\" \"white popcorn\" \"rapeseed\" \"rice long\" \"rice medium\" \"rye\" \"safflower\" \"sorghum\" \"sunflower oil\" \"sunflower stripe\" \"durum wheat\" \"hard red spring wheat\" \"hard red winter wheat\" \"soft red winter wheat\" \"white wheat\" \"chickpeas\" \"lupins\" \"european spring barley\" \"european winter barley\" \"european barley 6\" \"european corn\" \"european oats\" \"european peas\" \"european popcorn\" \"rapeseed e ind\" \"european rye\" \"sunflower e ind\" \"sunflower e oil\" \"european triticale\" \"european wheat feed\" \"european wheat wtr\" \"rapeseed e oil\" \"asparagus\" \"balm\" \"beets\" \"belgian endive\" \"broad beans\" \"broccoli\" \"brussels sprouts\" \"buckwheat\" \"cabbage lettuce\" \"caraway seed\" \"carrots\" \"castor beans\" \"cauliflower\" \"celery\" \"chervil\" \"chicory\" \"chinese cabbage\" \"clover\" \"corn silage\" \"corn cob mix\" \"corn salad\" \"crambe\" \"cucumber\" \"digitalis lanate\" \"dill\" \"elephant grass\" \"endives\" \"english rye grass\" \"evening primrose\" \"field meadow grass\" \"fodder beet\" \"french beans\" \"gherkin\" \"ginseng\" \"grain maize\" \"grass forage\" \"grassland\" \"green cabbage\" \"green peas\" \"hard fescue grass\" \"haricot beans\" \"headed cabbage\" \"hemp\" \"hops\" \"hypericum\" \"iceberg salad\" \"italian rye grass\" \"jerusalem artichoke\" \"kale\" \"leek\" \"lettuce\" \"lucerne\" \"lupine\" \"marowfat peas\" \"melon\" \"mushrooms\" \"onions\" \"oregano\" \"parsley\" \"peanuts\" \"picklers\" \"poppy seed\" \"sweet potatoes\" \"potatoes for chips\" \"potatoes for retail\" \"potatoes for starch\" \"pumpkins\" \"radicchio\" \"raddice\" \"red beet\" \"red cabbage\" \"red fescue grass\" \"red kidney beans\" \"rettich\" \"rhubarb\" \"salad\" \"savoy cabbage\" \"scorzonera\" \"seed potatoes\" \"sesame\" \"shallots\" \"silver onions\" \"spear grass\" \"spinach\" \"strawberries\" \"stubbel tuber\" \"sugarbeet\" \"sugar cane\" \"sugar corn\" \"tankard turnip\" \"tick beans\" \"tobacco\" \"tomatoes\" \"tuber fennel\" \"turnip cabbage\" \"turnip rooted celery\" \"vetch\" \"white beans\" \"white cabbage\" \"wood carrot\" \"set aside\" \"hyracinth\" \"tulip\" \"narcissus\" \"gladiolus\" \"crocus\" \"lily\" \"iris\" \"dahlia\" \"apples\" \"pears\" \"peaches\" \"apricots\" \"melons tree\" \"oranges\" \"lemons\" \"almonds\" \"vines\" \"olives\" \"jalapeno\" \"cantaloupe\" \"honeydew\" \"squash\" \"green beans\" \"lima beans\" \"sweet corn\" \"canary seed\" \"corn\" \"soybeans\" \"cotton\" \"boot stage wcs\" \"energy cane\" \"mung bean\" \"sudangrass\" \"canola polish\" \"mustard gisilba\" \"lentil crimson\" \"lentil eston\" \"lentil chilean\" \"lentil laird\" \"pea trapper\" \"unspecified crop\" \"garlic\" \"rutabaga\" \"macadamia\" \"pecan\" \"walnut\" \"blueberry\" \"cranberry\" \"raspberry\" \"watermelon\" \"orchardgrass\" \"downy bromegrass\" \"smooth bromegrass\" \"reed canary grass\" \"tall fescue\" \"timothy grass\" \"bermuda grass\" \"festulolium\" \"grass clover\" \"grass alfalfa\" \"forage mix\"","keywords":""},{"title":"Field Boundary Management Endpoints","type":0,"sectionRef":"#","url":"docs/field_boundaries_endpoints","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"Field Boundary Management Overview","type":0,"sectionRef":"#","url":"docs/field_boundaries_overview","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"Field Boundary Management Overview","type":0,"sectionRef":"#","url":"docs/field_boundary_management_overview","content":"With Leaf, you can import, export, create, and manage Field Boundaries from all major agriculture brands. We provide a quickstart Postman collectionto help you get started. To make calls to Leaf's API, you will need a Leaf account. If you don't have one yet, please create your Leaf account and get your token. You can integrate with many different companies, and you only have to do it once per user. To connect, you just choose the company you wish to connect to and follow these 3 steps: Get the authentication URL of company you want to connect.Get your token and your user's token.Add credentials to Leaf. Now you can opt to connect more companies or Create a Leaf User and attach these credentials so Leaf can represent your user internally and allow you to query for them and their permissioned-data. All set! Leaf automatically detects existing fields in each company's platform. This works together with Leaf's Operations Data. Operations performed in the fields will automatically be bound to the fields you create with Field Boundaries. Leaf uses a Grower/Farm/Field hierarchy to store data. Below please find a breakdown of these concepts and how they relate to one another: Fields are the central concept of this section. Every Field may have boundaries, which are the geometries that defines its borders. A Field can have only one active boundary, that defines its current border.Most Fields are part of a Farm and every Farm can have one or more Fields.Farms can be grouped together under a Grower.A grower (also known as Leaf User) is the data owner entity to which credentials are attached.Files or Operations are the results of operations in a given Field.","keywords":""},{"title":"Crops Table","type":0,"sectionRef":"#","url":"docs/files_crops_table","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"Endpoints","type":0,"sectionRef":"#","url":"docs/files_endpoints","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"Geo Images","type":0,"sectionRef":"#","url":"docs/files_images","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Geo Images","url":"docs/files_images#about","content":"This service permits to generate images for files. It can be used to test the color ramp values. All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/images/api This service has the following endpoints available: Description\tEndpointsCreate images\tPOST /images "},{"title":"Create images","type":1,"pageTitle":"Geo Images","url":"docs/files_images#create-images","content":" POST /images Gets a paged list of operations that belong to the current logged in user. It is possible to filter the results by passing some query parameters. They are listed below. Parameter\tValuescolorRamp\tthe ranges for the color ramp projection\tEPSG_3857 resolution\t>0 shape\tROUND, JohnDeere, Trimble, ClimateFieldView, AgLeader or Leaf Request examples# Copy { \"colorRamp\": { \"0%\" : [200, 0, 0], \"35%\" : [255, 40, 0], \"45%\" : [255, 150, 0], \"55%\" : [255, 240, 0], \"65%\" : [ 0, 230, 0], \"75%\" : [ 0, 190, 0], \"100%\": [ 0, 130, 0], \"nv\" : [ 0, 0, 0, 0] }, \"projection\": \"EPSG_3857\", \"resolution\": 1, \"shape\": \"ROUND\" } You can also pass some parameters used exclusively for paging through results. They are: cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations' Response# The response will be the URL of new image in PNG format. https://api.withleaf.io/services/geoimages/api/images/a84e6627-4526-4560-a0ac-47eb57865a03/harvestMoisture "},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/files_overview","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/files_postman","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Overview","url":"docs/files_postman#overview","content":"Leaf's Operation Data API returns aggregated, cleaned, and standardized data from all major machine data brands in a simple JSON response. This tutorial will walk through how to create a Leaf user, securely authenticate with their chosen platforms, and receive auto-updating data from all of them with a single request. We also provide a quickstart Postman collection so you can follow along easily. To make calls to Leaf's API, you will need a Leaf account. If you don't have one yet, please create your Leaf account and get your token. You can integrate with many different companies, and you only have to do it once for each user. To connect, you just choose the company you wish to connect to and follow these 3 steps: Get the authentication URL of company you want to connect toGet yours and your user's tokensAdd credentials to Leaf Now you can opt to connect to more companies or Create a Leaf User and attach these credentials, so that Leaf can represent your user internally and you can query specifically for them and their data. All set! Leaf automatically detects and starts processing new files. You can access in \"Get Operation Files\". "},{"title":"Roadmap","type":1,"pageTitle":"Overview","url":"docs/files_postman#roadmap","content":"Today, you can to connect to these companies: John Deere (Medium)Climate FieldView (Medium)CNHiTrimble Coming in the third quarter of 2020: RavenAGCO Coming in the fourth quarter of 2020: AgLeaderStara "},{"title":"John Deere","type":1,"pageTitle":"Overview","url":"docs/files_postman#john-deere","content":"This section will show you how you can integrate Leaf's API with you John Deere account and start using our operations service. Grab our quickstartPostman collection and follow along! 1. Get John Deere auth URL# In Step 1 we will be generating tokens from John Deere. The goal In step 2 is we will get our John Deere token_id and token_secret. Token Verifier# In step 1 we will get a temporary \"token verifier\" from John Deere that confirms an user’s authentication of your application to access their John Deere data and generate credentials. We get that verifier by going through their authentication flow (OAuth2). Before generating the authentication URL, please: Update current value of jd_client_key to your app's client key on John DeereUpdate current value of jd_client_secret to your app's client secret on John DeereUpdate current value of jd_callback_url to your app's callback_url on John Deere Then, to generate the authentication URL your application will send to your user so they can authorize access to their account files you can use the included step 2 in the Postman Collection. Change client_key and client_ secretvariables to yours received from John Deere when you created an app on your developer account with them and redirect_uri to a uri the \"token verifier\" will be sent after the user authorizes your application. Hit Send. Redirect your user to the url included in the response. They will authenticate and be redirected to the redirect_url. Copy the entire url you were redirected to. It looks like: Copy https://withleaf.io/?oauth_token=TOKEN&oauth_verifier=CODE Paste it in the environment variable jd_response_url. 2. Get John Deere Tokens# After updating the jd_response_url in Postman you can submit your credentials and receive your tokens. Hit Send token_id and token_secret_key will be automatically transferred tojd_token_id and jd_token_secret environment variables and will be used in the next step. 3. Add John Deere credentials# Now we can create a Developer-User pair credentials ID that will allow you to access your user’s John Deere data. We first add the John Deere credentials to Leaf API. Hit Send All the info needed has already been filled automatically in Step 2. An id for the credentials you just created will be returned. This id will be automatically transferred to the value of jd_credentials_id to be used in the next step. "},{"title":"Climate Field View","type":1,"pageTitle":"Overview","url":"docs/files_postman#climate-field-view","content":"Grab our quickstart Postman collection and follow along! 1. Get Climate Field View auth URL# We will be generating a url to redirect your user to authenticate with Climate. Update environment variables cfv_client_id and cfv_client_secret to your Climate Field View developer account credentials. Update environment variable cfv_redirect_url to your application's backend Redirect your user to the script's output url. They will authenticate and be redirected to the redirect_uri. A code will be sent to that cfv_redirect_url. We will need this code Step 2. Copy the code value. note: this code expires after 1 minute. Paste code value to environment variable cfv_code 2. Get Climate Field View tokens# Hit \"Send\" A lot of information will be returned. The important ones are access_tokenand refresh_token. These will be automatically transferred tocfv_access_token and cfv_refresh_token environment variables and will be used in the next step. 3. Add Climate Field View credentials# Now we can create a Developer-User pair credentials ID that will allow you to access your user’s Climate data. We first add the Climate credentials to Leaf API, to do that: Hit \"Send\" An id for the credentials you just created will be returned. This id will be automatically transferred to the value of cfv_credentials_id to be used in the next step. "},{"title":"Leaf User","type":1,"pageTitle":"Overview","url":"docs/files_postman#leaf-user","content":"Create Leaf User# Now we have to attach credentials to a Leaf User. To do so, we can create a Leaf user and attach our John Deere and/or Climate Field View credentials via the credentials id. We can also attach credentials from other companies to this same user to query all available data by Grower/Farm/Field regardless of brand. Update (optional) fields \"address\", \"email\", \"name\" and \"phone\" with your user's information. We have automatically included our jd_credentials_id to this call and attached it to this user. Hit \"Send\" Along with other information returned, there is an \"id\". This \"id\" is theleaf_user_id that will be used in the next (final) Step to query and access files. Update Leaf User# To update a Leaf User, let's say to add another provider credentials or change the user's address, we can use this PUT request. Since this method overwrites, remember to send all the user's information along with the information you want to add or update. For example, if you want to add John Deere credentials to a user that already has ClimateFieldView credentials, remember to specify both credentials ids. Get specific Leaf User# Get specific Leaf User With this endpoint you can query all information on a specific Leaf User, such as their address, email, credentials, etc. To do so, update the value of the environment variable leaf_user_id to the Leaf User id you want to query. Gel all Leaf Users# Get all Leaf Users With this endpoint you can query all information on all your Leaf Users, such as their address, email, credentials, etc. Just hit 'send'. "},{"title":"Query Operations by Field","type":1,"pageTitle":"Overview","url":"docs/files_postman#query-operations-by-field","content":"To query all operations that happened in a specific field (step 2), we first need to create that field (step 1). Then, Leaf will automatically detect operations of that field based on the operations' and on the field's coordinates. This process usually takes about 30 minutes. 1. Create Field# Here we need to specify a leafUserId (that will be the Leaf User owner of that field), a externalId (that will be the name we give to the field) and the geojson geometry of the field (location). After creating the field we can query it (step 2) 2. Get operations' ids by Field# To query all operations that happened in a specific field, just update the environment variable field_external_id to the field id you want to query files. "},{"title":"Merge Operation Files","type":1,"pageTitle":"Overview","url":"docs/files_postman#merge-operation-files","content":"1. Merge files# Merging files with Leaf is a very simple process. You just have to list, in the request json body, the ids of the files you want to merge. Make sure the operations are of the same type (APPLIED or HARVESTED or PLANTED), so the results are consistent. After that, just hit \"send\" and an id for that merged file will be returned. You can query that file as any other. It will be listed when you query for all files and can also be queried specifically by its id 2. Query & access specific file# You can query a merged file as any other. It will be listed when you query for all files and can also be queried specifically by its id. So this request is the same as seen on \"Get Operation Files\". You just have to update the environment variable \"id\" to the id of the merged file. Keep in mind that merging files is processing-heavy and may take about 20 minutes to finish. "},{"title":"Sample responses","type":0,"sectionRef":"#","url":"docs/files_sample_output","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/introduction","content":"Welcome to Leaf's Documentation! Food and Agriculture developers use Leaf's API to access clean, standardized, and aggregated Farm data from all major sources. Use theQuickstart section to help you start accessing sample farm data quickly, easily, and securely. We have implementation examples in cURL, Python and NodeJS! tip Please don't hesitate to contact us to schedule a demo, ask a question, request sample data, or suggest a feature!","keywords":""},{"title":"Leaf Link > File upload widget","type":0,"sectionRef":"#","url":"docs/Link_file_upload","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Leaf Link > File upload widget","url":"docs/Link_file_upload#overview","content":"This widget allows the user to upload different machine files formats for conversion using the Leaf API.  Beta This is a beta feature. "},{"title":"How it works","type":1,"pageTitle":"Leaf Link > File upload widget","url":"docs/Link_file_upload#how-it-works","content":"The user can add files using the file picker from the Browse button or drop files in the Drag & drop zone. Your files must be in a zip file. During the upload, the users can see the progress of the upload and they are able to cancel the upload process for the pending files. Requirements In addition to being authenticated, you must have at least one Leaf user created. Learn more here. "},{"title":"Get started","type":1,"pageTitle":"Leaf Link > File upload widget","url":"docs/Link_file_upload#get-started","content":""},{"title":"1. Sign in with a Leaf account","type":1,"pageTitle":"Leaf Link > File upload widget","url":"docs/Link_file_upload#1-sign-in-with-a-leaf-account","content":"You will need a Leaf account. If you don't have one yet, you can create it here. "},{"title":"2. Get an access token","type":1,"pageTitle":"Leaf Link > File upload widget","url":"docs/Link_file_upload#2-get-an-access-token","content":"To use the widget you will need a Leaf token. Use our authentication guide to know how it works. "},{"title":"Tutorial","type":1,"pageTitle":"Leaf Link > File upload widget","url":"docs/Link_file_upload#tutorial","content":"This widget is only available for Angular. "},{"title":"Angular","type":1,"pageTitle":"Leaf Link > File upload widget","url":"docs/Link_file_upload#angular","content":"To add this Leaf widget in an Angular application, you can use the @withleaf.io/angular-ui-kit library, which is a JavaScript library that provides all Leaf UI Widgets. Here are the general steps to get started: Install the @withleaf.io/angular-ui-kit package using npm: Copy npm i @withleaf.io/angular-ui-kit Import the library in your component or module file: Copy import { LeafFileUploadModule } from '@withleaf.io/angular-ui-kit'; Add the component to the HTML. You need your Leaf token (leafToken) and a Leaf user ID (leafUser) to set the required properties in the HTML component. Just add it to the container div. Copy <div class=\"container\"> <leaf-file-upload leafToken=\"{yourLeafToken}\" leafUser=\"{yourLeafUserId}\"> </leaf-file-upload> </div> tip Here you can run a live use case demo! "},{"title":"Leaf Link > Provider connection widget","type":0,"sectionRef":"#","url":"docs/Link_provider_connection","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Leaf Link > Provider connection widget","url":"docs/Link_provider_connection#overview","content":"The Provider Connection widget allows the user to associate their Leaf user with existing provider accounts. It just needs a minimal setup and few lines of code.  Beta This is a beta feature. "},{"title":"Get started","type":1,"pageTitle":"Leaf Link > Provider connection widget","url":"docs/Link_provider_connection#get-started","content":""},{"title":"1. Sign in with a Leaf account","type":1,"pageTitle":"Leaf Link > Provider connection widget","url":"docs/Link_provider_connection#1-sign-in-with-a-leaf-account","content":"You will need a Leaf account. If you don't have one yet, you can create it here. "},{"title":"2. Get an access token","type":1,"pageTitle":"Leaf Link > Provider connection widget","url":"docs/Link_provider_connection#2-get-an-access-token","content":"To use the widget you will need a Leaf token. Use our authentication guide to know how it works. "},{"title":"3. Get to know the Leaf user entity","type":1,"pageTitle":"Leaf Link > Provider connection widget","url":"docs/Link_provider_connection#3-get-to-know-the-leaf-user-entity","content":"All control of connected providers is done at the Leaf user level (usually it represents the user of your application), so it's important to know more about it here. "},{"title":"Set up","type":1,"pageTitle":"Leaf Link > Provider connection widget","url":"docs/Link_provider_connection#set-up","content":"To use the widget you will need to enable the providers. Don't worry, you only need to set it up once. "},{"title":"John Deere","type":1,"pageTitle":"Leaf Link > Provider connection widget","url":"docs/Link_provider_connection#john-deere","content":"To enable John Deere as a provider in the widget you need to have your application already registed with John Deere. You can find more info on how to create a developer account here. Redirect URI# The first step is to add our widget URL in the \"Redirect URI\" section: Copy https://widget.withleaf.io In the My applications page, select your application and edit it to add the URL here  Application info# We will need your Application Id and Secret so you can inform them on this endpoint.  POST /usermanagement/api/app-keys/JohnDeere/{appName}/{clientEnvironment} You can set the appName and the clientEnvironmentas the environment your application is enabled on John Deere STAGE or PRODUCTION. Here is a request example: cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"clientKey\": \"string\", \"clientSecret\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/app-keys/JohnDeere/LeafWidget/PRODUCTION' "},{"title":"Tutorial","type":1,"pageTitle":"Leaf Link > Provider connection widget","url":"docs/Link_provider_connection#tutorial","content":"This widget is only available for Angular. "},{"title":"Angular","type":1,"pageTitle":"Leaf Link > Provider connection widget","url":"docs/Link_provider_connection#angular","content":"To add this Leaf widget in an Angular application, you can use the @withleaf.io/angular-ui-kit library, which is a JavaScript library that provides all Leaf UI Widgets. Here are the general steps to get started: Install the @withleaf.io/angular-ui-kit package using npm: Copy npm i @withleaf.io/angular-ui-kit Import the library in your component or module file: Copy import { ProvidersModule } from '@withleaf.io/angular-ui-kit'; Add the component to the HTML. You need your Leaf token (leafToken) and a Leaf user ID (leafUser) to set the required properties in the HTML component. Just add it to the container div. You can also customize it adding your company name (companyName) and company logo (companyLogoUrl). Copy <div class=\"container\"> <leaf-providers leafToken=\"{yourLeafToken}\" leafUser=\"{yourLeafUserId}\" companyName=\"{name}\" companyLogoUrl=\"{image URL}\"> </leaf-providers> </div> "},{"title":"Crops Table","type":0,"sectionRef":"#","url":"docs/machine_file_conversion_crops_table","content":"","keywords":""},{"title":"Density","type":1,"pageTitle":"Crops Table","url":"docs/machine_file_conversion_crops_table#density","content":"Here we have a table containing the density for most of the crops extracted from Leaf's providers, where using these values we can generate volumetric representations of harvest yield from mass and vice-versa. "},{"title":"Standard Moisture","type":1,"pageTitle":"Crops Table","url":"docs/machine_file_conversion_crops_table#standard-moisture","content":"The standard moisture value is used to calculate the dry crop values. If the crop does not have a value defined in this table, then the API will not calculate the dry value and will repeat the wet values. Crops\tDensity (lb/bu)\tDry Moisture (%)alfalfa\t100\t13 annual ryegrass\t56 apples\t48\tn/a barley\t47.99\t15 bean, black\t60 bean, navy\t67.2\t15 beans, edible\t60 bent grass\t14 bermuda grass\t1 black eyed peas\t60.01 blue grass\t14 blueberry\t1 boot stage wcs\t60.01 borage\t60 buckwheat\t44 canola\t50\t15 canola polish\t52.01 chick peas\t60\t14 chickpeas\t60.98 clover\t60 corn\t56\t15 corn cob mix\t77.69 corn silage\t49.8 corn2\t56 cotton\t120.42 cranberry\t1 crimson clover\t60 downy bromegrass\t1 durum wheat\t60 edible bean lrg\t30 edible bean med\t30 edible bean sml\t30 edible beans\t60\t15 els\t32 energy cane\t7.38 european barley 6\t47.99 european corn\t56 european oats\t31.99 european peas\t60.01 european popcorn\t60.01 european rye\t56 european spring barley\t47.99 european triticale\t57.98 european wheat feed\t60.01 european wheat wtr\t60.01 european winter barley\t47.99 faber beans\t60 fall barley\t48 fan spring barley\t48 festulolium\t1 field beans\t60\t15 field peas\t60\t12 flax\t60\t10 forage mix\t1 garlic\t1 girasol (aceite)\t71.85 grass\t14 grass alfalfa\t1 grass clover\t1 grass dry\t100 grass half dry\t100 grass seeds\t22 grass wet\t100 hard red spring wheat\t60.01 hard red winter wheat\t60.01 hard white spring wheat\t60.01 hard white winter wheat\t60.01 iceberg salad\t18.65 lentil chilean\t60.01 lentil crimson\t60.01 lentil eston\t60.01 lentil laird\t60.01 lentils\t60\t13 lucerne\t54.38 lupins\t60 macadamia\t1 maize\t56 maize ccm\t56 maize long\t100 maize short\t100 meadowfoam\t60 millet\t50\t13 millet, pearl\t48 miscanthus\t100 mung bean\t60.01 mustard\t55\t9.50 mustard gisilba\t60.01 navy beans\t61.99 oats\t32\t12 oilseed rape winter\t52.01 orchard grass\t14 orchardgrass\t1 other grains\t40 pea trapper\t60.01 peanuts\t45 peas\t60 peas, green\t60 pecan\t1 per ryegrass\t56 popcorn\t100\t14 potatoes\t60 potatoes for chips\t60.01 potatoes for retail\t60.01 potatoes for starch\t60.01 rape seed\t60 rapeseed\t52.01\t12.50 rapeseed e ind\t52.01 rapeseed e oil\t52.01 raspberry\t1 red grass fescue\t14 reed canary grass\t1 rice\t45\t13 rice long\t45 rice medium\t45 rutabaga\t1 rye\t56 safflower\t38\t8 sesame\t46 smooth bromegrass\t1 soft red spring wheat\t60.01 soft red winter wheat\t60.01 soft white spring wheat\t60.01 soft white winter wheat\t60.01 sorghum\t56\t14 soybeans\t60\t13 spring barley\t48 spring rye\t56 spring wheat\t60 sudangrass\t39.99 sugar beet\t74.66 sugar cane\t80.87 sunflower\t30\t10 sunflower e ind\t24.98 sunflower e oil\t24.98 sunflower oil\t28.97 sunflower stripe\t20 sunflowers\t100 sweet corn\t70 sweet potatoes\t50 sweet sorghum\t100 tall fescue\t1 timothy grass\t1\t12 triticale\t50\t13 turnips\t55 upland cotton\t32 walnut\t1 watermelon\t1 wheat\t60\t13.50 wheat (hrd rd spr)\t60\t13.50 wheat (hrd rd wtr)\t60\t13.50 wheat, hard red spring\t60.01\t13.50 wheat, hard red winter\t60.01\t13.50 wheat, hard white spring\t60.01\t13.50 wheat, hard white winter\t60.01\t13.50 wheat, soft red spring\t60.01\t13.50 wheat, soft red winter\t60.01\t13.50 wheat, soft white spring\t60.01\t13.50 wheat, soft white winter\t60.01\t13.50 white clover\t60 white popcorn\t60.01 white wheat\t60.01 whole crop dry\t100 whole crop wet\t100 wild rice\t45 winter barley\t48 winter rye\t56 winter wheat\t60 wood\t100 yellow popcorn\t60.01\t If the specific variety of the crop from the file that you are trying to process is not present in this table, please contact our support team support@withleaf.io "},{"title":"Field Boundary Management Endpoints","type":0,"sectionRef":"#","url":"docs/field_boundary_management_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#about","content":"Here we list all the available endpoints from Fields API. For easily calling them, we recommend using Leaf's Postman collection. All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/fields/api There is a REST resources section if you want to check it out. This service has the following endpoints available: Description\tEndpointsGet all fields\tGET /fields Get a field\tGET /users/{id}/fields/{id} Create a field\tPOST /users/{id}/fields Update a field\tPATCH /users/{id}/fields/{id} Get all operation files of a field (deprecated)\tGET /users/{leafUserId}/fields/{fieldId}/operations Get all operation files of a field\tGET /users/{leafUserId}/fields/{fieldId}/operations/files Get an operation file of a field (deprecated)\tGET /users/{leafUserId}/fields/{fieldId}/operations/{fileId} Get an operation file of a field\tGET /users/{leafUserId}/fields/{fieldId}/operations/files/{fileId} Get fields by geometry (deprecated)\tPOST /fields/query/intersects Get fields by geometry\tPOST /users/{leafUserId}/fields/intersects Get intersection of fields\tPOST /users/{id}/fields/intersect Delete a field\tDELETE /users/{id}/fields/{id} Get all boundaries from field\tGET users/{leafUserId}/fields/{fieldId}/boundaries Get a boundary from field\tGET users/{leafUserId}/fields/{fieldId}/boundaries/{boundaryId} Get active boundary from field\tGET users/{leafUserId}/fields/{fieldId}/boundary Update active boundary from field\tPUT users/{leafUserId}/fields/{fieldId}/boundary Get Weather data from a Field\tGET /users/{leafUserId}/fields/{fieldId}}/weather Get all farms\tGET /farms Get a farm\tGET /users/{id}/farms/{id} Create a farm\tPOST /users/{leafUserId}/farms Update a farm\tPUT /users/{leafUserId}/farms/{id} Get all growers\tGET /growers Get a grower\tGET /users/{leafUserId}/growers/{id} Create a grower\tPOST /users/{leafUserId}/growers Update a grower\tPUT /users/{leafUserId}/growers/{id} "},{"title":"Endpoints","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#endpoints","content":""},{"title":"Fields","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#fields","content":""},{"title":"Get all fields","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-all-fields","content":" GET /fields Gets a paged list of Fields. It is possible to filter the results by passing some query parameters. type, only matches fields with this type (string).farmId, only matches fields from this farmId (integer).provider, only matches fields from this provider (string).leafUserId, only matches fields from this user (string).page, an integer specifying the page being fetched.size, an integer specifying the size of the page (defaults to 20). These last two parameters are used exclusively for paging through results. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/fields' Response# A JSON array containing Fields. Copy [ { \"id\": \"1a952614-3673-4d1e-b677-1f7224339ec6\", \"leafUserId\": \"58800d61-91ac-4922-8e2a-f0216b9f052a\", \"area\": { \"value\": 785229.21674535141, \"unit\": \"ha\" }, \"boundaries\": [ \"279b52d5-ec6d-4459-a06a-4f47ffab0659\" ], \"providerName\": \"JohnDeere\", \"providerId\": 2, \"providerFieldId\": \"b96ed268-728f-489e-b928-9d3e70082be4\", \"providerBoundaryId\": \"125fc49f-7e75-43fe-89f2-af976addb392\", \"providerFieldName\": \"The_Field_field\", \"organizationId\": \"428214\", \"type\": \"ORIGINAL\", \"createdTime\": \"2021-10-20T21:21:24.732030Z\", \"updatedTime\": \"2021-11-03T01:34:15.154051Z\", \"farmId\": 3746117, \"mergedFieldId\": \"f97c5bbc-2dbf-4400-8d59-39eba37f8847\", \"sources\": [], \"legacy\": true } ] "},{"title":"Get a field","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-a-field","content":" GET /users/{id}/fields/{id} Gets a single Field by its id. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{id}' Response# A single Field as a JSON object. "},{"title":"Create a field","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#create-a-field","content":" POST /users/{leafUserId}/fields Creates a Field for the user leafUserId. A request body must be provided containing the entry \"geometry\" object which need to have the properties \"type\" and \"coordinates\". The geometry represents the boundaries of the Field being created as a GeoJSON geometry (\"type\" property must be a \"MultiPolygon\"). Consider that you can also set the id and name properties (both of them optional) in the request body. If no id is provided an UUID will be generated and this property can not be updated. Request body example: Copy { \"id\": \"string\", // optional \"name\": \"string\", // optional \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [-93.48821327980518, 41.77137549568163], [-93.48817333680519, 41.77143534378164], [-93.48821327390516, 41.76068857977987], [-93.48821327980518, 41.77137549568163] ] ] ] } } You can try some requests on the create fields API using the examples below. cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"geometry\": { \"type: \"MultiPolygon\", \"coordinates\": [...] } }' 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/' Response# You can expect a response with a JSON Object containing the following properties. Copy { \"id\": \"string\", \"leafUserId\": \"string\", \"area\": { \"value\": float, \"unit\": \"ha\" }, \"boundaries\": [ \"UUID\" ], \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [...] }, \"type\": \"string\", \"createdTime\": \"timestamp\", \"updatedTime\": \"timestamp\" } "},{"title":"Update a Field","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#update-a-field","content":" PATCH /users/{leafUserId}/fields/{id} Update the Field by \"id\" for the user \"leafUserId\". The request body accepts updatable field properties like \"name\" to update the field name, \"farmId\" to update the related Farm of the Field and \"geometry\", which represents the boundaries of the Field as a GeoJSON geometry (it must be a \"MultiPolygon\"). Request body example: Copy { \"name\": \"updatedName\", \"farmId\": 1, \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [-93.48821327980518, 41.77137549568163], [-93.48817333680519, 41.77143534378164], [-93.48821327390516, 41.76068857977987], [-93.48821327980518, 41.77137549568163] ] ] ] } } cURLPythonJavaScript Copy curl -X PATCH \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"updatedName\", \"farmId\": 1, \"geometry\": { \"type: \"MultiPolygon\", \"coordinates\": [...] } }' 'https://api.withleaf.io/services/fields/api/fields/users/{leafUserId}/{id}' Response# A Field as a JSON object. "},{"title":"Get all operation files of a field (deprecated)","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-all-operation-files-of-a-field-deprecated","content":"Use this endpoint instead  GET /users/{leafUserId}/fields/{fieldId}/operations Gets a paged list of all operation files of the Field and Leaf User specified in the URL. It is possible to filter the results by passing some query parameters. They are listed below. Parameter (to filter by)\tType\tDescriptionoperationType\tString \"harvested\", \"planted\", \"applied\" or \"other\"\tretrieve operations of given type provider\tString \"CNHI\", \"JohnDeere\", \"Trimble\" or \"ClimateFieldView\"\tretrieve operations of given provider origin\tString \"provider\", \"automerged\", \"merged\" or \"uploaded\"\tretrieve operations of given origin crop\tString name of the crop, like \"corn\" or \"soybeans\". Entire crop list available here\tretrieve operations with this crop. startTime\tISO 8601 datetime format\tretrieve operations that started after this date endTime\tISO 8601 datetime format\tretrieve operations that ended before this date You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetched (default is 0)size, an integer specifying the size of the page (default is 20, max is 100) Request# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/operations' Response# Copy [ { \"crops\": [ \"string\" ], \"endTime\": \"2022-05-11T13:11:57.994Z\", \"id\": \"string\", \"leafUserId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\", \"operationType\": \"other\", \"origin\": \"automerged\", \"provider\": \"Other\", \"providerFileId\": \"string\", \"startTime\": \"2022-05-11T13:11:57.994Z\", \"varieties\": [ \"string\" ] } ] "},{"title":"Get all operation files of a field","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-all-operation-files-of-a-field","content":" GET /users/{leafUserId}/fields/{fieldId}/operations/files Gets a paged list of all operation files of the Field and Leaf User specified in the URL. It is possible to filter the results by passing some query parameters. They are listed below. Parameter (to filter by)\tType\tDescriptionoperationType\tString \"harvested\", \"planted\", \"applied\" or \"other\"\tretrieve operations of given type provider\tString \"CNHI\", \"JohnDeere\", \"Trimble\" or \"ClimateFieldView\"\tretrieve operations of given provider origin\tString \"provider\", \"automerged\", \"merged\" or \"uploaded\"\tretrieve operations of given origin crop\tString name of the crop, like \"corn\" or \"soybeans\". Entire crop list available here\tretrieve operations with this crop. startTime\tISO 8601 datetime format\tretrieve operations that started after this date endTime\tISO 8601 datetime format\tretrieve operations that ended before this date You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetched (default is 0)size, an integer specifying the size of the page (default is 20, max is 100) Request# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/operations/files' Response# Copy [ { \"crops\": [ \"string\" ], \"endTime\": \"2022-05-11T13:11:57.994Z\", \"id\": \"string\", \"leafUserId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\", \"operationType\": \"other\", \"origin\": \"automerged\", \"provider\": \"Other\", \"providerFileId\": \"string\", \"startTime\": \"2022-05-11T13:11:57.994Z\", \"varieties\": [ \"string\" ] } ] "},{"title":"Get an operation file of a field (deprecated)","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-an-operation-file-of-a-field-deprecated","content":"Use this endpoint instead  GET /users/{leafUserId}/fields/{fieldId}/operations/{fileId} Gets a single Operation File of a field by its id. Request# JavaScriptPythoncURL Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/operations/{id}' Response# Copy [ { \"crops\": [ \"string\" ], \"endTime\": \"2022-05-11T13:11:57.994Z\", \"id\": \"string\", \"leafUserId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\", \"operationType\": \"other\", \"origin\": \"automerged\", \"provider\": \"Other\", \"providerFileId\": \"string\", \"startTime\": \"2022-05-11T13:11:57.994Z\", \"varieties\": [ \"string\" ] } ] "},{"title":"Get an operation file of a field","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-an-operation-file-of-a-field","content":" GET /users/{leafUserId}/fields/{fieldId}/operations/files/{fileId} Gets a single Operation File of a field by its id. JavaScriptPythoncURL Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/operations/files/{id}' Response# A single Operation File. Copy { \"crops\": [ \"string\" ], \"endTime\": \"2022-05-11T13:13:01.548Z\", \"id\": \"string\", \"leafUserId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\", \"operationType\": \"other\", \"origin\": \"automerged\", \"provider\": \"Other\", \"providerFileId\": \"string\", \"startTime\": \"2022-05-11T13:13:01.548Z\", \"varieties\": [ \"string\" ] } "},{"title":"Get Fields by geometry (deprecated)","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-fields-by-geometry-deprecated","content":" POST /fields/query/intersects Use this endpoint instead. Gets a list of fields that intersect with the GeoJSON MultiPolygon sent in the request body. cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"geometry\": { \"type: \"MultiPolygon\", \"geometry\": [...] } }' 'https://api.withleaf.io/services/fields/api/fields/query/intersects' Response# A JSON list of Fields. Copy [ { \"id\": \"id\", \"leafUserId\": \"uuid\", \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [-89.84388470649719,39.71943436012731], [-89.84392762184143,39.72439389620628], [-89.83936786651611,39.725392361998416], [-89.83928203582764,39.71951688444436], [-89.84388470649719,39.71943436012731] ] ] ] }, \"type\": \"MERGED\", \"sources\": [] } ] "},{"title":"Get Fields by geometry","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-fields-by-geometry","content":" POST /users/{leafUserId}/fields/intersects Gets a list of fields that intersect with the GeoJSON MultiPolygon sent in the request body. The minimum intersection percentage is given byintersectionThreshold and can range from 0.01% to 100%, its default value is 0.01.  The intersectionThreshold can be compared with the \"intersection by field\" ratio or the \"intersection by geometry\" ratio. Whichever is satisfied first. Here we have a sample for a field with 100 area unit and a geometry with 10 area unit:  So, in this case, if the intersectionThreshold were 3, then the condition would be satisfied and the field would be returned, but if the value was greater than 50, then it would not satisfy the condition, as 50% is the highest intersection value: intersectionThreshold (%)\tsatisfied3\t✅ 5\t✅ 37\t✅ 50\t✅ 75\t❌ 100\t❌ cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"geometry\": { \"type: \"MultiPolygon\", \"coordinates\": [...] }, \"intersectionThreshold\": 25.7 }' 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/intersects' Response# A JSON list of Fields. Copy [ { \"id\": \"id\", \"leafUserId\": \"uuid\", \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [-89.84388470649719,39.71943436012731], [-89.84392762184143,39.72439389620628], [-89.83936786651611,39.725392361998416], [-89.83928203582764,39.71951688444436], [-89.84388470649719,39.71943436012731] ] ] ] }, \"type\": \"MERGED\", \"sources\": [] } ] "},{"title":"Get intersection of fields","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-intersection-of-fields","content":" POST /users/{id}/fields/intersect Gets a GeoJSON MultiPolygon corresponding to the intersection of the Fields specified by the given id's. Such Field id's goes in a list, in the request body. cURLPythonJavaScript Copy curl --location --request \\ POST 'https://api.withleaf.io/services/fields/api/users/{id}/fields/intersect' \\ --header 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ --header 'Content-Type: application/json' \\ --data-raw '[\"id1\", \"id2\"]' Response# A JSON in the format of a GeoJSON geometry. Copy { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [-89.84388470649719,39.71943436012731], [-89.84392762184143,39.72439389620628], [-89.83936786651611,39.725392361998416], [-89.83928203582764,39.71951688444436], [-89.84388470649719,39.71943436012731] ] ] ] } "},{"title":"Delete a field","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#delete-a-field","content":" DELETE /users/{id}/fields/{id} Deletes the field with the given id. tip Fields created by a provider cannot be deleted on Leaf side. "},{"title":"Boundaries","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#boundaries","content":""},{"title":"Get all boundaries from field","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-all-boundaries-from-field","content":" GET /users/{leafUserId}/fields/{fieldId}/boundaries Gets a list of boundaries from a field. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{id}/boundaries' Response# A list of Boundary as a JSON object. "},{"title":"Get a boundary from field","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-a-boundary-from-field","content":" GET /users/{leafUserId}/fields/{fieldId}/boundaries/{boundaryId} Gets a single Boundary from a field by its id. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/boundaries/{boundaryId}' Response# A single Boundary as a JSON object. "},{"title":"Get active boundary from field","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-active-boundary-from-field","content":" GET /users/{leafUserId}/fields/{fieldId}/boundary Gets the active Boundary from a field. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/boundary' Response# A single Boundary as a JSON object. "},{"title":"Update active boundary from field","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#update-active-boundary-from-field","content":" PUT /users/{leafUserId}/fields/{fieldId}/boundary Updates the active boundary of field fieldId. The previous active boundary is not deleted, but set as inactive. Request body example: Copy { \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [-93.48821327980518, 41.77137549568163], [-93.48817333680519, 41.77143534378164], [-93.48821327390516, 41.76068857977987], [-93.48821327980518, 41.77137549568163] ] ] ] } } cURLPythonJavaScript Copy curl -X PUT \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"geometry\": { \"type: \"MultiPolygon\", \"geometry\": [...] } }' 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/boundary' Response# A Field as a JSON object. "},{"title":"Get Weather data from a Field","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-weather-data-from-a-field","content":" GET /users/{leafUserId}/fields/{fieldId}/weather Retrieves weather data for a given fieldId Parameter (to filter by)\tValuesstartTime\tISO 8601 date. Delimits the lower bound of the returned data endTime\tISO 8601 date. Delimits the upper bound of the returned data cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{}' 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/weather' Response# A JSON array containing farms. Copy { \"type\": \"Feature\", \"properties\": { \"rainSum\": { \"values\": [ { \"time\": \"2023-01-01T00:00:00\", \"value\": 0.3 }, { \"time\": \"2023-01-02T00:00:00\", \"value\": 1.2 } ], \"unit\": \"mm\" }, \"maxTemperature\": { \"values\": [ { \"time\": \"2023-01-01T00:00:00\", \"value\": 27.7 }, { \"time\": \"2023-01-02T00:00:00\", \"value\": 27.4 } ], \"unit\": \"°C\" }, \"meanTemperature\": { \"values\": [ { \"time\": \"2023-01-01T00:00:00\", \"value\": 27.1 }, { \"time\": \"2023-01-02T00:00:00\", \"value\": 26.9 } ], \"unit\": \"°C\" }, \"minTemperature\": { \"values\": [ { \"time\": \"2023-01-01T00:00:00\", \"value\": 26.3 }, { \"time\": \"2023-01-02T00:00:00\", \"value\": 26.2 } ], \"unit\": \"°C\" }, \"snowfallSum\": { \"values\": [ { \"time\": \"2023-01-01T00:00:00\", \"value\": 0 }, { \"time\": \"2023-01-02T00:00:00\", \"value\": 0 } ], \"unit\": \"cm\" }, \"shortwaveRadiationSum\": { \"values\": [ { \"time\": \"2023-01-01T00:00:00\", \"value\": 22.13 }, { \"time\": \"2023-01-02T00:00:00\", \"value\": 19.25 } ], \"unit\": \"MJ/m²\" }, \"processedTime\": \"2023-03-14T16:57:55.922139\" }, \"geometry\": { \"type\": \"Point\", \"coordinates\": [ 0, 0 ] } } The geometry point for the response above represents the centroid for the specific fieldId. "},{"title":"Farms","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#farms","content":""},{"title":"Get all farms","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-all-farms","content":" GET /farms Gets a paged list of all farms. It is possible to pass some query parameters. growerId, only matches Farms from this growerId (integer)provider, only matches Farms from this provider (string)leafUserId, only matches Farms from this Leaf User (UUID)page, an integer specifying the page being fetchedsize, an integer specifying the size of the page (defaults to 20) The parameters are used exclusively for paging through results. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/farms' Response# A JSON array containing farms. Copy [ { \"id\": 1538766, \"name\": \"name\", \"providerId\": 2, \"providerName\": \"JohnDeere\", \"providerFarmId\": \"00000000-0000-0000-0000-000000000000\", \"leafUserId\": \"00000000-0000-0000-0000-000000000000\", \"fieldIds\": [\"00000000-0000-0000-0000-000000000000\"], \"growerId\": 12345 } ] "},{"title":"Get a farm","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-a-farm","content":" GET /users/{leafUserId}/farms/{id} Gets a single farm by its id from the user leafUserId. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/farms/{id}' Response# A single Farm as a JSON object. Copy { \"id\": 1551010, \"name\": \"name\", \"providerName\": \"JohnDeere\", \"providerFarmId\": \"00000000-0000-0000-0000-000000000000\", \"leafUserId\": \"00000000-0000-0000-0000-000000000000\", \"fieldIds\": [\"00000000-0000-0000-0000-000000000000\"], \"growerId\": 123 } "},{"title":"Create a farm","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#create-a-farm","content":" POST /users/{leafUserId}/farms Creates a farm for the user leafUserId. It's possible to pass both the farmName and the growerId on the body of the request. Request body example: Copy { \"name\": \"Farm 01\", \"growerId\": 123 } cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"farmName\" }' 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/farms' Response# A single Farm as a JSON object. "},{"title":"Update a farm","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#update-a-farm","content":" PUT /users/{leafUserId}/farms/{id} Updates the farm with id id for the user leafUserId. It's possible to pass both the farmName and the growerIdon the body of the request. Request body example: Copy { \"name\": \"Updated Farm Name\", \"growerId\": 123 } cURLPythonJavaScript Copy curl -X PUT \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"newFarmName\", \"growerId\": \"newGrowerId }' 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/farms/{id}' Response# A single Farm as a JSON object. "},{"title":"Grower","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#grower","content":""},{"title":"Get all growers","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-all-growers","content":" GET /growers Gets a paged list of all growers. Use the following parameters for paging through results. provider, only matches Growers from this provider (string)leafUserId, only matches Growers from this Leaf User (UUID)page, an integer specifying the page being fetchedsize, an integer specifying the size of the page (defaults to 20) cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/growers' Response# A JSON array containing growers. Copy [ { \"id\": 2345, \"leafUserId\": \"UUID\", \"providerName\": \"str\", \"providerOrganizationId\": \"str\", \"providerCompanyId\": \"str\", \"providerUserId\": \"str\", \"providerGrowerId\": \"str\", \"farmIds\": [4534] } ] "},{"title":"Get a grower","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-a-grower","content":" GET /users/{leafUserId}/growers/{id} Gets a single grower by its id from the user leafUserId. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/growers/{id}' Response# A single Grower as a JSON object. In our system Growers are equivalent to John Deere Client. That been said, the attribute name comes directly from the Client's name for growers with John Deere as provider. Copy { \"id\": 2345, \"name\": \"str\", \"leafUserId\": \"UUID\", \"providerName\": \"str\", \"providerOrganizationId\": \"str\", \"providerCompanyId\": \"str\", \"providerUserId\": \"str\", \"providerGrowerId\": \"str\", \"farmIds\": [4534] } "},{"title":"Create a grower","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#create-a-grower","content":" POST /users/{leafUserId}/growers Creates a grower for the user leafUserId. It's possible to pass name on the body of the request. Request body example: Copy { \"name\": \"Example Grower Name\" } cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"growerName\" }' 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/growers' Response# A single Grower as a JSON object. "},{"title":"Update a grower","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#update-a-grower","content":" PUT /users/{leafUserId}/growers/{id} Updates the grower with id id for the user leafUserId. It's possible to pass only the name on the body of the request. Request body example: Copy { \"name\": \"Updated Grower Name\" } cURLPythonJavaScript Copy curl -X PUT \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"newGrowerName\"}' 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/growers/{id}' Response# A single Grower as a JSON object. "},{"title":"REST Resources","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#rest-resources","content":"See below the REST resources and their endpoints. "},{"title":"Field Resource","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#field-resource","content":"A field might have one or neither of the following keys: a \"mergedFieldId\" key ora \"sources\" key A Field will only have one of the previous keys if it is either a field that has been merged with other one(s) or if it is a result of a merge. Leaf merges fields that have any sort of overlap. This makes it easier for you to query operations from a field by querying by the merged field. Because a field might exist in multiple providers, Leaf detects that and creates a single field that you can query for - and you can still query by the individual fields too. geometry and area are deprecated keys that contains the geometry of the active boundary and its area, respectively. Copy { \"id\": \"UUID\", \"providerName\": \"str\", \"providerFieldName\": \"str\", \"providerFieldId\": \"str\", \"providerFieldName\": \"str\", \"providerBoundaryId\": \"UUID\", \"type\": \"ORIGINAL\", \"leafUserId\": \"UUID\", \"organizationId\": \"str\", \"mergedFieldId\": [\"UUID\"], \"files\": [\"UUID\"], \"boundaries\": [\"UUID\"], \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [-93.48821327980518, 41.77137549568163], [-93.48817333680519, 41.77143534378164], [-93.48821327390516, 41.76068857977987], [-93.48821327980518, 41.77137549568163] ] ] ] }, \"area\": { \"value\": double, \"unit\": \"ha\" } } Description\tEndpointsGet all fields\tGET /fields Get a field\tGET /users/{id}/fields/{id} Create a field\tPOST /users/{id}/fields Get fields by geometry\tPOST /fields/query/intersects Get intersection of fields\tPOST /users/{id}/fields/intersect Delete a field\tDELETE /users/{id}/fields/{id} "},{"title":"Boundary Resource","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#boundary-resource","content":"Every Field at Leaf can have 0 or many boundaries. Fields created via Leaf's endpoints must have at least one boundary. Only one boundary may be active, the others are inactive boundaries. Boundaries cannot be deleted or have its geometry updated. Every update generates a new Boundary, and Leaf keeps a history of all seen Boundaries. Each boundary has a status and providerStatus. status - Represents the current status of the boundary: ACTIVE - If the boundary was created at Leaf, it is the active boundary. If it is from a provider, this boundary exists at the provider and is the active boundary there.INACTIVE - If the boundary was created at Leaf, it is an inactive boundary. If it is from a provider, this boundary exists at the provider and is inactive there.OUTDATED_ON_PROVIDER - The boundary is from a provider. The boundary once existed on the provider exactly as it is in that boundary, but it was edited (e.g. has a new geometry but the same provider boundary id).DELETED_ON_PROVIDER - The boundary is from a provider. The boundary once existed on the provider, but it was deleted. The user won't find that boundary in the provider. providerStatus - Is the status of the boundary on the provider. ACTIVE - The boundary is the active boundary in the provider.INACTIVE - The boundary is inactive in the provider. providerStatus, just like the geometry, is a static attribute. In case this attribute is changed at the provider, the boundary's status is updated and a new boundary is created with the updated providerStatus in order to maintain history. Copy { \"id\": \"UUID\", \"status\": \"ACTIVE\", \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [ -89.84392762184143, 39.72439389620628 ], [ -89.84388470649719, 39.71943436012731 ], [ -89.83928203582764, 39.71951688444436 ], [ -89.83936786651611, 39.725392361998416 ], [ -89.84392762184143, 39.72439389620628 ] ] ] ] }, \"area\": { \"value\": double, \"unit\": \"ha\" } } Description\tEndpointsGet all boundaries from field\tGET users/{leafUserId}/fields/{fieldId}/boundaries Get a boundary from field\tGET users/{leafUserId}/fields/{fieldId}/boundaries/{boundaryId} Get active boundary from field\tGET users/{leafUserId}/fields/{fieldId}/boundary Update active boundary from field\tPUT users/{leafUserId}/fields/{fieldId}/boundary "},{"title":"Operation Resource","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#operation-resource","content":"Copy { \"id\": \"UUID\", \"operationType\": \"harvested|planted|applied\", \"startTime\": \"ISO date-time\", \"endTime\": \"ISO date-time\", \"crops\": [\"str\"], \"varieties\": [\"str\"], \"providerFileId\": \"str\", \"provider\": \"Trimble\", \"origin\": \"provider|merged|automerged|uploaded\", \"leafUserId\": \"UUID\" } Description\tEndpointsGet all operations of a field (deprecated)\tGET /users/{leafUserId}/fields/{fieldId}/operations Get all operations of a field\tGET /users/{leafUserId}/fields/{fieldId}/operations/files Get an operation of a field (deprecated)\tGET /users/{leafUserId}/fields/{fieldId}/operations/{fileId} Get an operation of a field\tGET /users/{leafUserId}/fields/{fieldId}/operations/files/{fileId} "},{"title":"Farm Resource","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#farm-resource","content":"Copy { \"id\": \"long\", \"name\": \"str\", \"providerName\": \"str\", \"providerFarmName\": \"str\", \"providerFarmId\": \"UUID\", \"leafUserId\": \"UUID\", \"growerId\": \"long\", \"fieldIds\": [\"UUID\"] } Description\tEndpointsGet all farms\tGET /farms Get a farm\tGET /users/{id}/farms/{id} Create a farm\tPOST /users/{leafUserId}/farms Update a farm\tPUT /users/{leafUserId}/farms/{id} "},{"title":"Grower Resource","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#grower-resource","content":"Copy { \"id\": 2345, \"leafUserId\": \"UUID\", \"providerName\": \"str\", \"providerOrganizationId\": \"str\", \"providerCompanyId\": \"str\", \"providerUserId\": \"str\", \"providerGrowerId\": \"str\", \"farmIds\": [4534] } If there is a name available for the grower so the name property will be returned as well. Description\tEndpointsGet all growers\tGET /growers Get a grower\tGET /growers/{id} Create a grower\tPOST /users/{leafUserId}/growers Update a grower\tPUT /users/{leafUserId}/growers/{id} "},{"title":"Machine File Conversion Overview","type":0,"sectionRef":"#","url":"docs/machine_file_conversion_overview","content":"Leaf's Operation Data API returns clean, aggregated, and standardized data from all major machine data brands in a simple JSON response. You can access user-permissoned files in two ways: Connecting to the company that holds your users' files. Our Operation Data Service will immediately pool machine data from the authorized account and monitor new files to keep them updated Uploading the files directly to Leaf. requires Leaf User You will need a Leaf User to retrieve operations images, summary, and standardized files. You can add files by having a Leaf User with valid credentials from the provider you want to access data or you can upload data manually. If you don't have a Leaf User or you have not connected it with any provider yet, see how to create a Leaf User andhow to add credentials to a Leaf User. All files will be passed through a processing chain that includes: Converting raw proprietary format files to a rawGeojson;Standardizing the rawGeojson to a standardGeojson;Creating images for all the numerical attributes in the file;Creating a summary of the file with summary information, such as averages, standard deviations, maximum and minimum values ​​for important properties, and more. This summary is usually used to have general information about the operation without the need to download and open the standardGeojson file. For example, you can display the area of the operation, how much was harvested and the date it happened, all without opening big files. This processing may take a few minutes to complete and happens continuously in the background. Since one single operation can be represented in several (sometimes hundreds of) files by the provider, this service also provides an auto-merge feature, which will identify files that belong to the same operation (planting, for example) and same field and automatically merge them into a new file. Alternatively, it is possible to manually upload files to be processed and merge them manually if desired. Please keep in mind that merging files is processing-heavy and may take about 20 minutes to finish. Merging operation files with Leaf Learn more about how to merge files into operations in our blog When manually uploading (in a zip), you can select which provider the files inside the zip came from. If you are unsure or you know that there are files from more than one provider, Leaf can automatically detect, detach and process each file. Currently, Leaf is able to (detect and) process files from the following providers and formats: John Deere: Gen 4GS3ShapefileADM (Adapt Data Format) Climate Field View: .dat (Climate Field View proprietary)Shapefile CNHi .cn1Shapefile Trimble .agt (Trimble proprietary)Shapefile AgLeader SMS Shapefile export.YLD.agdata.ilf ISOXMLPrecision Planting (beta) .2020 Stara File processing We are always improving our processing. If you have any doubts or suggestions, we will be happy to help at help@withleaf.io We also provide our Leaf Postman collection so you can follow along easily.","keywords":""},{"title":"Machine File Conversion Endpoints","type":0,"sectionRef":"#","url":"docs/machine_file_conversion_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/operations/api This service has the following endpoints available: Description\tEndpointsGet all files\tGET /files Get a file\tGET /files/{id} Get a file summary\tGET /files/{id}/summary Get a file's images\tGET /files/{id}/images Get a file's units\tGET /files/{id}/units Upload a file\tPOST /batch Get a batch\tGET /batch/{id} Get all batches\tGET /batch Retry a batch\tPUT /batch/{id}/retry Merge files\tPOST /files/merge Get a file status\tGET /files/{id}/status For easily testing these endpoints, we recommend using our Postman collection. requires Leaf User with credentials To have access to operation files, you will need a Leaf User with valid credentials from the provider you want to access data. If you don't have a Leaf User or you have not connected it with any provider yet, see how to create a Leaf Useror how to add credentials to a Leaf User. "},{"title":"Get all files","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#get-all-files","content":" GET /files Gets a paged list of files that belong to the current logged in user. It is possible to filter the results by passing some query parameters. They are listed below. Parameter (to filter by)\tValuesleafUserId\tuuid of one of your users provider\tCNHI, JohnDeere, Trimble, ClimateFieldView, AgLeader or Leaf status\tprocessed, failed or processing origin\tprovider, automerged, merged or uploaded organizationId\tthe provider organizationId (only available for John Deere) batchId\tuuid of the upload response (only available for uploaded files) createdTime\tISO 8601 date. Returns operations from the createdTime onward startTime\tISO 8601 date. Returns operations from the startTime onward endTime\tISO 8601 date. Returns operations until the endTime operationType\tapplied, planted or harvested minArea\ta number (Double) representing the minimum area (square meters) of the operations to be returned Also, for operationType: harvested we can process the yield properties related to the operation using the crop density and standard moisture available in this table. You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetched (default is 0)size, an integer specifying the size of the page (max is 100) the default value for page size is 20 If the parameters page and size are not set, the endpoint will return 20 results. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files' Response# The response is a JSON with the key \"operations\" referring to a list of files.Here's a link with sample responses for \"planted\", \"applied\" and \"harvested\" operation files. Copy { \"message\": \"SUCCESS\", \"operations\": [OPERATION] }  "},{"title":"Get a file","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#get-a-file","content":" GET /files/{id} Gets a single file by its id. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}' Response# Here's a link with sample responses for \"planted\", \"applied\" and \"harvested\" operation files. "},{"title":"Get a file summary","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#get-a-file-summary","content":" GET /files/{id}/summary Gets the summary, if available, for the file id. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/summary' Response# Here's a link with sample responses for \"planted\", \"applied\" and \"harvested\" operation files. "},{"title":"Get a file's images","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#get-a-files-images","content":" GET /files/{id}/images Gets a list of PNG images generated from the operation's file properties. cURLPythonJavaScriptJSON Response Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/images' "},{"title":"Get a file's units","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#get-a-files-units","content":" GET /files/{id}/units Gets the file's properties and their units. cURLPythonJavaScriptJSON Response Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/units' "},{"title":"Upload a file","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#upload-a-file","content":" POST /batch Posts/creates a new file in Leaf. The file must be sent as a zip. This endpoint accepts a .zip of operation files, detects which files are in the .zip, and returns the ID of the process, which can in turn be used to retrieve the ID's of the files being processed. File size limit of 3 GB Currently, our upload endpoints accepts files with the maximum size limited to 3 gigabytes. This endpoint receives two required URL parameters, a leafUserId and provider A provider can be set as one of the following: Copy Other ClimateFieldView CNHI JohnDeere Trimble AgLeader Farmobile PrecisionPlanting If provider is set to \"Other\", Leaf will detect which files are present in the .zip file and process them accordingly. Leaf will detect files present in the uploaded .zip and create file ids for the files that are detected in the uploaded .zip. These files can then be accessed individually by their file ID, batch ID, or their associated field boundary. Expected file structures from each provider are listed below. Very often these default file structures are edited by users. In these cases Leaf attempts to automatically repair the file structure and find all necessary files within any uploaded .zip. The following file formats from each provider are supported: JohnDeere# File Format\tMonitor Model\tDetailsGS3\tGreenStar 3 – 2630\t/GS3_2630/profile/RCD/EIC/global.ver Gen4\tGen 4 - 4600/4630\t/JD-Data/log/user defined name/*.jdl Shapefile\tExported from MyJohnDeere\tShapefile with extra metadata in a .json file Expected file structure# GreenStar 4 (4600+) Copy jd-data └── log └── *.jdl GreenStar 3 (2630) Copy GS3_2630 └── RCD └── EIC └── global.ver └── documentation └── ... ├── *.fdd └── *.fdl Green Star 2 (2600) Copy ... └── RCD ├── *.fdd └── *.fdl Climate FieldView# File Format\tMonitor Model\tDetailsdat\tAll files from Climate FieldView\tA zip with .dat files Expected file structure# 20|20 SeedSense Generation 1 and Generation 2 Copy ... ├── harvest_*.dat – Harvest data ├── field_map_*.dat – Planting data └── liquid_map_*.dat - AsApplied spraying data 20|20 SeedSense Generation 3 Copy ... └── *.2020 CNHI# File Format\tMonitor Model\tDetailsCN1\tCaseIH monitors or exported from CNH Connects\t/file.cn1/index.vy1 Expected file structure# Voyager 2 Copy *.cn1 └── ... └── *.vy1 AgLeader# File Format\tMonitor Model\tDetailsyld\tYM2000, PFAdvantage & other OEM systems\tA zip with .yld files ilf\tINTEGRA / Insight / Edge\tA zip with .ilf files agdata\tINTEGRA / VERSA / COMPASS\tA zip with .agdata files Expected file structure# AgLeader Integra (versions 3.5+), Versa Copy ... ├── *.agdata └── *.agsetup AgLeader Edge, Insight, and Integra (version 3.4) Copy ... └── *.ilf AgLeader PF Advantage, PF 3000, PF 3000 Pro, YM2000 Copy ... └── *.yld Trimble# File Format\tMonitor Model\tDetailsAgData\tFMX and CFX monitors\t/AgData/ AgGPS\tTMX and GFX monitors\t/AgGPS/ Expected file structure# GFX-750, TMX-2050 Copy Agdata ├── Fields └── *.agf ├── implements └── *.agi ├── prescriptions └── *.agm ├── Tasks └── *.agt ├── Users └── *.agu └── vehicles └── *.agv CFX-750, FMX Copy AgGPS └── Data └── \"Grower\" └── Farm └── field └── \"Task\" ├── *.cpg ├── *.dbf ├── *.shp └── *.shx Precision Planting (beta)# File Format\tMonitor Model\tDetailsPP2020\t20|20\tA zip with .2020 files. Expected file structure# 20|20 SeedSense Generation 1 and Generation 2 Copy ... ├── harvest_*.dat – Harvest data ├── field_map_*.dat – Planting data └── liquid_map_*.dat - AsApplied spraying data 20|20 SeedSense Generation 3 Copy ... └── *.2020 ISOXML# Expected file structure# Copy TASKDATA ├── *.XML └── *.bin CLAAS# Expected file structure# Copy TASKDATA ├── *.XML └── *.bin Kuhn# Expected file structure# Copy TASKDATA ├── *.XML └── *.bin Kverneland Group# Expected file structure# Copy TASKDATA ├── *.XML └── *.bin Müller-Elektronik# Expected file structure# Copy TASKDATA ├── *.XML └── *.bin Teknomika# Expected file structure# Copy TASKDATA ├── *.XML └── *.bin Topcon Precision Agriculture# Expected file structure# Copy TASKDATA ├── *.XML └── *.bin Farmobile# File Format\tDetailsGeoJSON\tGeoJSON files exported from Farmobile. Since GeoJSON files do not contain information on the units used, we assume the default units from Farmobile are being used. Other# File Format\tDetailsShapefile\tShapefiles exported from SMS. Since Shapefiles do not contain information on the units used, we assume the default units from SMS are being used. cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -F 'file=shapefile.zip' \\ 'https://api.withleaf.io/services/operations/api/batch?' \\ 'provider=JohnDeere&leafUserId=id' Response# Returns a single JSON object, as shown below: Copy { \"id\": \"996aea67-52bc-4d4b-9b77-028756dc0ee9\", \"leafUserId\": \"ede8f781-1d55-4b2d-83a1-6785ddab6e1d\", \"fileName\": \"Climate.zip\", \"size\": 8652951, \"provider\": \"Other\", \"status\": \"RECEIVED\", \"uploadTimestamp\": \"2021-03-12T19:50:55.567755Z\" } This id can then be queried to retrieve on Get batch to get the individual file ID's. Then you can query each of the files individually withGet a File or all of them, filtering by batchId, onGet all Files. Batch status# The status key will evolve accordingly to the following states: Status\tDescriptionRECEIVED\tIs the default state for every batch created PROCESSED\tWhen all the files included in the batch were processed, and at least one file have status SUCCESS FAILED\tThe batch did not generated any leaf files with status SUCCESS The messages with FAILED status have the key statusDetails. The statusDetails are just informative and should not be used programatically. Copy { \"id\": \"996aea67-52bc-4d4b-9b77-028756dc0ee9\", \"leafUserId\": \"ede8f781-1d55-4b2d-83a1-6785ddab6e1d\", \"fileName\": \"Climate.zip\", \"size\": 8652951, \"provider\": \"Other\", \"status\": \"FAILED\", \"statusDetails\": \"No operation found. Check file format before re-trying or contact support. Check file format before re-trying or contact support\", \"uploadTimestamp\": \"2021-03-12T19:50:55.567755Z\" } The following status can be present on statusDetails: Status\tDescriptionNo valid files found\tUnable to find a valid file based on supported extensions and expected file structure Leaf internal error. Please contact Support\tInternal error that need to be reported Files found but unable to read. Please check file format before re-trying or contact Support\tA valid file was found but could not be converted "},{"title":"Get Batch upload","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#get-batch-upload","content":"Once you've uploaded files, you can then query these files individually, merge the files, or query for them via Get all Files. You can also query the batch upload ID to see a list of files generated in the upload and a status of the upload with this endpoint. Python Copy import requests url = \"https://api.withleaf.io/services/operations/api/batch/{batch_id}/\" headers = {'Authorization': 'Bearer YOUR_LEAF_TOKEN'} response = requests.request(\"GET\", url, headers=headers) print(response.text) Response:# When you query a batch upload ID, you will receive a single JSON object: Copy { \"id\": \"f893c921-0f38-4f39-9f3e-be765ac61df0\", \"leafUserId\": \"bdf5f624-fb9b-4294-949c-29e979f0ce5a\", \"provider\": \"Other\", \"status\": \"PROCESSED\", \"leafFiles\": [ \"8334f4bb-48de-44e2-903b-6dedd6db6683\", \"81778f58-8eed-41cc-a025-e653ea85b01e\", \"0f606bef-b529-4899-854c-9b698cd08762\", \"84fec273-b458-4be7-8feb-44204502f126\", \"92b7367b-2ffd-4a82-ba9b-5a40e8b68714\", \"90e7e130-8f33-4752-b8f4-3a132246f047\", \"cb97857e-61b0-4fbe-a5c1-1083cfa6738f\", \"0cded205-7734-40fb-8906-b82d36e35845\", \"dc24d491-983c-4ebe-b961-8c749943529f\", \"67af8697-47bc-4886-935f-5880d1eba31d\", \"8b7d8b7b-e682-4c3e-aee2-3b7713cc81a4\", \"e5067ed3-8463-43b9-a8a5-3b3c1eee44bc\", \"b9d30d3a-0207-410f-81da-afb31a1b36cb\", \"eace9b90-a520-4c4c-af89-4c3fd5da68fa\", \"6ea55c68-203f-448b-9e7f-dcd014c31cc3\" ] } "},{"title":"Get all Batches","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#get-all-batches","content":"Once you've uploaded files, you can then query these files individually, merge the files, or query for them via Get all Files. You can also query the batch upload ID to see a list of files generated in the upload and a status of the upload with this endpoint. Python Copy import requests url = \"https://api.withleaf.io/services/operations/api/batch\" headers = {'Authorization': 'Bearer YOUR_LEAF_TOKEN'} response = requests.request(\"GET\", url, headers=headers) print(response.text) Response:# When you query a batch upload ID, you will receive a JSON with list of batches: Copy [ { \"id\": \"f893c921-0f38-4f39-9f3e-be765ac61df0\", \"leafUserId\": \"bdf5f624-fb9b-4294-949c-29e979f0ce5a\", \"provider\": \"Other\", \"status\": \"PROCESSED\", \"leafFiles\": [ \"8334f4bb-48de-44e2-903b-6dedd6db6683\", \"81778f58-8eed-41cc-a025-e653ea85b01e\", \"0f606bef-b529-4899-854c-9b698cd08762\", \"84fec273-b458-4be7-8feb-44204502f126\", \"92b7367b-2ffd-4a82-ba9b-5a40e8b68714\", \"90e7e130-8f33-4752-b8f4-3a132246f047\", \"cb97857e-61b0-4fbe-a5c1-1083cfa6738f\", \"0cded205-7734-40fb-8906-b82d36e35845\", \"dc24d491-983c-4ebe-b961-8c749943529f\", \"67af8697-47bc-4886-935f-5880d1eba31d\", \"8b7d8b7b-e682-4c3e-aee2-3b7713cc81a4\", \"e5067ed3-8463-43b9-a8a5-3b3c1eee44bc\", \"b9d30d3a-0207-410f-81da-afb31a1b36cb\", \"eace9b90-a520-4c4c-af89-4c3fd5da68fa\", \"6ea55c68-203f-448b-9e7f-dcd014c31cc3\" ] } ] "},{"title":"Retry a batch","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#retry-a-batch","content":" PUT /batch/{id}/retry If a batch upload does not complete as expected, this endpoint allows you to try again. This action will reprocess the fragments of uploaded data that didn't succeed processing before, keeping existing converted files unaffected. cURLPythonJavaScript Copy curl -X PUT \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/batch/{id}/retry' Response# Returns a single JSON object, similar to the upload endpoint response: Copy { \"id\": \"uuid\", \"leafUserId\": \"uuid\", \"fileName\": \"filename.zip\", \"size\": 8652951, \"provider\": \"Other\", \"status\": \"RECEIVED\", \"uploadTimestamp\": \"2021-03-12T19:50:55.567755Z\" } "},{"title":"Merge files","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#merge-files","content":" POST /files/merge Posts a merge operation to our server. A merge operation is performed asynchronously. This call will return immediately with the newly created file entry, but at this point, the file is not already processed and available. You will need to make a new GET /files request for the new id and check the status. A status value of processed means the file is done merging. A merge process has some validations, the files passed must belong to the same leafUserId, be of the same operation type and have the status as processed. If any of those filters fail, the endpoint will result in HTTP 400 error. It receives a single JSON object with the ids entry. Example: Copy { \"ids\": [ \"id1\", \"id2\", \"so on\" ] } cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"ids\": [ \"id1\", \"id2\" ] }' 'https://api.withleaf.io/services/operations/api/files/merge' Returns a single JSON object: Copy { \"id\": \"id\", \"status\": \"SENT_TO_MERGE\" } After a few minutes, you can consult the result of Leaf processing over this file by performing GET consults in this. "},{"title":"Get a file status","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#get-a-file-status","content":"Get status by file processing step by id. cURLPythonJavaScript Copy curl -X PUT \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/status' Response# Copy { \"rawGeojson\": { \"status\": \"processed\", \"message\": \"ok\" }, \"normalizedGeojson\": { \"status\": \"processed\", \"message\": \"ok\" }, \"standardGeojson\": { \"status\": \"processed\", \"message\": \"ok\" }, \"propertiesPNGs\": { \"status\": \"processed\", \"message\": \"ok\" }, \"areaAndYield\": { \"status\": \"processed\", \"message\": \"ok\" }, \"summary\": { \"status\": \"processed\", \"message\": \"ok\" }, \"units\": { \"status\": \"processed\", \"message\": \"ok\" }, \"originalFile\": { \"status\": \"processed\", \"message\": \"ok\" }, \"cleanupGeojson\": { \"status\": \"processed\", \"message\": \"ok\" } } "},{"title":"Alerts","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#alerts","content":"With Alerts you can be notified when something happens or changes instead of needing to repeatedly query for changes. Leaf Alerts support events that happen within Leaf and events that happen within supported 3rd party software. "},{"title":"List of Operations Events","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#list-of-operations-events","content":"Leaf Operations Service can Alert you on these events: list of Operations Events "},{"title":"Field Operations Endpoints","type":0,"sectionRef":"#","url":"docs/operations_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/operations/api This service has the following endpoints available: Description\tEndpointsGet all operations\tGET /operations Get an operation\tGET /operations/{id} Get an operation summary\tGET /operations/{id}/summary Get an operation's images\tGET /operations/{id}/images Get an operation's images V2\tGET /operations/{id}/imagesV2 Get an operation's units\tGET /operations/{id}/units Reprocess an operation\tPOST /operations/{id}/reprocess For easily testing these endpoints, we recommend using our Postman collection. "},{"title":"Get all operations","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#get-all-operations","content":" GET /operations Gets a paged list of operations that belong to the current logged in user. It is possible to filter the results by passing some query parameters. They are listed below. Parameter (to filter by)\tValuesleafUserId\tuuid of one of your users provider\tCNHI, JohnDeere, Trimble, ClimateFieldView, AgLeader or Leaf startTime\tISO 8601 date. Returns operations from the startTime onward updatedTime\tISO 8601 date. Returns operations from the updatedTime onward endTime\tISO 8601 date. Returns operations until the endTime operationType\tapplied, planted, harvested or tillage fieldId\tthe field where the operation happened You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetched (default is 0)size, an integer specifying the size of the page (max is 100) the default value for page size is 20 If the parameters page and size are not set, the endpoint will return 20 results. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations' Response# Copy [ { \"id\": \"1aa1ce7b-8bb9-4b2d-9421-d7a662cc1bb1\", \"apiOwnerUsername\": \"leaf\", \"leafUserId\": \"97770d44-62c4-48c3-8187-6be80f6de3d2\", \"startTime\": \"2015-04-18T19:31:27Z\", \"endTime\": \"2015-04-18T19:58:50Z\", \"updatedTime\": \"2021-08-24T16:00:15.062Z\", \"type\": \"planted\", \"files\": [ \"8334f4bb-48de-44e2-903b-6dedd6db6683\", \"81778f58-8eed-41cc-a025-e653ea85b01e\", \"0f606bef-b529-4899-854c-9b698cd08762\", \"84fec273-b458-4be7-8feb-44204502f126\", \"92b7367b-2ffd-4a82-ba9b-5a40e8b68714\" ], \"fields\": [ { \"id\": \"3a90d11a-70d0-4f62-b6d4-32006b1dcb6a\" } ] } ]  "},{"title":"Get an operation","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#get-an-operation","content":" GET /operations/{id} Gets a single operation by its id. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations/{id}' Response# Copy { \"id\": \"1aa1ce7b-8bb9-4b2d-9421-d7a662cc1bb1\", \"apiOwnerUsername\": \"leaf\", \"leafUserId\": \"97770d44-62c4-48c3-8187-6be80f6de3d2\", \"startTime\": \"2015-04-18T19:31:27Z\", \"endTime\": \"2015-04-18T19:58:50Z\", \"updatedTime\": \"2021-08-24T16:00:15.062Z\", \"type\": \"planted\", \"files\": [ \"8334f4bb-48de-44e2-903b-6dedd6db6683\", \"81778f58-8eed-41cc-a025-e653ea85b01e\", \"0f606bef-b529-4899-854c-9b698cd08762\", \"84fec273-b458-4be7-8feb-44204502f126\", \"92b7367b-2ffd-4a82-ba9b-5a40e8b68714\" ], \"fields\": [ { \"id\": \"3a90d11a-70d0-4f62-b6d4-32006b1dcb6a\" } ] }  "},{"title":"Get an operation summary","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#get-an-operation-summary","content":" GET /operations/{id}/summary Gets the summary, if available, for the operation id. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations/{id}/summary' Response# Here's a link with sample responses for \"planted\", \"applied\" and \"harvested\" operations.  "},{"title":"Get an operation's images","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#get-an-operations-images","content":" GET /operations/{id}/images Gets a list of PNG images generated from the operation's properties. cURLPythonJavaScriptJSON Response Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations/{id}/images'  "},{"title":"Get an operation's images V2","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#get-an-operations-images-v2","content":" GET /operations/{id}/imagesV2 Gets a list of PNG images generated from the operation's properties with improvements in the generation process. These images are based on the filteredGeojson. cURLPythonJavaScriptJSON Response Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations/{id}/imagesV2'  "},{"title":"Get an operation's units","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#get-an-operations-units","content":" GET /operations/{id}/units Gets the operations's properties and their units. cURLPythonJavaScriptJSON Response Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations/{id}/units' "},{"title":"Crop operation by field","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#crop-operation-by-field","content":" POST /operations/cropOperationByField This endpoint can be used to remove points from the operation standardGeojson that are outside of the field geometry. cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"id\": \"operationId\"}' \\ 'https://api.withleaf.io/services/operations/api/operations/cropOperationByField' Response# Returns a single JSON object: Copy { \"id\": \"163982a0-d4e8-49a0-9572-9079e17f7c7d\", \"message\": \"Sent operation to be processed.\", \"leafFileId\": \"8924ca07-4168-4f15-83ec-37dd344888f6\" } You could monitor the processing status using the leafFileId by our Alerts Service. "},{"title":"Reprocess an operation","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#reprocess-an-operation","content":" POST /operations/{id}/reprocess Allows reprocessing an operation already created, starting from the merge step. The standardGeoJSON, filteredGeoJSON, summary and images will be updated. cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations/{id}/reprocess' You could monitor the processing status by our Alerts Service.  "},{"title":"Alerts","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#alerts","content":"With Alerts you can be notified when something happens or changes instead of needing to repeatedly query for changes. Leaf Alerts support events that happen within Leaf and events that happen within supported 3rd party software. "},{"title":"List of Operations Events","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#list-of-operations-events","content":"Leaf Operations Service can Alert you on these events: list of Operations Events "},{"title":"Field Operations Overview","type":0,"sectionRef":"#","url":"docs/operations_overview","content":"","keywords":""},{"title":"Operations","type":1,"pageTitle":"Field Operations Overview","url":"docs/operations_overview#operations","content":"The main goal of this entity is to present, in a unified way and agnostic from the source of the files, operations executed in a given field. For all operations identified on Leaf, you also will find the standardGeoJson, images, and summary as you can find for each file. The operations entity will be automatically generated by the Leaf's API, considering operations files executed on the same field and type of the operation. You can found more information on how to extract on Operations endpoint page. "},{"title":"Machine File Conversion Sample Responses","type":0,"sectionRef":"#","url":"docs/machine_file_conversion_sample_output","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Machine File Conversion Sample Responses","url":"docs/machine_file_conversion_sample_output#overview","content":"This page shows and describes sample responses from Leaf API, along with a list of what properties you can expect for each type of data. "},{"title":"Machine File Summary","type":1,"pageTitle":"Machine File Conversion Sample Responses","url":"docs/machine_file_conversion_sample_output#machine-file-summary","content":"Leaf returns operation file summaries in a standardized format. Summaries use the point data to derive basic information about the operation and include links to the original files and images of an operation. Naturally, different types of operations contain different properties. For instance, an appliedoperation will contain appliedRate, whereas a harvested operation will contain wetMass and other Yield properties. The resource below shows a typical return. A list of all properties is available here. A list of the properties as well as a sample summary response for an operation file is included below. An operation returned by Leaf can be an individual file or contain multiple individual files (uploaded, merged or uploaded). If the operation contains more than one individual file, another key is added to the resource, the \"sources\" key, that is a list of individual file ids. If the operation was created by an upload on the /batch endpoint, the \"batchId\"key will be added to the resource with the corresponding uuid. "},{"title":"Sample Summary response","type":1,"pageTitle":"Machine File Conversion Sample Responses","url":"docs/machine_file_conversion_sample_output#sample-summary-response","content":"You can move through the three tabs below to see a sample of how Leaf returns each of the operation types. PlantedAppliedHarvestedTillage This is an example of a summary for a \"harvested\" operation Copy { \"id\": \"uuid\", \"provider\": \"provider name\", \"leafUserId\": \"uuid\", \"apiOwnerUsername\": \"email\", \"sourceFiles\": [], \"status\": \"processed\", \"origin\": \"provider or Leaf\", \"machines\": [\"uuid\"], \"createdTime\": \"2020-10-13T20:19:01\", \"fields\": [\"uuid\"], \"originalFile\": \"abc.com\", \"rawGeojson\": \"abc.com\", \"standardGeojson\": \"abc.com\", \"zippedPNGs\": \"abc.com\", \"summary\": { \"type\": \"Feature\", \"properties\": { \"elevation\": { \"avg\": 784.1533510349966, \"min\": 779.62913693, \"max\": 787.06455821, \"unit\": \"ft\" }, \"harvestMoisture\": { \"avg\": 12.888719743652945, \"min\": 1.0, \"max\": 15.95, \"unit\": \"percentage\" }, \"wetVolume\": { \"avg\": 0.04798510370695135, \"min\": 5.321358838842975E-11, \"max\": 0.348360994170295, \"unit\": \"bu\" }, \"wetVolumePerArea\": { \"avg\": 77.48316026098765, \"min\": 1.595E-7, \"max\": 1666.6666666666667, \"unit\": \"bu/ac\" }, \"totalWetMass\": { \"value\": 116805.33944346363, \"unit\": \"lb\" }, \"wetMassPerArea\": { \"avg\": 4648.989615659259, \"min\": 9.57E-6, \"max\": 100000.0, \"unit\": \"lb/ac\" }, \"totalWetVolume\": { \"value\": 1946.75565739101, \"unit\": \"bu\" }, \"dryMass\": { \"avg\": 0.04798510370695135, \"min\": 5.321358838842975E-11, \"max\": 0.348360994170295, \"unit\": \"bu\" }, \"dryMassPerArea\": { \"avg\": 77.48316026098765, \"min\": 1.595E-7, \"max\": 1666.6666666666667, \"unit\": \"bu/ac\" }, \"totalDryMass\": { \"value\": 116805.33944346363, \"unit\": \"lb\" }, \"dryVolume\": { \"avg\": 0.04798510370695135, \"min\": 5.321358838842975E-11, \"max\": 0.348360994170295, \"unit\": \"bu\" }, \"dryVolumePerArea\": { \"avg\": 77.48316026098765, \"min\": 1.595E-7, \"max\": 1666.6666666666667, \"unit\": \"bu/ac\" }, \"totalDryVolume\": { \"value\": 116805.33944346363, \"unit\": \"lb\" }, \"varieties\": [ { \"harvestMoisture\": { \"avg\": 12.888719743652945, \"min\": 1.0, \"max\": 15.95, \"unit\": \"percentage\" }, \"wetMass\": { \"value\": 116805.33944346363, \"unit\": \"lb\" }, \"wetMassPerArea\": { \"value\": 1.1487903524141723, \"unit\": \"lb/ac\" }, \"wetVolume\": { \"value\": 1946.75565739101, \"unit\": \"bu\" }, \"area\": { \"value\": 101676.81091506233, \"unit\": \"m2\" }, \"name\": \"variety\" } ], \"startTime\": \"2016-09-19T16:45:51.002Z\", \"operationType\": \"harvested\", \"originalOperationType\": \"name of the operation as returned by the provider\", \"endTime\": \"2016-09-19T19:50:25.991Z\", \"totalDistance\": { \"value\": 36481.33613821037, \"unit\": \"ft\" }, \"wetMass\": { \"avg\": 2.8791062224170814, \"min\": 3.192815303305785E-9, \"max\": 20.9016596502177, \"unit\": \"lb\" }, \"crop\": [ \"crop1\" ], \"totalArea\": { \"value\": 101676.81091506233, \"unit\": \"m2\" } }, \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [[[ [-89.80434894561768,40.47791686563837], [-89.80756759643555,40.4757623387113], [-89.80746030807495,40.47302011353734], [-89.80475664138794,40.47070219301965], [-89.80080842971802,40.47068586935202], [-89.79797601699828,40.472709973879255], [-89.7978687286377,40.47569704893722], [-89.80117321014404,40.47808008455794], [-89.80434894561768,40.47791686563837] ]]] } } } "},{"title":"Properties","type":1,"pageTitle":"Machine File Conversion Sample Responses","url":"docs/machine_file_conversion_sample_output#properties","content":"Select the tab you want to see: \"planted\", \"applied\", \"harvested\", or \"tillage\". PlantedAppliedHarvestedTillage key\tpresence\ttypecrop\t*\tstring seedRate\t*\tdict operationType\t*\tstring \"planted\" originalOperationType\t**\tstring totalArea\t*\tfloat elevation\t*\tdict varieties\t**\tdict seedRateTarget\t**\tdict seedDepth\t**\tdict machinery\t**\tlist of machineInfo objects speed\t**\tdict totalPlanted\t**\tint (number of seeds) operationDescription\t**\tstring downForce\t**\tdict singulation\t**\tdict * = Always in response ** = Usually in response but not required to pass tests "},{"title":"Standard Geojson","type":1,"pageTitle":"Machine File Conversion Sample Responses","url":"docs/machine_file_conversion_sample_output#standard-geojson","content":"When the data is present in the original file, Leaf standardizes names and units to create the standardGeojson. Below we list all the properties in the standardGeojson. "},{"title":"Sample Response","type":1,"pageTitle":"Machine File Conversion Sample Responses","url":"docs/machine_file_conversion_sample_output#sample-response","content":"Each operation file returns with a \"standardgeojson\" URL that allows you to download a full point dataset from the operation in a standardized geojson format. Below is an example of the format of each point in these files. PlantedAppliedHarvestedTillage Copy { \"type\": \"Feature\", \"geometry\": { \"type\": \"Point\", \"coordinates\": [-74.83762110788625, 28.686604864693564] }, \"properties\": { \"distance\": \"float\", \"heading\": \"float\", \"speed\": \"float\", \"elevation\": \"float\", \"equipmentWidth\": \"float\", \"recordingStatus\": \"string\", \"machinery\": [\"string\"], \"sectionId\" : \"int\", \"timestamp\": \"string\", \"operationType\": \"planted\", \"originalOperationType\": \"name of the operation as returned by the provider\", \"crop\": \"string\", \"variety\": \"string\", \"area\": \"float\", \"seedRate\": \"int\", \"seedRateTarget\": \"int\", \"seedDepth\": \"float\", \"downForce\": \"float\", \"singulation\": \"float\" } } "},{"title":"Properties","type":1,"pageTitle":"Machine File Conversion Sample Responses","url":"docs/machine_file_conversion_sample_output#properties-1","content":"PlantedAppliedHarvestedTillage key\tpresence\ttype\texample units\tdescriptioncoords\t*\tPoint (x,y)\t-\tPoint (x,y) timestamp\t*\tstring\t-\tISO 8601 date, complete and with Z. example: 2011-10-05T14:48:00.000Z crop\t*\tstring\t-\tCrop type (normalized) area\t*\tfloat\tft² or m²\tArea represented by point heading\t*\tfloat\tdegrees\tHeading of machine at point distance\t*\tfloat\tft or m\tDistance travelled since previous point elevation\t*\tfloat\tft or m\tDistance to sea level operationType\t*\tstring\t-\tstring \"planted\" originalOperationType\t**\tstring\t-\tstring equipmentWidth\t*\tfloat\tft or m\tWidth of implement recordingStatus\t*\tBoolean\t-\tRecording status of machine at point seedRate\t*\tint\tseeds/m² or seeds/ac\tThe rate of seeds planted at point variety\t**\tstring\t-\tThe variety of seed being planted speed\t**\tfloat\tft/s or m/s\tSpeed of machine at point sectionId\t**\tint\t-\tID of implement sensor section machinery\t**\tlist of machineInfo objects\t-\tname of machine & implement seedRateTarget\t**\tint\tseeds/m² or seeds/ac\tThe target rate of seeds to be planted at the point seedDepth\t**\tfloat\tcm\tThe depth at which seeds were planted at point productIndex\t**\tint\t-\tIndex of the applied product downForce\t**\tfloat\tlbf\tThe weight detected by the down force sensor on each row that has one singulation\t**\tfloat\t%\tThe performance of each meter on the planter xOffset\t**\tfloat\tm\tVertical offset from the instrumentation sensor and the monitor GPS system yOffset\t**\tfloat\tm\tHorizontal offset from the instrumentation sensor and the monitor GPS system * = Always in response ** = Usually in response but not required to pass tests $ = Not available when the crop is sugarcane Despite the example units, Leaf's API will push through every unit, if the processed file contains the required (marked with *) properties. "},{"title":"Valid points","type":1,"pageTitle":"Machine File Conversion Sample Responses","url":"docs/machine_file_conversion_sample_output#valid-points","content":"The points in the standardGeoJSON are considered valid if all the following rules are true: property\trulewetMass\t> 0.0 wetMassPerArea\t> 0.0 wetVolume\t> 0.0 wetVolumePerArea\t> 0.0 harvestMoisture\t> 0.0 appliedRate\t> 0.0 seedRate\t> 0.0 tillageDepthActual\t> 0.0 recordingStatus\t= \"On\" If necessary Leaf API can automatically clean these points up using the configuration cleanupStandardGeojson. "},{"title":"Images","type":1,"pageTitle":"Machine File Conversion Sample Responses","url":"docs/machine_file_conversion_sample_output#images","content":"Also, Leaf displays all the numerical properties across all operation types via a png file. Here's a sample response from a Leaf harvested file. Copy { \"property\": \"area\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"wetMass\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"wetVolume\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"distance\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"wetVolumePerArea\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"equipmentWidth\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"wetMassPerArea\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"sectionId\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"elevation\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"harvestMoisture\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"heading\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"dryMass\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"dryMassPerArea\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"dryVolume\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"dryVolumePerArea\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" } ] "},{"title":"Field Operations sample responses","type":0,"sectionRef":"#","url":"docs/operations_sample_output","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Field Operations sample responses","url":"docs/operations_sample_output#overview","content":"This page shows and describes sample responses from Leaf API, along with a list of what properties you can expect for each type of data. "},{"title":"Field Operations","type":1,"pageTitle":"Field Operations sample responses","url":"docs/operations_sample_output#field-operations","content":"A Field Operation processed by Leaf's API returns a list of content that contains most of the basic info related to the authenticated user, and also the Field Boundaries and File Operations attached to each other by the background processing. Here's an example of a Field Operation Copy { \"id\": \"uuid\", \"apiOwnerUsername\": \"leaf@withleaf.io\", \"leafUserId\": \"uuid\", \"startTime\": \"yyyy-MM-ddTHH:mm:ss.SZ\", \"endTime\": \"yyyy-MM-ddTHH:mm:ss.SZ\", \"updatedTime\": \"yyyy-MM-ddTHH:mm:ss.SZ\", \"type\": \"string\", \"files\": [ \"uuid\" ], \"fields\": [ { \"id\": \"uuid\", \"coverage\": \"float\" } ], \"providers\": [ \"string\" ] } Field operations have many features that can be accessed via /featureName added to the base url, ranging from the standardized data to the operation units. Here's a sample response of each of these features. "},{"title":"Field Operations Standard GeoJSON","type":1,"pageTitle":"Field Operations sample responses","url":"docs/operations_sample_output#field-operations-standard-geojson","content":"Here's an example of a standard geojson from a Field Operation Copy { \"standardGeojson\": \"URL\" } "},{"title":"Field Operations Filtered GeoJSON","type":1,"pageTitle":"Field Operations sample responses","url":"docs/operations_sample_output#field-operations-filtered-geojson","content":"tip To use this option, the operationsFilteredGeojson configuration must be enabled. Here's an example of a filtered geojson from a Field Operation that can be access from the /operations/{id}/filteredGeojsonendpoint. Copy { \"filteredGeojson\": \"URL\" } The filtered GeoJSON is the file that went through the data cleaning process, removing the points with the following criteria: speed less than 0.5 m/s (for all operation types) The generated files will be used as a basis for generating new operations images. Outliers# This is a option for cleaning the filteredGeoJSON based on standard deviation to remove outliers on harvest data.  All points with the harvested volume value far 3 standard deviation from the mean will be excluded. This is the default value and can be changed in the operationsOutliersLimit configuration. To disable the removal of outliers just use the operationsRemoveOutliers configuration. "},{"title":"Field Operations Summary","type":1,"pageTitle":"Field Operations sample responses","url":"docs/operations_sample_output#field-operations-summary","content":"Here's an example of a summary from a Field Operation. It's important to mention that the output displayed in the Field Operation Summary is heavily impacted by the operationType property. You can move through the four tabs below to see a sample of how Leaf returns each of the operation types. PlantedHarvestedAppliedTillage Copy { \"type\": \"Feature\", \"properties\": { \"totalDistance\": { \"value\": 33277.419952513315, \"unit\": \"ft\" }, \"speed\": { \"avg\": 4.297550131597641, \"min\": 0.0, \"max\": 7.842694282531738, \"unit\": \"mi/hr\" }, \"startTime\": \"2015-10-06T23:51:23.040+00:00\", \"endTime\": \"2015-10-07T17:09:26.040+00:00\", \"totalArea\": { \"value\": 58926.234671233884, \"unit\": \"m2\" }, \"elevation\": { \"avg\": 165.5691147167663, \"min\": 58.6, \"max\": 195.3, \"unit\": \"ft\" }, \"crop\": [ \"corn\" ], \"operationType\": \"harvested\", \"wetMass\": { \"avg\": 11.810479659859125, \"min\": 0.031766114277891125, \"max\": 58.95, \"unit\": \"lb\" }, \"totalWetMass\": { \"value\": 165960.86018034007, \"unit\": \"lb\" }, \"wetMassPerArea\": { \"avg\": 11397.635987349213, \"min\": 189.17227229135673, \"max\": 646492.91259439, \"unit\": \"lb/ac\" }, \"wetVolume\": { \"avg\": 0.21090142249748436, \"min\": 5.672520406766272E-4, \"max\": 1.0526785714285716, \"unit\": \"bu\" }, \"totalWetVolume\": { \"value\": 2963.5867889346546, \"unit\": \"bu\" }, \"wetVolumePerArea\": { \"avg\": 203.5292140598074, \"min\": 3.3780762909170847, \"max\": 11544.516296328393, \"unit\": \"bu/ac\" }, \"harvestMoisture\": { \"avg\": 15.38852974665528, \"min\": 6.05, \"max\": 18.16, \"unit\": \"percentage\" }, \"varieties\": [ { \"harvestMoisture\": { \"avg\": 15.38852974665528, \"min\": 6.05, \"max\": 18.16, \"unit\": \"percentage\" }, \"wetMass\": { \"value\": 165960.86018034007, \"unit\": \"lb\" }, \"wetMassPerArea\": { \"value\": 2.816417188477808, \"unit\": \"lb/ac\" }, \"wetVolume\": { \"value\": 2963.5867889346546, \"unit\": \"bu\" }, \"area\": { \"value\": 58926.234671233884, \"unit\": \"m2\" }, \"name\": \"Corn\" } ], \"machinery\": [ { \"name\": \"Case IH Corn Head 20.000010800000002ft 8row\", \"type\": \"implement\", \"brand\": \"Case IH\" }, { \"name\": \"Case IH 8120\", \"type\": \"machine\", \"serialNumber\": \"8000001\", \"brand\": \"Case IH\" }, { \"name\": \"Case IH Corn Head 20ft 12row\", \"type\": \"implement\", \"brand\": \"Case IH\" }, { \"name\": \"Case IH X120 Series 8120\", \"type\": \"machine\", \"serialNumber\": \"8220490\", \"brand\": \"Case IH\" } ] }, \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [[[ [-89.80434894561768,40.47791686563837], [-89.80756759643555,40.4757623387113], [-89.80746030807495,40.47302011353734], [-89.80475664138794,40.47070219301965], [-89.80080842971802,40.47068586935202], [-89.79797601699828,40.472709973879255], [-89.7978687286377,40.47569704893722], [-89.80117321014404,40.47808008455794], [-89.80434894561768,40.47791686563837] ]]] } } "},{"title":"Field Operations Images","type":1,"pageTitle":"Field Operations sample responses","url":"docs/operations_sample_output#field-operations-images","content":"Here is an example of Images from Field Operations. Copy [ { \"property\": \"string\", \"ramp\" : { \"0%\" : [ 200, 0, 0 ], \"35%\" : [ 255, 40, 0 ], \"45%\" : [ 255, 150, 0 ], \"55%\" : [ 255, 240, 0 ], \"65%\" : [ 0, 230, 0 ], \"75%\" : [ 0, 190, 0 ], \"100%\" : [ 0, 130, 0 ], \"nv\" : [ 0, 0, 0, 0 ] }, \"url\": \"URL\" } ] Field Operations Images V2# This endpoint version produces images based on the filteredGeoJSON, therefore it will be active whenever the data filter option is active. The new images have considerable improvements over the previous one. They are generated with a standard fixed color ramp and the data is automatically distributed into 7 classes using quantile classification. Note that the return is different from the previous version, with the option of extent and legend available. Copy [ { \"property\": \"string\", \"legend\": { \"ranges\": [ { \"colorCode\": \"#C80000\", \"max\": 20, \"min\": 0 }, { \"colorCode\": \"#FF2800\", \"max\": 50, \"min\": 20 }, { \"colorCode\": \"#FF9600\", \"max\": 100, \"min\": 50 }, { \"colorCode\": \"#FFF000\", \"max\": 250, \"min\": 100 }, { \"colorCode\": \"#00E600\", \"max\": 340, \"min\": 250 }, { \"colorCode\": \"#00BE00\", \"max\": 480, \"min\": 340 }, { \"colorCode\": \"#008200\", \"max\": 570, \"min\": 480 } ] }, \"extent\": { \"xmin\": 0.0, \"xmax\": 0.0, \"ymin\": 0.0, \"ymax\": 0.0 }, \"url\": \"URL\" } ] If the filteredGeoJSON fails to process, images will continue to be generated from the standardGeoJSON. tip Important: once active, the images will be available for access only via the /imagesV2 endpoint. "},{"title":"Field Operations Units","type":1,"pageTitle":"Field Operations sample responses","url":"docs/operations_sample_output#field-operations-units","content":"Here is an example of Units from the numerical properties of the Field Operations. Copy { \"elevation\": \"ft\", \"area\": \"m2\", \"harvestMoisture\": \"percentage\", \"equipmentWidth\": \"ft\", \"distance\": \"ft\", \"heading\": \"arcdeg\", \"wetVolume\": \"bu\", \"wetVolumePerArea\": \"bu/ac\", \"wetMass\": \"lb\", \"wetMassPerArea\": \"lb/ac\", \"speed\": \"mi/hr\" } "},{"title":"Planet Overview","type":0,"sectionRef":"#","url":"docs/planet_overview","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"Release notes","type":0,"sectionRef":"#","url":"docs/release_notes","content":"","keywords":""},{"title":"2.116.0","type":1,"pageTitle":"Release notes","url":"docs/release_notes#21160","content":"2023-03-09 Leaf LinkNow you can save time implementing Leaf using the File Upload and Provider connection widgets from Leaf Link. "},{"title":"2.115.0","type":1,"pageTitle":"Release notes","url":"docs/release_notes#21150","content":"2023-02-16 Agvance integrationNew integration available. Agvance Grower, Farm, Field, and boundaries will be available in our Field Boundary Management service. Crop monitoring The satellite image bands are now grouped into a single tif file multiband.tif, available for all providers. Field operations Fixed the unit of measure for cotton operation files (John Deere), now calculated based on bales. "},{"title":"2.113.0","type":1,"pageTitle":"Release notes","url":"docs/release_notes#21130","content":"2023-01-19 Stara integrationNew integrations available for Stara. Machine Files, Field Operations, Field Boundaries and Machines are services available for this provider. "},{"title":"2.110.0","type":1,"pageTitle":"Release notes","url":"docs/release_notes#21100","content":"2022-12-08 Additional planting properties New properties available for planted operations. The downForce and singulation properties, when available, will be present in the standardGeojson, summary and images of operations. "},{"title":"2.106.0","type":1,"pageTitle":"Release notes","url":"docs/release_notes#21060","content":"2022-10-13 Yield cleaning There is now a configuration to enable the use of new cleanup step. "},{"title":"2.105.0","type":1,"pageTitle":"Release notes","url":"docs/release_notes#21050","content":"2022-10-05 Yield cleaning Harvest data can now go through a new cleanup step based on the removal of outliers. More info here.We also improved the operations images. More info here. "},{"title":"2.100.0","type":1,"pageTitle":"Release notes","url":"docs/release_notes#21000","content":"2022-08-31 Beta Layers upload There is now an option to upload layer files directly to Climate FieldView via Leaf API. Currently, only RGB GeoTIFF files are supported. More info here. "},{"title":"2.98.0","type":1,"pageTitle":"Release notes","url":"docs/release_notes#2980","content":"2022-08-16 Machine file conversion New properties dryMass dryMassPerArea dryVolume and dryVolumePerArea for dry Yield are available in the operation summary and in the standard GeoJSON.  "},{"title":"2.92.0","type":1,"pageTitle":"Release notes","url":"docs/release_notes#2920","content":"2022-07-05 Crop Monitoring Usable Data Mask 2.0 (UDM2) is now available for Planet The mask images are available through the Planet udm2 asset type. More info here. "},{"title":"2.91.0","type":1,"pageTitle":"Release notes","url":"docs/release_notes#2910","content":"2022-06-29 Crop Monitoring NDRE images Normalized difference red edge (NDRE) index is now available for Sentinel and Planet.  Machine file conversion Added support for Avoirdupois ounce unit of measure.  "},{"title":"2.89.0","type":1,"pageTitle":"Release notes","url":"docs/release_notes#2890","content":"2022-06-14 Machine file conversion [beta] Added support for 20|20 files from Precision Planting  Fields New filter available in the fields and farms GET endpoints It is now possible to filter fields by farm and farms by grower.  "},{"title":"2.88.0","type":1,"pageTitle":"Release notes","url":"docs/release_notes#2880","content":"2022-06-07 Beta Machines Deprecated property createdAt in Machines. Use createdTime to obtain the creation time instead. Fields Fixing alerts related to creating and updating field boundaries There was an issue interpreting updates from a provider. More information about alerts here. "},{"title":"2.87.0","type":1,"pageTitle":"Release notes","url":"docs/release_notes#2870","content":"2022-05-24 Machine file conversion Added support for ISOXML files "},{"title":"2.86.0","type":1,"pageTitle":"Release notes","url":"docs/release_notes#2860","content":"2022-05-24 Machine file conversion New properties on the Standard GeoJSON Optional properties: cropFlow, productIndex, proteinPercentage, samplingInterval, xOffset and yOffset. More information here. "},{"title":"2.85.0","type":1,"pageTitle":"Release notes","url":"docs/release_notes#2850","content":"2022-05-17 Machine file conversion Machine list available in the operation files The new property machine list all machine ids under the files entity (not to be confused with machinery property available in the summary). More information here. Beta Machines The properties vin, model, make, category and modelYear are now also available in the Machine POST endpoint. "},{"title":"2.84.0","type":1,"pageTitle":"Release notes","url":"docs/release_notes#2840","content":"2022-05-11 Machine file conversion New config available: splitOperationsByField If set to true, Leaf will split your Field Operations based on the intersection of each Leaf Field Boundary. The default value is false. Check all the configurations available here. "},{"title":"2.83.0","type":1,"pageTitle":"Release notes","url":"docs/release_notes#2830","content":"2022-05-03 Beta Machines New machine properties available: vin, model, make, category and modelYear. The vin property can be used to query. "},{"title":"2.82.0","type":1,"pageTitle":"Release notes","url":"docs/release_notes#2820","content":"2022-04-26 Machine file conversion Sugar cane Leaf API now also support sugar cane files. Be aware that volume measurements will not be available for this crop type. New config available: operationsAutoSync If set to true (default), Leaf will automatically synchronize provider's operations. Check all the configurations available here. "},{"title":"2.81.0","type":1,"pageTitle":"Release notes","url":"docs/release_notes#2810","content":"2022-04-20 Machine file conversion New config available: cleanupStandardGeojson If set to true (default), Leaf will automatically remove invalid points from the standardGeoJSON file for operations. Check all the configurations available here. (0,0) point removed All (0,0) points are now automatically removed in our converters. Crop monitoring Planet: new asset type available Leaf API now also supports PlanetScope's analytics_5b asset type which has 5 bands: Red, Green, Blue, Red-Edge and Near infrared. You can check our documentation for how to filter images by different asset types. "},{"title":"Quickstart","type":0,"sectionRef":"#","url":"docs/quickstart","content":"","keywords":""},{"title":"Leaf Quickstart","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#leaf-quickstart","content":"This quickstart tutorial is written help you quickly experience and start building with Leaf. First, please register on our website to receive your credentials. We've included sample data in your account so you can begin querying data via Leaf immediately. Leaf's Postman collection Below you'll find instructions using curl and python, and we've also built a Postman collection to accompany this tutorial. Please find it here: Leaf Postman collection "},{"title":"Authentication","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#authentication","content":"After creating and confirming your account, the first step is to authenticate with your email and password to retrieve a Leaf token. This token is what we'll use in subsequent steps to talk to the API. Be sure to keep a copy of this token for the remaining steps. cURLPythonJavaScript Copy curl -X POST \\ -H 'Content-Type: application/json' \\ -d '{ \"username\":\"username\", \"password\":\"password\", \"rememberMe\":\"true\" }' \\ 'https://api.withleaf.io/api/authenticate' note: Your Leaf Token lasts for 30 days with \"rememberMe\": \"true\" in the json. If you want it to last only 24h, feel free to set \"rememberMe\" to \"false\". After expiration, just make the same request to the same endpoint and you will get a new access token.  "},{"title":"Get sample Field with attached operations","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-sample-field-with-attached-operations","content":"Inside your account, we've created a sample LeafUser and populated it with data. Let's take a look at the fields endpoint to see the sample field: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/fields' It returns a JSON object representing the Fields and you can see that there are operations ids attached. Next section will explain how to get the operations by those ids. "},{"title":"Get all sample operation files","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-all-sample-operation-files","content":"Next, let's look at operations data. 'Operations' refers to the data collected when a machine and any implements performed an operation on a farm. This command will list operations files available across your whole account: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files' "},{"title":"Get specific sample operation file","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-specific-sample-operation-file","content":"Now that you have a file ID, you can query for the operations data itself and a summary as well. cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}' "},{"title":"Get sample operation file summary","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-sample-operation-file-summary","content":"cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/summary' "},{"title":"Get sample operation file image","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-sample-operation-file-image","content":"You may have already noticed that we're seeing a lot of operations files for this one field and the timestamps span just a few days. This is because we're looking at multiple files output from a machine that effectively represent one large operation - a harvest. Before we talk about merging these pieces into a single operation, let's look at an image from one of the pieces: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/images' "},{"title":"Get sample merged operation file","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-sample-merged-operation-file","content":"A single strip appears in that image which is no mistake. It's also not as useful as seeing the whole operation across the whole field! To solve this, we allow you to request a merge of operations data and produce images for data of the same type and timeframe. The sample data already includes a merged file. Let's take a look at that merged harvesting image which is colored to indicate the range of wet mass collected. First, let's find the merged file by simply adding a parameter to filter to origin=merged cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files?origin=merged' And finally, use that file ID to retrieve a list of images, one for each operation property. From this response, you can load one of the sample images: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/images' "},{"title":"Get sample satellite imagery","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-sample-satellite-imagery","content":"Finally, let's take a look at some satellite imagery. Using data from Sentinel-2, we produce NDVI images for fields you define to be monitored. First we'll list the fields being monitored from the satellite service: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields/' And then we can pull up the sample NDVI image of the sample field like this: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields/{field_id}/processes' "},{"title":"Endpoints","type":0,"sectionRef":"#","url":"docs/satellite_endpoints","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/satellite_overview","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"Sentinel Overview","type":0,"sectionRef":"#","url":"docs/sentinel_overview","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"Leaf Connect","type":0,"sectionRef":"#","url":"docs/sharedata","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"How to get the list of products from a John Deere operation?","type":0,"sectionRef":"#","url":"docs/usecase_johndeere_products","content":"This use case describes how to get the list of products from a John Deere operation. The following steps will be necessary: Register with Leaf Register with John Deere Upload data in John Deere Operations Center Create a Leaf User Add credentials to the Leaf User","keywords":""},{"title":"General Setup Information","type":0,"sectionRef":"#","url":"docs/setup_information","content":"","keywords":""},{"title":"Customer Sandbox","type":1,"pageTitle":"General Setup Information","url":"docs/setup_information#customer-sandbox","content":"All new accounts created in Leaf will be linked to the Sandbox environment, this is basically a restricted testing environment. Currently accounts in this environment will be limited to creating only fiveleaf users. Upgrade To upgrade your account, contact sales. "},{"title":"Pagination","type":1,"pageTitle":"General Setup Information","url":"docs/setup_information#pagination","content":"All endpoints that return a list of resources are paginated. You can select the size of the page and which page to get by using the query parameters size and page. size - Defines the size of the page. Defaults to 20. Max size is 100.page - Defines which page to fetch, considering each page has size elements. The first page is page 0. Defaults to 0. "},{"title":"Date format","type":1,"pageTitle":"General Setup Information","url":"docs/setup_information#date-format","content":"All the dates follow ISO 8601 format. Specifically, all the dates should be in the format \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\". "},{"title":"File archiving","type":1,"pageTitle":"General Setup Information","url":"docs/setup_information#file-archiving","content":"Be default, our API archive the files to a slower storage after 180 days without access. The file will be available again only upon a support request. "},{"title":"File size","type":1,"pageTitle":"General Setup Information","url":"docs/setup_information#file-size","content":"Currently, our API have a 3 gigabytes limit for file uploads. This is applied in the file upload endpoint "},{"title":"Error codes","type":1,"pageTitle":"General Setup Information","url":"docs/setup_information#error-codes","content":"Service\tEndpoint\tMessage\tHTTP Status\tReasonField Operations\tUpload a file\tBad Request\t400\tThe uploaded file is bigger than 3 GB  "},{"title":"How to get satellite field images","type":0,"sectionRef":"#","url":"docs/usecase_satellite","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"How to get satellite field images","url":"docs/usecase_satellite#about","content":"This use case describes how to get the satellite field images and display them on Leaflet JS. "},{"title":"Register","type":1,"pageTitle":"How to get satellite field images","url":"docs/usecase_satellite#register","content":"To register with Leaf: Go to registration link and create your account.Save your credentials to use in the next steps. "},{"title":"Backend","type":1,"pageTitle":"How to get satellite field images","url":"docs/usecase_satellite#backend","content":""},{"title":"Create server","type":1,"pageTitle":"How to get satellite field images","url":"docs/usecase_satellite#create-server","content":"After registered, you will need to setup a server, in this case we will use the Express Framework to create the server and the Axios library to do POST/GET requests in our server: Copy const express = require(\"express\"); const app = express(); const axios = require(\"axios\"); Now you will need to define some routes that your server will use, in this example, we define the follow routes: "},{"title":"Routes","type":1,"pageTitle":"How to get satellite field images","url":"docs/usecase_satellite#routes","content":"Route '/create_token'# In this route, we will create the user token to use in the next steps. In the data object, we need the attributes username and password that comes from a form in the front-end, and the attribute rememberMe is optional. We make a POST request with AXIOS to the Leaf API endpoint that is responsible to create our token, if everything is ok, it will return an status code 200, and the token will be returned to the user, if anything is wrong, it will be catched by the .catch() function. Copy app.post(\"/create_token\", (req, res) => { // Comes from the frontend form let email = req.body.email.trim(); let passwd = req.body.password.trim(); // Leaf API endpoint let endpoint = \"https://api.withleaf.io/api/authenticate\"; // Data to post to endpoint let data = { username: email, password: passwd, rememberMe: \"true\" }; axios .post(endpoint, data) .then(function (response) { // Save the token in the token variable token = response.data[\"id_token\"]; // Return ok and the token to the frontend request res.json({ message: \"Congrats! Login done!\", token: token }); }) .catch((error) => { if (error.response.data.status === 400) { // If something wrong happens, returns login failed. res.json({ message: \"Oops! Login failed!\", token: \"\" }); } else if (error.response.data.status === 401) { // If the credentials are wrong, returns that. res.json({ message: \"Oops! Invalid credentials!\", token: \"\" }); } }); }); Here you can see the Authentication documentation. Route '/monitored_fields'# In this route, we will be able to retrieve all our satellite monitored fields. First we verify if the front-end request is sending a token in the Authorization header, if yes, we do a GET request with AXIOS to the Leaf API endpoint responsible to give us that information and then we return it to the frontend. Copy app.get(\"/monitored_fields\", (req, res) => { if (!req.header(\"authorization\")) { res.json(\"Invalid token, generate one first!\"); } else { let token = req.header(\"authorization\"); let endpoint = \"https://api.withleaf.io/services/satellite/api/fields\"; let headers = { Authorization: `Bearer ` + token }; axios .get(endpoint, { headers }) .then(function (response) { res.json(response.data); }) .catch(function (error) { res.json(\"Something wrong happend during the request!\"); }); } }); Route '/field_images'# In this route, we will retrieve all the images from one satellite monitored field. In the first step, we will do a GET request with AXIOS to the Leaf API endpoint that will return to us the information about the field selected, with this endpoint, we can get the field coordinates and send to the frontend, so we can plot the images in the right point of the map. In the second step, we will do a GET request with AXIOS to the Leaf API endpoint that is responsible to return the images about the field selected, after receiving the images, we will sort them by the date, and we will save in another array just the images that are of the type NDVI_RELATIVE or RGB, that are the ones we are interested now. Copy app.post(\"/field_images\", (req, res) => { if (!req.header(\"authorization\")) { res.json(\"Invalid token, generate one first!\"); } else { // This comes from the frontend form. let field_id = req.body.id; let startDate = req.body.startDate; let endDate = req.body.endDate; let endpoint = \"https://api.withleaf.io/services/satellite/api/fields/\" + field_id; let headers = { Authorization: `Bearer ` + token }; let field_geometry; // First step axios .get(endpoint, { headers }) .then(function (response) { if (response.data <= 0) { res.json(\"No images were found for the time and field selected\"); } else { // Get the field coordinates field_geometry = response.data.geometry.coordinates; endpoint = \"https://api.withleaf.io/services/satellite/api\" + \"/fields/\" + field_id + \"/processes\"; let params = { startDate: startDate, endDate: endDate }; headers = { Authorization: `Bearer ` + token }; // Second step axios .get(endpoint, { headers, params }) .then(async function (response) { let data_obj = []; data_obj = response.data; if (data_obj.length > 0) { // Here we are creating an Date Object with the date string that comes // from the API return, so we can sort the days by the date. data_obj.forEach((e) => { e.date = new Date(e.date); }); // Sorting the days by the dates. let sorted_days = data_obj.sort( (objA, objB) => Number(objB.date) - Number(objA.date) ); // This is the variable that we will fill and return in the request. let providerPNG = []; sorted_days.forEach((e) => { // Checking if the clouds coverage of that image is less than 80%. if (e.clouds < 80) { let day = { id: e.id, date: e.date, clouds: e.clouds, coverage: e.coverage, provider: e.provider, images: [], }; // For each image of each day, we will check if the image is of // the type 'NDVI_RELATIVE' or 'RGB', if yes, we push it to the // providerPNG array. e.images.forEach((f) => { if ( f.type === \"png\" && (f.url.includes(\"NDVI_relative.png\") || f.url.includes(\"RGB.png\")) ) { day.images.push(f); } }); providerPNG.push(day); } }); // Checking if the length of providerPNG is greater then 0, if yes, // return the images and the field geometry. if (providerPNG.length > 0) { res.json({ geometry: field_geometry, images: providerPNG }); } else { res.json( \"No images were found for the time and field selected\" ); } } else { res.json( \"No images were found for the time and field selected\" ); } }) .catch(console.error); } }) .catch(console.error); } }); Here you can see the Satellite documentation. Route '/create_field'# In this route, we will receive data from the frontend and make a POST request with AXIOS to the Leaf API endpoint responsible for creating satellite monitored fields. Before trying to reach the Leaf API endpoint, we need to verify if the GEOJSON that comes from the frontend is valid, so we will not make irregular post requests to the endpoint. You can check here more info about GEOJSON. Copy app.post(\"/create_field\", (req, res) => { if (!req.header(\"authorization\")) { res.json(\"You have to login first!\"); } else { // This comes from the frontend form. let field_name = req.body.field_name; let boundery_type = req.body.boundery_type; let field_boundery = req.body.field_boundery; let days_before = req.body.days_before; // A function to try to parse the form geojson data to a object. function isJsonString(str) { try { field_boundery = JSON.parse(str); } catch (e) { return false; } return true; } if (!isJsonString(field_boundery)) { res.json( \"Error during compiling your geojson, try again with valid data.\" ); } else { let endpoint = \"https://api.withleaf.io/services/satellite/api/fields\"; let headers = { Authorization: `Bearer ` + token }; // Define the DATA object that we will send in the POST request to // Leaf API endpoint. const data = { externalId: field_name, daysBefore: days_before, providers: [], geometry: { type: boundery_type, coordinates: [field_boundery], }, }; // Here is the AXIOS post, we will return 'Field created' if everything // was ok with the data and the field was created. If something is wrong // we return the message 'Something wrong happened, verify your data and // try again!' axios .post(endpoint, data, { headers }) .then(function (response) { res.json(\"Field created\"); }) .catch(function (error) { console.log(error); res.json(\"Something wrong happened, verify your data and try again!\"); }); } } }); Here you can see the Satellite documentation. "},{"title":"Start the server","type":1,"pageTitle":"How to get satellite field images","url":"docs/usecase_satellite#start-the-server","content":"For the last part, we need to start our server, and make the front-end! Copy app.listen(3000, async () => { console.log(\"Server started!\"); }); "},{"title":"Frontend","type":1,"pageTitle":"How to get satellite field images","url":"docs/usecase_satellite#frontend","content":"In the frontend, we will use the Angular Framework! It's important to say that we will use the LeafletJS to display the map and images on it. "},{"title":"Creating the project","type":1,"pageTitle":"How to get satellite field images","url":"docs/usecase_satellite#creating-the-project","content":"To create our project, we can use this command from angular ng new <your app name>. This command will ask some questions about the project and them create all the files and folder structure to our project. "},{"title":"Creating the component","type":1,"pageTitle":"How to get satellite field images","url":"docs/usecase_satellite#creating-the-component","content":"After doing this step, we will need to create our Map Component, to do this you can use also this command from angular: ng generate component <component-name>, this will generate 3 files for your component: The CSS File for your component, the HTML file, and the TS file, where the logic will be. In our HTML we will have three simple forms to get the information that we need, and with that information we will proccess and send to our service, that will communicate with our API, e will have one <div> that will contain our map, and our sidebar. "},{"title":"Creating the service","type":1,"pageTitle":"How to get satellite field images","url":"docs/usecase_satellite#creating-the-service","content":"To create our service that will communicate with our API, we will use the command ng generate service <service-name>, this will generate the file responsible. In the next steps, it will be demonstrated how to do every step until we show the images in the map. "},{"title":"Main functions","type":1,"pageTitle":"How to get satellite field images","url":"docs/usecase_satellite#main-functions","content":"Initializing the forms and the map# This is our function that will be called automatically by angular when the page is started, it initializes the map with the sidebar in the function initMap() and also initialize the forms that we need. Don't forget that you need to set the GETTERS and SETTERS for each attribute defined below, so you can retrieve and change the value. Copy ngOnInit(): void { this.initMap(); localStorage.removeItem('token'); this.loginForm = new FormGroup({ email: new FormControl(''), password: new FormControl(''), }); this.searchImagesForm = new FormGroup({ fieldId: new FormControl(''), startDate: new FormControl(''), endDate: new FormControl(''), }); this.createFieldForm = new FormGroup({ fieldId: new FormControl(''), daysBefore: new FormControl(''), bounderyType: new FormControl(''), fieldBoundery: new FormControl(''), provider: new FormControl(''), }); } Login# This function will be called by our button in the form, we need to retrieve the information from the form using the getters and then send it to our service, that will add our token to the header and send to the back-end. Copy doLogin() { this.isLoading = true; // Using the email and password getters: let email = this.getEmail().value; let password = this.getPassword().value; // You could also do this way: // this.loginForm.get('email')!.value if (email === '' || password === '') { this.isLoading = false; // You can do some validations here } else { // Calling a function from our appService, sending the email and password // that will be redirected to the back-end. this.appService.login(email, password).subscribe((data) => { this.isLoading = false; this.loginMessage = data.message; if (data.message === 'Congrats! Login done!') { // Saving our token that the back-end send back to us // for the next steps this.isLogged = true; localStorage.setItem('token', data.token); } else { this.isLogged = false; } }); } } In our service, we will define the function login() Copy login(email: string, password: string): Observable<any> { return this.http.post<any>(this.apiUrl + 'create_token', { email: email, password: password, }); } Load satellite monitored fields# This function is responsible to reach our backend and give us back the list of the available satellite monitored fields. After receiving them you can show it to the user to choose which one he wants to see images. Copy loadCreatedFields() { this.isLoading = true; // Sending our token that we retrieved in the first step. this.appService .loadFields(localStorage.getItem('token')!) .subscribe((data) => { this.isLoading = false; this.fields = data; }); } In our service, we will define the function loadFields() Copy loadFields(token: string): Observable<any> { // Setting our token in the Authorization header so we // can send it to the back-end let headers = new HttpHeaders().set('Authorization', token); return this.http.get<any>(this.apiUrl + 'monitored_fields', { headers }); } Load the images for a specific field# This function is reponsible for getting the form information and send to our back-end that will return the satellite images for a specific field. After our backend return to us the list of the images, we need to retrieve the coordinates of that field from the backend response, and also the images. With the geometry, we can create a GEOJSON layer, to display the bounds of the field, and with the images we can plot them in the map. Copy loadFieldImages() { this.isLoading = true; this.images = []; let fieldId = this.getFieldId()!.value; let startDate = this.getStartDate()!.value; let endDate = this.getEndDate()!.value; if (fieldId === '' || startDate === '' || endDate === '') { this.loadImagesMessage = 'You need to fill all the inputs.'; this.isLoading = false; } else { this.appService .loadImages(fieldId, startDate, endDate, localStorage.getItem('token')!) .subscribe((data) => { this.isLoading = false; this.loadImagesMessage = ''; if ( data === 'No images were found for the time and field selected' || data === 'Request failed with status code 404' ) { // Here you can show something to the user if no images were found this.images = []; this.loadImagesMessage = data; } else { this.images = []; this.images = data.images; // Save the field geometry from the response. let geometry = data.geometry[0][0]; // Create a object containing the field coordinates to create a Leaflet Layer. let json = { type: 'Feature' as GeoJsonTypes, geometry: { type: 'Polygon', coordinates: [geometry], }, }; // Create a object that will define the style of the polygon let polygonStyle = { weight: 2, opacity: 1, fill: false, 'fill-opacity': 0, } as L.GeoJSONOptions; // Clear all the bounds created in the bounds group layer this.bounds.clearLayers(); // Clear all the images created in the imagens group layer this.imagens.clearLayers(); // Create the geoJson layer of LeafletJS. let geoJsonLayer = L.geoJson(json, polygonStyle).addTo(this.bounds); // Saving the bounds of the field from the geoJsonLayer let geoBounds = geoJsonLayer.getBounds(); // Make the map fly to the right coordintes of the field. this.map.flyTo(geoJsonLayer.getBounds().getCenter(), 15); // Checking if are any avaiable images and for each image // save the url of the image and the bound of the field in // the images array this.images.forEach((e: any) => { e.images.forEach((f: any) => { f.bounds = geoBounds; f.date = e.date.substring(11, 23); if (e.provider === 'sentinel') { f.imgtype = f.url.split('/0/')[1].split('.')[0].split('_')[0]; } else if (e.provider === 'planet') { f.imgtype = f.url .split('_SR.tif/')[1] .split('.')[0] .split('_')[0]; } else { f.imgtype = 'not supported'; } }); e.date = e.date.substring(0, 10); }); } }); } } In our service, we will define the function loadImages() Copy loadImages(fieldId: any, startDate: any, endDate: any, token: string): Observable<any> { let headers = new HttpHeaders().set('Authorization', token); return this.http.post<any>( this.apiUrl + 'field_images', { id: fieldId, startDate: startDate, endDate: endDate, }, { headers } ); } Show and hide map layers# With this function, we will receive an url from the parameter when the user clicks in the image he wants to see, and then we will display that image. Copy function showImage(url) { // Clear all the images from the imagens group layer, so only one // image will be displayed. imagens.clearLayers(); // If you remember, in the images array, we saved all the // images url, and the bounds of the fields. So when we receive // one url in the parameter, we will search the url in the array // and if it is a valid url, we will retrieve the bounds and then // display the image in the map. this.images.forEach((e: any) => { e.images.forEach((f: any) => { if (f.url === url) { L.imageOverlay(f.url, f.bounds).addTo(this.imagens); } }); }); } "},{"title":"Extra","type":1,"pageTitle":"How to get satellite field images","url":"docs/usecase_satellite#extra","content":"In this case, we are using the LeafletJS library, so we need to create our map, and add the base layers we want. We will add a layer for the OpenStreetMap basemap, and one for the Mapbox basemap. To use the MapBox basemap without creating an map variable to it, we need to setup our MapBox token in one variable and then reach the mapbox url passing our token. Copy private initMap(): void { // Create the Map variable. this.map = L.map('map', { center: [39.8282, -98.5795], zoom: 3, }); // OpenStreetMap Layer. const osm = L.tileLayer( 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 18, minZoom: 3, attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>', } ); let token = \"YOUR MAPBOX TOKEN\"; // MapBox Layer. const mapBox = L.tileLayer( 'https://api.mapbox.com/styles/v1/mapbox/satellite-v9/tiles/{z}/{x}/{y}?access_token=' + token, { maxZoom: 21, tileSize: 512, zoomOffset: -1, attribution: '© <a href=\"https://www.mapbox.com/contribute/\">Mapbox</a> © <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>', } ); osm.addTo(this.map); mapBox.addTo(this.map); // The base maps. const baseMaps = { OpenStreetMap: osm, MapBox: mapBox, }; //Group layers for the images and the bounds. this.imagens = L.layerGroup().addTo(this.map); this.bounds = L.layerGroup().addTo(this.map); // Create the base maps control in the map const layerControl = L.control.layers(baseMaps).addTo(this.map); // The sidebar options var options: L.SidebarOptions = { container: 'sidebar', position: 'left', }; // Creating the sidebar var sidebar = L.control.sidebar(options); // Adding the sidebar to the map this.map.addControl(sidebar); } See here more informations about Mapbox! See here more informations about LeafletJS! tip Here you can run a live use case demo! "},{"title":"Leaf User Endpoints","type":0,"sectionRef":"#","url":"docs/user_management_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Leaf User Endpoints","url":"docs/user_management_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/usermanagement/api See below the REST resources and their endpoints available in this service. Leaf Users Resources# Form of a Leaf User resource: Copy { \"id\": \"UUID\", \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\", \"trimbleCredentials\": {\"Object\"}, \"cnhiCredentials\": {\"Object\"}, \"johnDeereCredentials\": {\"Object\"}, \"ravenCredentials\": {\"Object\"}, \"climateFieldViewCredentials\": {\"Object\"}, \"staraCredentials\": {\"Object\"}, \"agLeaderCredentials\": {\"Object\"}, \"ravenSlingshotCredentials\": {\"Object\"} } Check the providers credentials endpoints for more details about the credentials object. The following endpoints are available: Description\tEndpointsGet a Leaf User\tGET /users/{id} Get all Leaf Users\tGET /users/ Create a Leaf User\tPOST /users Update a Leaf User\tPUT /users Delete a Leaf User\tDELETE /users/{id} "},{"title":"User Endpoints","type":1,"pageTitle":"Leaf User Endpoints","url":"docs/user_management_endpoints#user-endpoints","content":""},{"title":"Get a Leaf User","type":1,"pageTitle":"Leaf User Endpoints","url":"docs/user_management_endpoints#get-a-leaf-user","content":" GET /users/{id} Get a Leaf User by its id. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{id}' Response# A Leaf User as a JSON object. Copy { \"id\": \"UUID\", \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\", \"trimbleCredentials\": {\"Object\"}, \"cnhiCredentials\": {\"Object\"}, \"johnDeereCredentials\": {\"Object\"}, \"ravenCredentials\": {\"Object\"}, \"climateFieldViewCredentials\": {\"Object\"}, \"staraCredentials\": {\"Object\"}, \"agLeaderCredentials\": {\"Object\"}, \"ravenSlingshotCredentials\": {\"Object\"} } "},{"title":"Get all Leaf Users","type":1,"pageTitle":"Leaf User Endpoints","url":"docs/user_management_endpoints#get-all-leaf-users","content":" GET /users Get all Leaf Users. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users' Response# A JSON array containing Leaf Users. "},{"title":"Create a Leaf User","type":1,"pageTitle":"Leaf User Endpoints","url":"docs/user_management_endpoints#create-a-leaf-user","content":" POST /users Creates a Leaf User. Request example# Copy { \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\" } Besides the four properties of the example above, if you already have created credentials for some provider like John Deere, you can add an entry like the following, specifying the id of the credentials object previously created, so it will be bind to the Leaf User being created. Check theproviders credentials endpoints for more details about the credentials object. Copy \"johnDeereCredentials\": { \"id\": \"UUID\" } cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\"}' \\ 'https://api.withleaf.io/services/usermanagement/api/users' Response# A Leaf User with the id assigned to it and it's credentials. Copy { \"id\": \"UUID\", \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\" } "},{"title":"Update a Leaf User","type":1,"pageTitle":"Leaf User Endpoints","url":"docs/user_management_endpoints#update-a-leaf-user","content":" PUT /users Edits an existing Leaf User by submitting a new one. Request examples# Copy { \"id\": \"UUID\", \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\" } Note that if the existing resource has credentials and you don't include them in the body, the new Leaf User will have no credentials. Said that, for keeping the credentials or updating them, include in the JSON above an entry like this: Copy \"johnDeereCredentials\": { \"id\": \"UUID\" } Check the providers credentials endpoints for more details about the credentials object. cURLPythonJavaScript Copy curl -X PUT \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"id\": \"UUID\", name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\"}' \\ 'https://api.withleaf.io/services/usermanagement/api/users' Response# A Leaf User with the id assigned to it and it's credentials. Copy { \"id\": \"UUID\", \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\" } "},{"title":"Delete a Leaf User","type":1,"pageTitle":"Leaf User Endpoints","url":"docs/user_management_endpoints#delete-a-leaf-user","content":" DELETE /users/{id} Deletes an existing Leaf User by id. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{id}' "},{"title":"Providers credentials endpoints","type":1,"pageTitle":"Leaf User Endpoints","url":"docs/user_management_endpoints#providers-credentials-endpoints","content":"John DeereClimate FielviewTrimbleCNHiStaraRavenAgLeaderRaven SlingshotSenteraAgVance tip Please don't hesitate to contact us to schedule a demo, ask a question, request sample data, or suggest a feature! "},{"title":"Leaf User Overview","type":0,"sectionRef":"#","url":"docs/user_management_overview","content":"","keywords":""},{"title":"Integrate with John Deere","type":1,"pageTitle":"Leaf User Overview","url":"docs/user_management_overview#integrate-with-john-deere","content":"We made this very easy on one of our blog posts. Check our blog post on John Deere authentication with Leaf "},{"title":"Integrate with Climate Field View","type":1,"pageTitle":"Leaf User Overview","url":"docs/user_management_overview#integrate-with-climate-field-view","content":"We made this very easy on one of our blog posts. Check our blog Post on Climate Field View authentication with Leaf "},{"title":"Integrate with AgLeader","type":1,"pageTitle":"Leaf User Overview","url":"docs/user_management_overview#integrate-with-agleader","content":"We made this very easy on one of our blog posts. Check our blog Post on AgLeader Authentication with Leaf "},{"title":"Integrate with CNHi","type":1,"pageTitle":"Leaf User Overview","url":"docs/user_management_overview#integrate-with-cnhi","content":"We made this very easy on one of our blog posts. Check our blog Post on CNHi authentication with Leaf "},{"title":"How to upload a file and get images","type":0,"sectionRef":"#","url":"docs/usecase_upload","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"How to upload a file and get images","url":"docs/usecase_upload#about","content":"This use case describes how to get the information and images from uploaded files. Follow this documentation. "},{"title":"Register","type":1,"pageTitle":"How to upload a file and get images","url":"docs/usecase_upload#register","content":"To register with Leaf: Go to registration link and create your account.Save your credentials to use in the next step. "},{"title":"Backend","type":1,"pageTitle":"How to upload a file and get images","url":"docs/usecase_upload#backend","content":""},{"title":"Create server","type":1,"pageTitle":"How to upload a file and get images","url":"docs/usecase_upload#create-server","content":"After registered, you will need to setup a server, in this case we will use the Express Framework to create the server, the Ngrok library to be able to open our localhost port to the open internet and the Axios library to do POST/GET requests in our server: Copy const express = require(\"express\") const app = express() const ngrok = require(\"ngrok\") const axios = require(\"axios\") var startTunnel = async () => { await ngrok.authtoken(\"YOUR NGROK AUTHTOKEN\"); url = await ngrok.connect(THE LOCALHOST PORT YOU WANT TO DISPOSE TO THE OPEN INTERNET); return url; }; Now you will need to define some routes that your server will use, in this example, we define the follow routes: "},{"title":"Routes","type":1,"pageTitle":"How to upload a file and get images","url":"docs/usecase_upload#routes","content":"Route '/main'# This route will be responsible to render our main page, in the route: '/main'. Copy app.get(\"/main\", (req, res) => { res.render(__dirname + \"/views/ejs/map.ejs\"); }); Route '/webhook'# This route will be the route that we will use in the process of creating our webhook in the Leaf API, with this route we will receive the alerts from the Leaf API, and save the files id to use it in the future. In this example, we just get 2 types of response from the Leaf API, the types: uploadedFileProcessingFaileduploadedFileProcessingFinished Copy app.post(\"/webhook\", (req, res) => { if (req.body.message === \"confirmation of webhook upon registration\") { console.log(\"Just checking if webhook url is alive\"); } if (req.body.type === \"uploadedFileProcessingFailed\") { console.log(\"Processing failed to the file: \" + req.body.fileId); } else if (req.body.type === \"uploadedFileProcessingFinished\") { console.log(\"Processing ok to the file: \" + req.body.fileId); let content = req.body.fileId + \"\\n\"; fs.appendFile(\"./files/all.txt\", content, (error) => { if (error) { console.error(error); } }); } res.status(200).send(\"Ok\"); });  Here you can see the Alerts Documentation. Route '/create_token'# In this route, we will create the user token to use in the next steps. In the data object, we need the attributes username and password that comes from a form in the front-end, and the attribute rememberMe is optional. We make a POST request with AXIOS to the Leaf API endpoint that is responsible to create our token, if everything is ok, it will return an status code 200, and the token will be saved in the tokenvariable, if anything is wrong, it will be catched by the .catch() function. Copy app.post(\"/create_token\", (req, res) => { let email = req.body.email.trim(); let passwd = req.body.password.trim(); let endpoint = \"https://api.withleaf.io/api/authenticate\"; let data = { username: email, password: passwd, rememberMe: \"true\" }; axios .post(endpoint, data) .then(function (response) { token = response.data[\"id_token\"]; res.json(\"Congrats! Login done!\"); }) .catch((error) => { if (error.response.data.status === 400) { res.json(\"Oops! Login failed!\"); } else if (error.response.data.status === 401) { res.json(\"Oops! Invalid credentials!\") } }); }); Here you can see the Authentication Documentation. Route '/create_webhook'# In this route, we will receive data from a form in the front-end, put them in a object named data and then make a post request with AXIOS to the Leaf API endpoint that is responsible for creating webhooks. The attributes name and events comes from the form, the attribute secret you will need to generate, and the parameter url is created when the server start using the function startTunnel(); and we add the '/webhook' that is the route we defined early. Copy app.post(\"/create_webhook\", (req, res) => { let name = req.body.nome; let data = { events: [req.body.type.trim()], name: name, secret: \"YOUR SECRET\", url: url + \"/webhook\" }; let headers = { Authorization: `Bearer ` + token }; let endpoint = \"https://api.withleaf.io/services/alerts/api/alerts/webhooks\"; axios .post(endpoint, data, { headers }) .then((response) => { res.json('Webhook successfully created') }) .catch((error) => { if (error.response.data.status === 400) { res.json(\"This event is already created at some webhook url.\"); } }); }); Here you can see the Webhook Documentation. Route '/list_webhook'# In this route, we will use our token to list all our created webhooks. We need to do a GET request with AXIOS to the Leaf API endpoint responsible to give us all our webhooks. And all will be done just if our token is not undefined, in other case, it will give us the error'Invalid token btw, generate one first!'. Copy app.get(\"/list_webhook\", (req, res) => { if (token != undefined) { let headers = { Authorization: `Bearer ` + token }; let endpoint = \"https://api.withleaf.io/services/alerts/api/alerts/webhooks\"; axios .get(endpoint, { headers }) .then(function (response) { res.json(JSON.stringify(response.data)); }) .catch(console.error); } else { res.json(\"Invalid token btw, generate one first!\"); } }); Here you can see the Webhook Documentation. Route '/delete_webhook/:id'# In this route, we will be able to delete a webhook that we created. The id comes from the parameter id in the url, and we will use this parameter in the DELETE request that we make with AXIOS, we also need to set our token in the header, and if everything is ok, we will receive an status code 204 Copy app.get(\"/delete_webhook/:id\", (req, res) => { let webhook_id = req.params.id; const headers = { Authorization: `Bearer ` + token }; const id = webhook_id; const endpoint = 'https://api.withleaf.io/services/alerts/api/alerts/webhooks/' + id; axios .delete(endpoint, { headers }) .then((response) => console.log(response.status)) .catch(console.error); res.redirect(\"/\"); }); Here you can see the Webhook Documentation. Route '/save_file'# In this route, we will receive a file that was uploaded from the front-end, we will save it, upload to Leaf API and then delete it. If the user token is already generated, it will follow the process, if it is undefined, it will send back the message 'Not a valid token, create one first'. Copy app.post(\"/save_file\", (req, res) => { if (token === undefined) { res.json('Not a valid token, create one first'); } else { //Here we save the provider and the file that is comming from the front end, // we also save the file name and create a path in the server to the file. let provider = req.body.provider; let files = req.files; let filename = files.upload.name; let file_path = path.resolve(`./${files.upload.name}`); // Here we save the file in the path that we created, if something went wrong, // it will send back the error. files.upload.mv(file_path, (err) => { if (err) return res.status(500).send(err); }); // Here we make a get request with axios to retrieve our Leaf User Id, that is // necessary for the next step. let endpoint = \"https://api.withleaf.io/services/usermanagement/api/users/\"; let headers = { Authorization: `Bearer ` + token }; axios .get(endpoint, { headers }) .then(function (response) { leaf_user_id = response.data[0][\"id\"]; endpoint = \"https://api.withleaf.io/services/operations/api/batch\"; let headers = { Authorization: `Bearer ` + token, \"Content-Type\": \"multipart/form-data\" }; // Once the Leaf User Id is set, we add it to the param object, that // we will use to post the file to Leaf API endpoint. let params = { provider: provider, leafUserId: leaf_user_id }; // Create a form so we can put the file received from the front-end // in the request to the Leaf API endpoint. let form = new FormData(); form.append(\"file\", fs.createReadStream(file_path)); axios .post(endpoint, form, { headers, params }) .then(function (response) { // Delete the file received fs.unlink(file_path, (erro) => { if (erro) console.log(erro); }); // Send a json to the front-end that the file // was uploaded to Leaf API endpoint. res.json(\"File uploaded, wait for it to be processed!\"); }) .catch(function () { // If an error ocurred, send the error to the front-end. res.json('Error ocurred during file upload, try again with a valid file') } ); }) .catch(function () { res.json('Couldnt retrieve your token, generate one first.') }); } }); Here you can see the Files Documentation. Route '/verify_files'# In this route, we can verify if any files that we uploaded were processed succefully. If the token is already generated it will proceed to verifying the all.txt file, where the files id are saved when we receive an alert in the '/webhook' route. If are any files id in the file, the route will return the files id in the JSON options. Copy app.get(\"/verify_files\", (req, res) => { if (token === undefined) { res.json(`Invalid token btw, generate one first!`); } else { fs.readFile(\"./files/all.txt\", \"utf-8\", (err, data) => { if (err) { console.error(err); } if (data.length > 0) { let options = []; fs.readFile(\"./files/all.txt\", \"utf-8\", (err, data) => { if (err) { console.error(err); } data.split(/\\r?\\n/).forEach((line) => { options.push(line); }); res.json(JSON.stringify(options)); }); } else { res.json( 'No file processed yet!' ); } }); } }); Route '/detail_file/:id'# In this route, we will receive and id in the url, and we will use this id to make a GET request with AXIOS in the Leaf API endpoint that is responsible to give us the content of uploaded files. The API endpoint will give us an JSON with the information, and we will send it back to the front-end. Copy app.get(\"/detail_file/:id\", (req, res) => { let file_id = req.params.id; let endpoint = \"https://api.withleaf.io/services/operations/api/files/\" + file_id; let headers = { Authorization: `Bearer ` + token }; axios .get(endpoint, { headers }) .then(function (response) { let data = response.data; res.json({ data }); }) .catch(console.error); }); Here you can see the Files Documentation. Route '/file_images/:id'# In this route, we will be able to get the images from the Leaf API endpoint. The file id is received from the form, in the parameter id and we put it in the endpoint url. When we make a GET request with AXIOS, the endpoint will return an JSON with the images url and informations related to that file id that we send in the url. Copy app.get(\"/file_images/:id\", (req, res) => { let file_id = req.params.id; let endpoint = \"https://api.withleaf.io/services/operations/api/files/\" + file_id + \"/images\"; let headers = { Authorization: `Bearer ` + token }; axios .get(endpoint, { headers }) .then(function (response) { let data = response.data; res.json({ data }); }) .catch(console.error); }); Here is the File Images Documentation. Route '/image_coordinates'# In this route, we will receive a list of images url, and we will work with it. Copy app.post(\"/image_coordinates\", async (req, res) => { let received = req.body; received = JSON.parse(received.dados); //For each link received, we will use the Probe library to get the size of an image //from a url, and we will save it because we need to use it in the future to //get the real coordinates. for await (const link of received) { let result = await probe(link.url); link.width = result.width; link.height = result.height; } //Here we define a function getCoordintes() that will receive an array, filled with //the images and its sizes, and an callback function that will be called when all //the Promises are resolved. function getCoordinates(arr, callback) { var results = []; var expecting = arr.length; //For each link in the array, we will get an extra .xml file from the Leaf API //that contains the information that we need to calculate the real world coordinates. arr.forEach((e) => { // Get the .xml file using the https library. let req2 = https.get(e.url + \".aux.xml\", function (res2) { let data = \"\"; res2.on(\"data\", function (stream) { data += stream; }); res2.on(\"end\", function () { // Parse the information from xml to json using the library xml2js // parser is from xml2js = new xml2js.Parser({ attrkey: \"ATTR\" }); parser.parseString(data, function (error, result) { if (error === null) { // Get the necessary information from inside the JSON let resultado = result[\"PAMDataset\"][\"GeoTransform\"][0].split(\",\"); // This is the top left point of the image: let TLX = parseFloat(resultado[0].trim()); let TLY = parseFloat(resultado[3].trim()); //This is the bottom right point of the image: let BRX = parseFloat(resultado[0].trim()) + parseInt(e.width) * parseFloat(resultado[1].trim()) + parseInt(e.height) * resultado[2]; let BRY = parseFloat(resultado[3].trim()) + parseInt(e.width) * parseFloat(resultado[4].trim()) + parseInt(e.height) * resultado[5]; /*See image1.*/ let x0 = (TLX * (180 / Math.PI)) / 6378137.0; let y0 = ((Math.PI * 0.5 - 2.0 * Math.atan(Math.exp(-TLY / 6378137.0))) * 180) / Math.PI; let x1 = (BRX * (180 / Math.PI)) / 6378137.0; let y1 = ((Math.PI * 0.5 - 2.0 * Math.atan(Math.exp(-BRY / 6378137.0))) * 180) / Math.PI; /*See image2.*/ let obj = { 1: x0 + \", \" + y0, 2: x1 + \", \" + y0, 3: x1 + \", \" + y1, 4: x0 + \", \" + y1, 5: e.url, 6: e.type, }; /*See image3.*/ results.push(obj); //This part does 'expeting - 1' every forEach, and when it hits 0 //(all the array processed) it calls the callback function. if (--expecting === 0) { callback(results); } } else { console.log(error); } }); }); }); }); } //Here we call the function, sending the array that we created with the image links //and sizes, and we define the function that will be called when everything is finishid, //in this case,the function just respond the request with an JSON containing all the data //needed to plot the images in the front end. getCoordinates(received, function (results) { res.json(JSON.stringify(results)); }); }); Image 1 - Image 2 - Image 3 "},{"title":"Start the server","type":1,"pageTitle":"How to upload a file and get images","url":"docs/usecase_upload#start-the-server","content":"For the last part, we need to start our server, and make the front-end! Copy app.listen(3000, async () => { //Clear the all.txt file fs.writeFileSync('./files/all.txt', ''); // Get the ngrok url to the open internet url = await startTunnel(); console.log(url); console.log(\"Server started!\"); }); "},{"title":"Frontend","type":1,"pageTitle":"How to upload a file and get images","url":"docs/usecase_upload#frontend","content":"In the frontend, we will need to use just one page! We define the page in the path: /views/ejs/map.ejs. In this part of the documentation, it will be show some functions that are used in the map.ejs file, all this functions will be called via onClick() method from form buttons. It's important to say that we will use the Mapbox API to display the map and images on it. "},{"title":"Login","type":1,"pageTitle":"How to upload a file and get images","url":"docs/usecase_upload#login","content":"This function is called by our button that is responsible for doing the login. It will get the data from the form, and do a POST request with AXIOS to our backend. That will return 'Congrats! Login done!' if the credentials are right, and another message depending on what happened wrong. Copy function loginClick() { let email = $(\"#email\").val(); let password = $(\"#password\").val(); $.ajax({ type: \"POST\", url: '/create_token', data: { password: password, email: email }, success: function(response) { if (response === 'Congrats! Login done!') { //Here you need to disable this element and //show the next one, in the case, the div responsible //for creating the webhook. } else { //Show some message saying that the login failed. } } }); } "},{"title":"Create Webhook","type":1,"pageTitle":"How to upload a file and get images","url":"docs/usecase_upload#create-webhook","content":"With this function, we will get the parameters from the form about the webhook, and do a POST request with AXIOS to our backend resonsible for creating the webhook in the Leaf API. Copy function webhookCreateClick() { if ($('YOUR FORM INPUT ID').val() != false) { let name = $(\"YOUR FORM INPUT ID\").val(); let type = $(\"YOUR SELECT INPUT SELECTED\").val(); $('#webhook_response').text(''); $.ajax({ type: \"POST\", url: '/create_webhook', data: { name: name, type: type }, success: function(response) { if (response === 'Webhook successfully created') { //Here you need to disable this element and //show the next one, in the case, the div responsible //for list the webhook. listWebhooks(); } else { //Show some message saying that the webhook creation failed. } } }); } } "},{"title":"List webhooks","type":1,"pageTitle":"How to upload a file and get images","url":"docs/usecase_upload#list-webhooks","content":"In this function, we will be able to list all the webhooks that our Leaf Account have. We will list them to the user just to see if the webhook that he needs is created or not. Copy function listWebhooks() { let start = '<p>' let end = '</p>' $.ajax({ type: \"GET\", url: '/list_webhook', success: function(response) { // Here, we get the response from our backend and build a div with // <p></p> inside of it containing the type of the webhooks. // Then, we call the next element, the uploadFile(); response = JSON.parse(response); if (response.length > 0) { response.forEach((e) => { e.events.forEach((p) => { $('YOUR DIV ID').append(start + p + end); }) }) } uploadFile(); }, error: function(response) { console.log(response); } }); }; "},{"title":"Upload a file","type":1,"pageTitle":"How to upload a file and get images","url":"docs/usecase_upload#upload-a-file","content":"In this function, we will handle the upload file process. We need to intercept the form submit action and then make a POST with AXIOS to our backend. Copy function uploadFile() { // Intercept the submit form action $(\"YOUR FORM ID\").submit(function() { // Create a new formData, passing the real formData file to it. var formData = new FormData(this); $.ajax({ url: '/save_file', type: 'POST', processData: false, contentType: false, cache: false, data: formData, success: function(response) { if (response === 'File uploaded, wait for it to be processed!') { // Here you will make what you want to happen when the file // was received in the backend and everything was ok with it. } else { // Here you need to display some message to the user if the file // that he uploaded was not in the correct format or size. } }, error: function(response) { console.log(response); }, }); }); }; "},{"title":"Check uploaded files","type":1,"pageTitle":"How to upload a file and get images","url":"docs/usecase_upload#check-uploaded-files","content":"With this function, we will be able to check if the Leaf API already processed any files that we uploaded to our backend. We will build a div with links inside of it, linking to another function: get_json(), that will retrieve all the data we need. Copy function checkFiles() { // Define the string we will build let start = `<a onclick=\"get_json(`; let middle = `)>`; let end = `</a>\"` $.ajax({ type: \"GET\", url: '/verify_files', success: function(response) { if (response == 'No file processed yet!') { // Display a message to your user saying that no files // were processed yet } else if (response == 'Invalid token btw, generate one first!') { // Display a message to your user saying that he needs // to generate a token first } else { // See the response from the backend and build an div // containing the links to check files content. response = JSON.parse(response); response.forEach((e) => { $('YOUR DIV ID').append(`<a onClick=\"get_json('` + e + `');\" style=\"cursor: pointer; cursor: hand;\"><p>` + e + `</a>`); }); } }, error: function(response) { // Display any error that cant occur during the response from backend. console.log(response); } }); }; "},{"title":"Get JSON data from files","type":1,"pageTitle":"How to upload a file and get images","url":"docs/usecase_upload#get-json-data-from-files","content":"With this function, we will receive an id from parameter, and we will send it to our backend, so the backend will send us the follow informations: File detailsFile imagesImages coordinates Copy function get_json(id) { let file_id = id; var allImages = new Array(); // With this GET request, we will send to the backend one file_id, // and it will return the images linked to it. $.ajax({ url: \"/file_images/\" + file_id, type: 'GET', async: false, dataType: 'json', success: function(res) { // In this response, we will get all the images that // are linked to the file_id, and we will save // this images url in the allImages array. res.dados.forEach((e) => { allImages.push({ 'url': e.url, 'type': e.property }); }); } }); // With this POST request, we will send to our backend all images url, // the operation type of that images, and with the response we will // build map layers. $.ajax({ url: \"/image_coordinates\", type: 'POST', async: false, dataType: 'json', data: { dados: JSON.stringify(allImages) }, success: function(res) { points = JSON.parse(res); // Clear the actual options of layers if (optionsShow.length > 0) { optionsShow.forEach((e) => { map.removeLayer(`'` + e + `'`); map.removeSource(`'` + e + `'`); }) } optionsShow = []; // Creating a list of avaible images so the user can click it and // display the image on the map. points.forEach((e) => { $('YOUR DIV TO LIST THE IMAGES TYPE').append(`<a onClick=\"showImage('` + e[6] + `');\" style=\"cursor: pointer; cursor: hand;\"><p>` + e[6] + `</a>`) // Save the type of the image so the user can choose what to see optionsShow.push(e[6]); // Create the 4 points (x,y) real coordinates // of the image, getting the points // from the server response let a = parseFloat(e[1].split(',')[0]); let a1 = parseFloat(e[1].split(',')[1]); let b = parseFloat(e[2].split(',')[0]); let b1 = parseFloat(e[2].split(',')[1]); let c = parseFloat(e[3].split(',')[0]); let c1 = parseFloat(e[3].split(',')[1]); let d = parseFloat(e[4].split(',')[0]); let d1 = parseFloat(e[4].split(',')[1]); // Make the map fly to the right coordinate of the images map.flyTo({ center: [a, a1], zoom: 17 }); // Add a source to the map, so we can add a layer to it // e[6] has the type of the image map.addSource(`'` + e[6] + `'`, { 'type': 'image', // e[5] has the url of the image 'url': e[5], 'coordinates': [ [a, a1], [b, b1], [c, c1], [d, d1] ] }); // Add a layer to the map, so we can show and hide it in the future. // e[6] has the type of the image map.addLayer({ 'id': `'` + e[6] + `'`, 'type': 'raster', 'source': `'` + e[6] + `'`, 'paint': { 'raster-fade-duration': 0 } }); // set the layer visibility to none map.setLayoutProperty(`'` + e[6] + `'`, 'visibility', 'none'); }); }, error: function(res) { console.log(res); } }); // With this GET request, we will send an file id to the backend, // and it will return the data about that file. e.g summary information $.ajax({ url: \"/file_details/\" + file_id, type: 'GET', async: false, dataType: 'json', success: function(res) { // Here you can define one function to show this data // in some div of your page. } }) }; "},{"title":"Show and hide map layers","type":1,"pageTitle":"How to upload a file and get images","url":"docs/usecase_upload#show-and-hide-map-layers","content":"With this function, we will receive an id from the parameter, and display that image if it's hidden, and hide it if it's show. Copy function showImage(id) { let visiviel = map.getLayoutProperty(`'` + id + `'`, 'visibility'); if (visiviel === 'visible') { map.setLayoutProperty(`'` + id + `'`, 'visibility', 'none'); } else { map.setLayoutProperty(`'` + id + `'`, 'visibility', 'visible'); } } "},{"title":"Extra","type":1,"pageTitle":"How to upload a file and get images","url":"docs/usecase_upload#extra","content":"Don't forget to create an Map, a div for it and replace the YOUR MAPBOX TOKEN, otherwise, the map will not work! Copy mapboxgl.accessToken = 'YOUR MAPBOX TOKEN'; const map = new mapboxgl.Map({ container: 'map', maxZoom: 20, minZoom: 1, zoom: 0, center: [0, 0], style: 'mapbox://styles/mapbox/satellite-v9' }); map.on('load', () => {}); See here more informations about Mapbox! tip Here you can run a live use case demo! "},{"title":"Weather Overview","type":0,"sectionRef":"#","url":"docs/weather_overview","content":"","keywords":""},{"title":"Forecast","type":1,"pageTitle":"Weather Overview","url":"docs/weather_overview#forecast","content":"The Forecast service provides access to forecast weather data for up to 10 days. The data can be fetched daily or hourly. "},{"title":"Properties","type":1,"pageTitle":"Weather Overview","url":"docs/weather_overview#properties","content":"TemperatureSunriseSunsetSnowfallPrecipitationEvapotranspirationRainWind SpeedWind GustsWind DirectionDew-pointShort Wave RadiationCloud coverRelative Humidity "},{"title":"Data sources","type":1,"pageTitle":"Weather Overview","url":"docs/weather_overview#data-sources","content":"Weather Model\tNational Weather Provider\tOrigin Country\tResolution\tForecast Length\tUpdate frequencyICON\tDeutscher Wetterdienst (DWD)\tGermany\t2 - 11 km\t7.5 days\tEvery 3 hours GFS\tNOAA\tUnited States\t3 - 25 km\t16 days\tEvery hour Arpege & Arome\tMeteoFrance\tFrance\t1 - 40 km\t4 days\tEvery 6 hours IFS\tECMWF\tEuropean Union\t44 km\t7 days\tEvery 6 hours MET Nordic\tMET Norway\tNorway\t1 km\t2.5 days\tEvery hour GEM\tCanadian Weather Service\tCanada\t2.5 km\t10 days\tEvery 6 hours "},{"title":"Historical Data","type":1,"pageTitle":"Weather Overview","url":"docs/weather_overview#historical-data","content":"The Historical service provides access to historical weather data for up to 10 years ago. The data can be fetched daily or hourly. "},{"title":"Properties","type":1,"pageTitle":"Weather Overview","url":"docs/weather_overview#properties-1","content":"TemperatureSunriseSunsetSnowfallPrecipitationEvapotranspirationRainWind SpeedWind GustsWind Direction[Dew-pointShort Wave RadiationCloud coverRelative Humidity]() "},{"title":"Data sources","type":1,"pageTitle":"Weather Overview","url":"docs/weather_overview#data-sources-1","content":"Reanalysis Model\tRegion\tSpatial Resolution\tTemporal Resolution\tData Availability\tUpdate frequencyERA5\tGlobal\t0.25° (~25 km)\tHourly\t2020 to present\tDaily with 5 days delay "},{"title":"Weather Endpoints","type":0,"sectionRef":"#","url":"docs/weather_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Weather Endpoints","url":"docs/weather_endpoints#about","content":"Here we list all the available endpoints from Weather API. For easily calling them, we recommend using Leaf's Postman collection. All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/weather/api This service has the following endpoints available: Description\tEndpointsGet Daily Forecast\tGET /users/{leafUserId}/weather/forecast/field/{fieldId}/daily Get Hourly Forecast\tGET /users/{leafUserId}/weather/forecast/field/{fieldId}/hourly Get Daily Historical\tGET /users/{leafUserId}/weather/historical/field/{fieldId}/daily Get Hourly Historical\tGET /users/{leafUserId}/weather/historical/field/{fieldId}/hourly "},{"title":"Endpoints","type":1,"pageTitle":"Weather Endpoints","url":"docs/weather_endpoints#endpoints","content":""},{"title":"Get Daily Forecast","type":1,"pageTitle":"Weather Endpoints","url":"docs/weather_endpoints#get-daily-forecast","content":" GET /users/{leafUserId}/weather/forecast/field/{fieldId}/daily Get daily forecast by leaf user and field. If dates are not set on the endpoint, the response will return forecast data for the next seven days. Parameter (to filter by)\tvaluesendTime\tISO 8601 date. Returns operations until the endTime startTime\tISO 8601 date. Returns operations from the startTime onward Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/weather/api/users/{leafUserId}/weather/forecast/field/{fieldId}/daily' Response# Copy { \"type\": \"Feature\", \"properties\": { \"maxTemperature\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"ºC\" }, \"sunrise\": { \"values\": [ \"time\": \"str\", \"value\": \"str\" ], \"unit\": \"iso8601\" }, \"snowfallSum\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"cm\" }, \"precipitationSum\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"mm\" }, \"maxWindspeed\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"km/h\" }, \"evapotranspiration\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"mm\" }, \"processedTime\": \"str\", \"rainSum\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"mm\" }, \"maxWindgusts\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"km/h\" }, \"meanTemperature\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"°C\" }, \"minTemperature\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"°C\" }, \"sunset\": { \"values\": [ \"time\": \"str\", \"value\": \"str\" ], \"unit\": \"iso8601\" }, \"windDirection\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"°\" } }, \"geometry\": { \"type\": \"str\", \"coordinates\": [ 0, 0 ] } } "},{"title":"Get Hourly Forecast","type":1,"pageTitle":"Weather Endpoints","url":"docs/weather_endpoints#get-hourly-forecast","content":" GET /users/{leafUserId}/weather/forecast/field/{fieldId}/hourly Get hourly forecast by leaf user and field. If dates are not set on the endpoint, the response will return forecast data for the next seven days. Parameter (to filter by)\tvaluesendTime\tISO 8601 date. Returns operations until the endTime startTime\tISO 8601 date. Returns operations from the startTime onward Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/weather/api/users/{leafUserId}/weather/forecast/field/{fieldId}/hourly' Response# Copy { \"type\": \"Feature\", \"properties\": { \"rain\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"mm\" }, \"dewpoint\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"°C\" }, \"windgusts\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"km/h\" }, \"snowfall\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"cm\" }, \"evapotranspiration\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"mm\" }, \"shortwaveRadiation\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"W/m²\" }, \"processedTime\": \"str\", \"cloudcover\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"%\" }, \"precipitation\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"mm\" }, \"relativeHumidity\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"%\" }, \"temperature\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"°C\" }, \"windspeed\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"km/h\" }, \"windDirection\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"km/h\" } }, \"geometry\": { \"type\": \"str\", \"coordinates\": [ 0, 0 ] } } "},{"title":"Get Daily Historical","type":1,"pageTitle":"Weather Endpoints","url":"docs/weather_endpoints#get-daily-historical","content":" GET /users/{leafUserId}/weather/historical/field/{fieldId}/daily Get daily historical by leaf user and field. If the dates are not defined in the endpoint, the response will return data from the last seven days. Parameter (to filter by)\tvaluesendTime\tISO 8601 date. Returns operations until the endTime startTime\tISO 8601 date. Returns operations from the startTime onward Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/weather/api/users/{leafUserId}/weather/historical/field/{fieldId}/daily' Response# Copy { \"type\": \"Feature\", \"properties\": { \"maxTemperature\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"ºC\" }, \"sunrise\": { \"values\": [ \"time\": \"str\", \"value\": \"str\" ], \"unit\": \"iso8601\" }, \"snowfallSum\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"cm\" }, \"precipitationSum\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"mm\" }, \"maxWindspeed\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"km/h\" }, \"evapotranspiration\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"mm\" }, \"processedTime\": \"str\", \"rainSum\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"mm\" }, \"maxWindgusts\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"km/h\" }, \"meanTemperature\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"°C\" }, \"minTemperature\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"°C\" }, \"sunset\": { \"values\": [ \"time\": \"str\", \"value\": \"str\" ], \"unit\": \"iso8601\" }, \"windDirection\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"°\" } }, \"geometry\": { \"type\": \"str\", \"coordinates\": [ 0, 0 ] } } "},{"title":"Get Hourly Historical","type":1,"pageTitle":"Weather Endpoints","url":"docs/weather_endpoints#get-hourly-historical","content":" GET /users/{leafUserId}/weather/historical/field/{fieldId}/hourly Get hourly historical by leaf user and field. If the dates are not defined in the endpoint, the response will return data from the last seven days. Parameter (to filter by)\tvaluesendTime\tISO 8601 date. Returns operations until the endTime startTime\tISO 8601 date. Returns operations from the startTime onward Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/weather/api/users/{leafUserId}/weather/historical/field/{fieldId}/hourly' Response# Copy { \"type\": \"Feature\", \"properties\": { \"rain\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"mm\" }, \"dewpoint\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"°C\" }, \"windgusts\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"km/h\" }, \"snowfall\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"cm\" }, \"evapotranspiration\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"mm\" }, \"shortwaveRadiation\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"W/m²\" }, \"processedTime\": \"str\", \"cloudcover\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"%\" }, \"precipitation\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"mm\" }, \"relativeHumidity\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"%\" }, \"temperature\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"°C\" }, \"windspeed\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"km/h\" }, \"windDirection\": { \"values\": [ \"time\": \"str\", \"value\": int ], \"unit\": \"km/h\" } }, \"geometry\": { \"type\": \"str\", \"coordinates\": [ 0, 0 ] } } "}]